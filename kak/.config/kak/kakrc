# sdothum - 2016 (c) wtfpl

# Kakoune
# ══════════════════════════════════════════════════════════════════════════════

# config for Kakoune

# $UNPLUG   -> nop  all bundles
# $DISPLAY  -> load gui bundles
# $DIFF     -> kak diff mode
# $TEST     -> eval $TEST.kak (nop all bundles)

# Lambda calculus flow control
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# simplifying "try %{ .. } catch %{ .. }" to "eval -verbatim %arg{1} %arg{2} %arg{3}"
# where %arg{1} is "%sh{ test .. && echo .. || echo .. }"
# further refactored to "%{ test .. }" by the define-command with %arg{1} as $1 SEE: ATTENTION

# ATTENTION: the eval $1 "$kak_opt_<names>" must be explicitly provided for %sh{} env variable export
# SEE: the comment (#) list of "$kak_opt_<names>" in the define-command "%sh{ .. # .. }" block
#      variables passed to if(-else) within this kakrc:
#         - %opt{color}
#         - %opt{mode}
#         - %opt{focus}
#         - %opt{livedown}

# ................................................................. if-then-else

# if-else %{ condition } %{ then } %{ else }
define-command if-else -params 3 %{ evaluate-commands -verbatim %sh{ eval $1 && echo then || echo else # kak_opt_color kak_opt_mode kak_opt_focus kak_opt_livedown } %arg{2} %arg{3} }  # SEE: ATTENTION
define-command then    -params 2 %{ evaluate-commands %arg{1} }
define-command else    -params 2 %{ evaluate-commands %arg{2} }

# ...................................................................... if-then

# if %{ condition } %{ then }
define-command if      -params 2 %{ if-else %arg{1} %arg{2} %{ nop } }

# ........................................................................ Debug

# trace %{ message }
define-command trace   -params 1 %{ nop %sh{ echo "${1# }" >>/tmp/kak:trace } }

# *debug* hook trace
if %{ [ -n "$UNPLUG" ] || [ -n "$TEST"] } %{
	hook global BufSetOption filetype=.* %{ echo -debug setting %val{hook_param} }
	hook global WinSetOption filetype=.* %{ echo -debug setting %val{hook_param} }
	hook global WinCreate .*             %{ echo -debug setting %val{hook_param} }
}

# User mode declaration control
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

declare-option str usermodes ''

# record user mode declarations by user mode name NOTE: format %{ <sort key> : <map statement> } with field 5: usermode
define-command record-usermode -params 1 %{
 	set-option global usermodes "%sh{ echo ""$kak_opt_usermodes\n$(echo $1 | cut -d' ' -f5 )$1"" }"
}

# filter and set user mode declarations by user mode name and key*
define-command play-usermodes -params ..2 %{
	# nop %sh{ echo "$kak_opt_usermodes" | grep "^$(echo $1)" >>/tmp/kak:usermodes:$(echo $1) }
	evaluate-commands %sh{ echo "$kak_opt_usermodes" | grep "^$(echo $1) $(echo $2)" | sort -n -k2 | cut -d: -f2- }
}

# Plugins
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Ncurses plugins
# ═══════════════

if %{ [ -z "$UNPLUG" ] && [ -z "$TEST" ] } %{
	source "%val{config}/bundle/kak-bundle/rc/kak-bundle.kak"
	bundle-noload kak-bundle https://github.com/jdugan6240/kak-bundle

	# ................................................................ auto-pairs
	bundle auto-pairs.kak https://github.com/alexherbo2/auto-pairs.kak.git %{
		enable-auto-pairs
	}

	# .......................................................... change-directory
	if-else %{ [ -z "$DIFF" ] } %{
		# change-directory action fails diff-jump - within a "dirdiff" loop SEE: kakdiff
		bundle kakoune-cd  https://github.com/Delapouite/kakoune-cd.git %{
			hook global WinDisplay .* change-directory-current-buffer
			hook global FocusIn    .* change-directory-current-buffer  # BUG: fails on filename with leading dashes
		}
	} %{
		define-command change-directory-current-buffer %{ nop }
	}

	# ................................................................ crosshairs
	bundle kak-crosshairs https://github.com/insipx/kak-crosshairs.git %{
		record-usermode %{ focush : map global user + ': crosshairs<ret>'   -docstring "crosshairs" }
		record-usermode %{ focush : map global user ^ ': cursorcolumn<ret>' -docstring "cursor column" }
	}

	# ..................................................................... fandt
	bundle kakoune-fandt https://github.com/listentolist/kakoune-fandt.git %{
		require-module fandt
	}

	# .......................................................... find and replace
	bundle kakoune-find https://github.com/occivink/kakoune-find.git %{
		record-usermode %{ alpha : map global user f ': find ' -docstring "find and replace" }
	}

	# .......................................................... focus selections
	bundle kakoune-focus https://github.com/caksoylar/kakoune-focus.git %{
		set-option global focus_context_lines 1
		# force uniform separator highlighting SEE: colors/duochrome
		set-option global focus_separator '{FocusSeparator}┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄'
		declare-option str focus "off"
		declare-option int focus_line 0

		# manage focus view to show maximum selections
		define-command toggle-focus %{
			if-else %{ [ "$kak_opt_focus" = "on" ] } %{
				set-option window focus "off"
				focus-disable
				margin '-relative'
				softwrap
				execute-keys "%opt{focus_line}g"
			} %{
				set-option window focus "on"
				set-option window focus_line %val{cursor_line}
				nowrap            # BECAUSE: softwrapped lines throw focus replace-range highlighter usage
				margin            # provide absolute line number referencing
				execute-keys ')'  # rotate to topmost selection NOTE: assumes no prior selection rotations made
				focus-enable
			}
		}

		record-usermode %{ focusf : map global user <space> ': toggle-focus<ret>' -docstring "focus selections" }
	}

	# ........................................................... lua interpreter
	bundle luar https://github.com/gustavo-hms/luar.git %{
		require-module luar
		set-option global luar_interpreter luajit
	}

	# ................................................................ move lines
	bundle kak-move-lines https://git.sr.ht/~raiguard/kak-move-lines %{
		map global normal <c-up>    ': move-lines-up %val{count}<ret>'   -docstring 'shift up'
		map global normal <c-down>  ': move-lines-down %val{count}<ret>' -docstring 'shift down'
		map global normal <c-left>  '<'                                  -docstring 'shift left'  # finger convenience :)
		map global normal <c-right> '>'                                  -docstring 'shift right'
	}

	# .................................................... peneira (fuzzy finder)
	bundle peneira https://github.com/gustavo-hms/peneira.git %{
		require-module luar
		require-module peneira
		set-option global peneira_files_command "rg --files --sort=path"  # single threaded --sort is fast enough for my folder organization

		# HACK: multi-client focus switching causes peneira to lose active client buffer directory
		define-command peneira-resync %{
			change-directory-current-buffer  # handled by hook FocusIn above, otherwise required
			buffer *debug*
			execute-keys ga
		}

		define-command buffers %{
			peneira-resync
			peneira 'buffers: ' %{ printf '%s\n' $kak_quoted_buflist } %{ buffer %arg{1} }
		}

		define-command files %{
			peneira-resync
			peneira-files -hide-opened
		}

		define-command symbols %{
			peneira-resync
			peneira-symbols
		}

		record-usermode %{ alpha : map global user b ': buffers<ret>' -docstring 'buffers' }
		record-usermode %{ alpha : map global user e ': files<ret>'   -docstring 'edit file' }
		record-usermode %{ alpha : map global user C ': symbols<ret>' -docstring 'ctag symbols' }
	}

	# ......................................................... phantom selection
	bundle kakoune-phantom-selection https://github.com/occivink/kakoune-phantom-selection.git

	# ............................................................... search docs
	bundle search-doc.kak https://github.com/jbomanson/search-doc.kak.git %{
		require-module search-doc
		alias global sd search-doc
	}

	# .................................................................. smarttab
	bundle smarttab.kak https://github.com/andreyorst/smarttab.kak.git %{
		require-module smarttab
		set-option global softtabstop 3

		hook global BufOpenFile .* smarttab
		hook global BufNewFile  .* smarttab
	}

	# .................................................................. snippets
	bundle kakoune-snippets https://github.com/occivink/kakoune-snippets.git %{
		set-option global snippets_auto_expand true
		record-usermode %{ snippet : map global user '%' ': snippets ' -docstring 'snippets' }

		hook -once global BufSetOption .* %{
			set buffer snippets %opt{snippets}  # keep any global snippets
		}

		hook -once global BufSetOption filetype=sh %{
			set -add buffer snippets 'usage:'     '%us' %{ snippets-insert %{usage() { usage: "$(basename $0) ${1:options}"; exit 1; } }}
			set -add buffer snippets 'usage:pipe' '%up' %{ snippets-insert %{usage() { usage: "$(basename $0) ${1:options}" | usage:pipe
			exit 1
		} }}
		}

		hook -once global BufSetOption filetype=markdown %{
			set -add buffer snippets 'date'   '%da' %{ snippets-insert %sh{ date '+## %A, %d %B %Y' | tr '[:upper:]' '[:lower:]' }}
			set -add buffer snippets 'img'    '%im' %{ snippets-insert %{![${1:heading}](/images/${2:file}.jpg) }}
			set -add buffer snippets 'search' '%se' %{ snippets-insert %{[${1:description}](http://thedarnedestthing.com/search?query=${2:query}) }}
		}
	}

	# ................................................................ sudo-write
	bundle kakoune-sudo-write https://github.com/occivink/kakoune-sudo-write.git

	# ............................................................... tree-sitter
	bundle-install-hook kak-tree-sitter %{
		cargo install kak-tree-sitter
		cargo install ktsctl
	}
	bundle kak-tree-sitter https://github.com/phaazon/kak-tree-sitter.git %{
		nop evaluate-commands %sh{ kak-tree-sitter -d -k --init $kak_session -s }
	}

}

# Terminal $DISPLAY plugins
# ═════════════════════════

if %{ [ -z "$UNPLUG" ] && [ -n "$DISPLAY" ] && [ -z "$TEST" ] } %{

	# ....................................................................... hop
	bundle-install-hook hop.kak %{
		cargo install hop-kak
	}
	bundle hop.kak https://github.com/hadronized/hop.kak.git %{
		nop evaluate-commands %sh{ hop-kak --init }
		declare-option str keyset 'heatrskplfyoudnm'

		define-command -override hop-kak %{
			exec ': evaluate-commands -no-hooks -- %sh{ hop-kak --keyset "$kak_opt_keyset" --sels "$kak_selections_desc" }<ret>'
		}

		define-command -override hop-kak-words %{
			exec 'gtGbxs\w+<ret>: evaluate-commands -no-hooks -- %sh{ hop-kak --keyset "$kak_opt_keyset" --sels "$kak_selections_desc" }<ret>'
		}

		record-usermode %{ alpha : map global user h ': hop-kak<ret>'       -docstring 'hop selection,word' }
		record-usermode %{ alpha : map global user H ': hop-kak-words<ret>' -docstring 'hop selection,word' }
	}

	# ...................................................... kakboard (clipboard)
	bundle kakboard https://github.com/lePerdu/kakboard.git %{
		# HISTORY: cb replaces "xclip {-in, -out} -selection clipboard"
		set global kakboard_copy_cmd 'cb copy'
		set global kakboard_paste_cmd 'cb paste'
		hook global WinCreate .* %{ kakboard-enable }

		record-usermode %{ alpha : map global user y ': kakboard-with-push-clipboard y<ret>' -docstring 'cb yank' }
		record-usermode %{ alpha : map global user c ': kakboard-with-push-clipboard d<ret>' -docstring 'cb cut' }
		record-usermode %{ alpha : map global user p ': kakboard-with-pull-clipboard p<ret>' -docstring 'cb put after,before' }
		record-usermode %{ alpha : map global user P ': kakboard-with-pull-clipboard P<ret>' -docstring 'cb put after,before' }
		record-usermode %{ alpha : map global user R ': kakboard-with-pull-clipboard R<ret>' -docstring 'cb replace' }
	}

	# ................................................................... kak-lsp
	bundle-install-hook kakoune-lsp %{
		# cargo install --locked --force --path .
		cargo install kak-lsp
	}
	bundle kakoune-lsp https://github.com/kakoune-lsp/kakoune-lsp.git %{
		# currently running commit 36f99810bdcc060617479d6c5405e868584ef0ff BUG: lsp-inlay-diagnostics-enable command option
		# cargo install --locked --force --path .
		# diff kak-lsp.toml $HOME/.config/kak/kak-lsp/kak-lsp.toml.unmarksman
		nop evaluate-commands %sh{ kak-lsp -s $kak_session --kakoune }

		set-option global lsp_cmd "kak-lsp -v -c $HOME/.config/kak-lsp/kak-lsp.toml -s %val{session} --log /tmp/kak-lsp.log"  # debug lsp with -vvv
		declare-option str linemark '►'                                      # diagnostic line marker
		set-option global lsp_diagnostic_line_error_sign   "%opt{linemark}"  # lsp glyph overrides
		set-option global lsp_diagnostic_line_hint_sign    "%opt{linemark}"
		set-option global lsp_diagnostic_line_info_sign    "%opt{linemark}"
		set-option global lsp_diagnostic_line_warning_sign "%opt{linemark}"
		set-option global lsp_inlay_diagnostic_sign        ''               # diagnostic fence meter (visual ticks replace ■'s)

		hook global WinSetOption filetype=(sh|c|cpp|go|javascript|latex|lua|markdown|perl|python|ruby|rust|toml|typescript) %{
			lsp-enable-window
			lsp-auto-hover-enable
			lsp-inlay-diagnostics-enable global
			colorscheme %opt{theme}  # WHY: restore Diagnostic faces (overwritten by kak-lsp injection above)

			map global object a     '<a-semicolon>lsp-object<ret>'                               -docstring 'LSP any symbol'
			map global object <a-a> '<a-semicolon>lsp-object<ret>'                               -docstring 'LSP any symbol'
			map global object e     '<a-semicolon>lsp-object Function Method<ret>'               -docstring 'LSP function or method'
			map global object k     '<a-semicolon>lsp-object Class Interface Struct<ret>'        -docstring 'LSP class interface or struct'
			map global object d     '<a-semicolon>lsp-diagnostic-object --include-warnings<ret>' -docstring 'LSP errors and warnings'
			map global object D     '<a-semicolon>lsp-diagnostic-object<ret>'                    -docstring 'LSP errors'
			map global insert <tab> '<a-;>:try lsp-snippets-select-next-placeholders catch %{ execute-keys -with-hooks <lt>tab> }<ret>' -docstring 'Select next snippet placeholder'

			record-usermode %{ alpha : map global user l ': enter-user-mode lsp<ret>' -docstring "LSP mode" }
		}
		hook global KakEnd .* lsp-exit

		define-command lsp-restart %{ lsp-stop; lsp-start } -docstring 'restart lsp server'
	}

	# .......................................................... kakoune-livedown
	bundle-install-hook kakoune-livedown %{
		sudo npm install -g livedown
	}
	bundle kakoune-livedown https://github.com/Delapouite/kakoune-livedown.git %{
		declare-option str livedown ''
		# set-option global livedown_browser "%sh{ echo $BROWSER }"
		set-option global livedown_browser "qutebrowser-instance"

		define-command enable-livedown %{
			set-option global livedown "%val{bufname}"
			livedown-start-with-write-on-idle
		}

		define-command disable-livedown %{
			if %{ [ -n "$kak_opt_livedown" ] } %{
				set-option global livedown ''
				livedown-stop  # close browser instance
			}
		}

		hook -once global BufSetOption filetype=markdown enable-livedown
		hook       global BufClose     .*                disable-livedown
	}

	# ................................................................... kakpipe
	bundle-install-hook kakpipe %{
		# cargo install --path . --root ~/.local
		cargo install kakpipe
	}
	bundle kakpipe https://github.com/eburghar/kakpipe.git %{
		require-module kakpipe
		record-usermode %{ shellp : map global user | 'x: kakpipe ' -docstring "kakpipe FIFO buffer" }
		map global normal | 'x|' -docstring "pipe FIFO buffer"
	}

	# ..................................................................... popup
	bundle popup.kak https://github.com/enricozb/popup.kak.git %{
		evaluate-commands %sh{ kak-popup init }
	}

	# .................................................................... splash
	# bundle splash.kak https://github.com/ftonneau/splash.kak.git
	bundle splash.kak https://github.com/Hjagu09/splash.kak.git

}

# Isolated plugin environment
# ═══════════════════════════

if %{ [ -n "$TEST" ] } %{
	evaluate-commands %sh{ cat "${kak_config}/$TEST.kak" }
}

# Plugins end ..................................................................

# GUI
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# .................................................................. Colorscheme

if-else %{ [ -n "$DISPLAY" ] } %{
	declare-option str theme 'duochrome'
	declare-option str mode  'normal'  # initial state
	declare-option str color ''        # force colorscheme initialization

	define-command normal-mode-colorscheme %{
		set-option window mode "normal"
		if %{ [ "$kak_opt_color" != "normal" ] } %{
			# trace %{ normal-mode-colorscheme }
			set-option window color "normal"
			colorscheme %opt{theme}
		}
	}

	define-command insert-mode-colorscheme %{
		set-option window mode "insert"
		if %{ [ "$kak_opt_color" != "insert" ] } %{
			# trace %{ insert-mode-colorscheme }
			set-option window color "insert"
			colorscheme %opt{theme}
		}
	}

	define-command capslock-colorscheme %{
		if %{ [ "$kak_opt_color" != "capslock" ] } %{
			# trace %{ capslock-colorscheme }
			set-option window color "capslock"
			colorscheme %opt{theme}
		}
	}

	# BUG: capslock colorscheme switching defers until the first keystroke (vs the realtime statusline reporting)
	define-command capslock-check %{
		# trace %{ capslock-check }
		if-else %{ capslock } %{
			capslock-colorscheme
		} %{
			if-else %{ [ "$kak_opt_mode" = "insert" ] } %{
				insert-mode-colorscheme
			} %{
				normal-mode-colorscheme
			}
		}
	}

	# window modal/capslock "duo"chrome HACK: see sxhkdrc for Caps_Lock trigger SEE: BUG above
	hook global WinCreate .* %{
		normal-mode-colorscheme
		hook window ModeChange (push|pop):.*:insert insert-mode-colorscheme
		hook window ModeChange (push|pop):insert:.* normal-mode-colorscheme
		hook window InsertIdle .*                   capslock-check
		hook window NormalIdle .*                   capslock-check
		hook window PromptIdle .*                   capslock-check
	}
} %{
	declare-option str theme %sh{ echo "${COLORSCHEME:-dabruin}" }
	colorscheme %opt{theme}
}

# record-usermode %{ alpha : map global user <space> ': normal-mode-colorscheme<ret>' -docstring "%opt{theme}" }

# ....................................................................... Screen

# set-option global ui_options terminal_status_on_top=true terminal_assistant=cat
# set-option global ui_options terminal_status_on_top=true

# lines and columns displayed around the cursor
set-option global scrolloff 4,4

# similar to goto g BUT: preserves selections
define-command scroll-home %{
	evaluate-commands %sh{ for i in $(seq 1 $(( $kak_cursor_line / $(tput lines) )) ) ;do echo "execute-keys <pageup>" ;done  }
}

# ................................................................. Line numbers

# modal line numbers
declare-option str ruler '│'  # SEE: statusline

# assign highlighter name "number-lines" for peneira compatibility
define-command margin -params ..1 %{ evaluate-commands add-highlighter -override window/number-lines number-lines -hlcursor -separator "'%opt{ruler}   '" %arg{@} }  # escape 'quotes' for eval

hook global WinCreate .* %{
	margin '-relative'  # on normal mode open
	hook window ModeChange (push|pop):.*:insert margin
	hook window ModeChange (push|pop):insert:.* %{ margin '-relative' }
}

# .................................................................... Soft wrap

define-command softwrap -params ..1 %{ evaluate-commands add-highlighter -override window/wrap wrap -word -indent -marker "'  ↪ '" %arg{@} }  # escape 'quotes' for eval
define-command nowrap %{ remove-highlighter window/wrap }

hook global WinSetOption filetype=markdown %{ softwrap '-width 80' }
hook global WinSetOption filetype=json     %{ softwrap '-width 250' }
hook global WinSetOption filetype=(sh|c|cpp|fish|go|javascript|latex|lua|perl|python|ruby|rust|toml|typescript) softwrap
hook global WinSetOption .*(conf|config|log|rc|text|txt) softwrap

# ................................................................... Statusline

# a minimalist statusline of "mode - column [utf-8] - filename [context]"
declare-option str spacer ' '
# display utf-8 value for non-latin characters
set-option global modelinefmt '%sh{capslock && echo "—CAPS— "}{{mode_info}} %opt{spacer} %val{buf_line_count}%opt{ruler} %val{cursor_char_column}%sh{[ "$kak_cursor_char_value" -lt 32 ] || [ "$kak_cursor_char_value" -gt 126 ] && printf " U+%04x" "$kak_cursor_char_value"} %opt{spacer} %val{bufname}{{context_info}} [%sh{[ -z "$kak_opt_filetype" ] && echo "--" || echo "$kak_opt_filetype"}] %opt{spacer} %val{session}(%sh{echo "$kak_client" | sed -r "s/[^0-9]*(.*)/\1/"})'

# set-option global ui_options terminal_assistant=cat

# Editing
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# ................................................................... Formatting

set-option global tabstop 3
set-option global indentwidth 3
declare-user-mode format

map global normal <c-l> ': comment-line<ret>' -docstring 'comment'  # beakl key position for "#" NOTE: <c-c> unmappable
map global normal '#'   ': enter-user-mode format<ret>'

# ................................................................... Commenting

record-usermode %{ comment : map global format c       ': comment-line<ret>' -docstring 'comment' }
record-usermode %{ comment : map global format l       'x|comment l .<ret>'  -docstring 'leader    ... comment' }
record-usermode %{ comment : map global format t       'x|comment t .<ret>'  -docstring 'trailer   comment ...' }
record-usermode %{ comment : map global format R       'x|comment r =<ret>'  -docstring 'ruler     ═══' }
record-usermode %{ comment : map global format r       'x|comment r --<ret>' -docstring 'ruler     ━━━' }
record-usermode %{ comment : map global format U       'x|comment u =<ret>'  -docstring 'underline ═══ comment' }
record-usermode %{ comment : map global format u       'x|comment u --<ret>' -docstring 'underline ━━━ comment' }
record-usermode %{ comment : map global format '`'     'x|comment c<ret>'    -docstring 'css       <code></code> block' }

# ..................................................................... Aligning

record-usermode %{ aligna : map global format <space> 'x|align '            -docstring 'align     '' '' column' }
record-usermode %{ alignb : map global format <minus> 'x|align --<ret>'     -docstring 'align     --  comment' }
record-usermode %{ alignc : map global format '#'     'x|align \#<ret>'     -docstring 'align     #   comment' }
record-usermode %{ alignd : map global format /       'x|align //<ret>'     -docstring 'align     //  comment' }
record-usermode %{ aligne : map global format =       'x|align =<ret>'      -docstring 'align     =   statement' }
record-usermode %[ aligns : map global format {       'x|align \{<ret>'     -docstring 'align     {   block' ]  # ATTENTION: %[] to escape '{' :)
record-usermode %{ aligns : map global format )       'x|align \)<ret>'     -docstring 'align     )   case' }
record-usermode %{ aligns : map global format ';'     'x|align \;\;<ret>'   -docstring 'align     ;;  endcase' }
record-usermode %{ alignx : map global format '\'     'x|align \\<ret>'     -docstring 'align     \   continuation' }
record-usermode %{ alignx : map global format ','     'x|align \;\\<ret>'   -docstring 'align     ;\  continuation' }

# .................................................................... Searching

record-usermode %{ focuss : map global user /   '/(?i)'     -docstring 'isearch prev,next' }
record-usermode %{ focuss : map global user '\' '<a-/>(?i)' -docstring 'isearch prev,next' }
record-usermode %{ focusx : map global user ?   '?(?i)'     -docstring 'iextend prev,next' }
record-usermode %{ focusx : map global user !   '<a-?>(?i)' -docstring 'iextend prev,next' }

# .................................................................... Selection

record-usermode %{ alpha : map global user s 'x<a-s>s'     -docstring 'split:select,iselect' }
record-usermode %{ alpha : map global user S 'x<a-s>s(?i)' -docstring 'split:select,iselect' }

map global normal S 's(?i)'   -docstring 'case insensitive split:select:'
map global normal } ']p'      -docstring 'next paragraph'
map global normal { '[p'      -docstring 'previous paragraph'

# .............................................................. Line operations

map global normal G 'ge'      -docstring 'goto buffer end'
map global normal ^ 'gh'      -docstring 'goto line begin'
map global normal $ 'gl'      -docstring 'goto line end'
map global normal C '<a-l>di' -docstring 'replace to end of line'
map global normal D '<a-l>d'  -docstring 'delete to end of line'
map global normal Y '<a-l>'   -docstring 'yank to end of line'

# ........................................................................ Paste

map global normal <c-p> ':<space>yank-ring-previous<ret>'
map global normal <c-n> ':<space>yank-ring-next<ret>'

# Buffers
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

set-option global autoreload yes

# no sudo-write-all so sync root owned files on buffer switching
define-command sync %{
	# if %{ [ -n "$kak_opt_filetype" ] && $kak_modified } %{ sudo-write }  # BUG: $kak_opt_filetype is null for "if" command (?)
	# BUG: $kak_opt_filetype is null for %sh{} and root owned files(?)
	evaluate-commands %sh{ [ "$kak_buffname" != '*scratch*' ] && $kak_modified && echo "sudo-write" || echo "nop" }
}

# ..................................................................... Filetype

# modeline inline context: "# kak: filetype=.." (comment delimiter by filetype)
# NOTE: markdown statement '#[ kak: ... ]: #' issues *debug* "Unsupported kakoune variable:" message for trailing ']'
set-option global modelines 2  # BUG: avoid "otherwords:" error (not kak: or vim:) within modeline scan range (default 5)
hook global BufOpenFile .* %{ modeline-parse }

hook global BufOpenFile .*(.eml|.note) %{ set buffer filetype markdown }
hook global FocusOut .* sync   # over "write" for system files

# kettelkasten
hook global WinSetOption filetype=markdown %{
	define-command zk-index %sh{ zk index --no-input" }
	record-usermode %{ alpha : map global user Z ': zk-index<ret>' -docstring 'zk index' }

	define-command zk-new %sh{ zk new $(dirname "$kak_buffile") --title="$kak_selection" }
	record-usermode %{ alpha : map global user z ': zk-new<ret>'   -docstring 'zk new' }
}

# ............................................................ Buffer management

map global normal <a-ret>       ': sync<ret>: buffer-next<ret>'     -docstring 'next buffer'
map global normal <a-backspace> ': sync<ret>: buffer-previous<ret>' -docstring 'previous buffer'
map global normal <a-space>     ': sync<ret>ga'                     -docstring 'last buffer'

hook global WinDisplay filetype=diff %{
	map global normal <ret>      ': diff-jump<ret>'                  -docstring 'diff-jump new file'
	map global normal <a-ret>    ': diff-jump -<ret>'                -docstring 'diff-jump old file'
}

# Allow one trailing space only in diff output
hook global WinSetOption filetype=(diff) %{
	add-highlighter buffer/diff-allow-one-trailing-space regex '^ ' 0:Default
}
record-usermode %{ alpha : map global user d ': buffer *debug*<ret>'            -docstring '*debug*' }
record-usermode %{ alpha : map global user D ': sync<ret>: delete-buffer<ret>'  -docstring 'delete buffer' }
record-usermode %{ alpha : map global user q ': quit<ret>'                      -docstring 'quit' }
record-usermode %{ alpha : map global user w ': sync<ret>'                      -docstring 'save' }
record-usermode %{ alpha : map global user x ': sync<ret>: write-all-quit<ret>' -docstring 'save all and quit' }

# Terminal
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

record-usermode %{ alpha : map global user t   ': nop %sh{ term >/dev/null 2>&1 }<ret>' -docstring 'terminal' }
record-usermode %[ shellc : map global user '{' ': echo %sh{  }<left><left>'             -docstring 'shell' ]  # ATTENTION: %[] to escape '{}' :)

# Highlighting
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

add-highlighter global/ show-matching
add-highlighter global/ show-whitespaces -tab '┊' -tabpad ' ' -spc ' ' -lf ' '

# search matches
# add-highlighter global/ dynregex '%reg{/}' 0:+u
# add-highlighter global/ dynregex '%reg{/}' 0:SecondarySelection  # SEE: colors/duochrome add-highlighter window/

# highlight trailing whitespace
add-highlighter global/ regex \h+$ 0:Trailing

# admonitions
declare-option str admonition "\s(?i)(att(n|ention)|(be)*cause|bu[gt]|deprecated|donot|ex(ample)*|hack|hist(ory)*|note|see|tip|(to)*do|us(ag)*e|warn(ing)*):\s"
hook -once global WinSetOption filetype=.* %{ add-highlighter global/ regex %opt{admonition} 1:WrapMarker }  # select field 1: (vs 0:) to not hilight the colon :)

# Global user modes
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# set (order) user mode declarations
play-usermodes %{ user } %{ snippet }
play-usermodes %{ user } %{ focus }
play-usermodes %{ user } %{ shell }
play-usermodes %{ user } %{ alpha }
play-usermodes %{ format } %{ align }
play-usermodes %{ format } %{ comment }

# kak: filetype=kak
