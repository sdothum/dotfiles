# sdothum - 2016 (c) wtfpl

# Kakoune
# ══════════════════════════════════════════════════════════════════════════════

# config for Kakoune

# Lambda calculus flow control
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# simplifying "try %{ .. } catch %{ .. }" to "eval -verbatim %arg{1} %arg{2} %arg{3}"
# where %arg{1} is "%sh{ test .. && echo .. || echo .. }"
# further refactored to "%{ test .. }" by the define-command with %arg{1} as $1 SEE: ATTENTION

# ATTENTION: refactored syntactic sugar requires $1 $kak_opt_<names> listed in the define-command for %sh{} env variable export
# SEE: the comment (#) list of kak_opt_<names> in the define-command "%sh{ .. # .. }" block

# ................................................................. if-then-else

# if-else %{ condition } %{ then } %{ else }
define-command if-else -params 3 %{ eval -verbatim %sh{ eval $1 && echo then || echo else # kak_opt_colormode kak_opt_mode } %arg{2} %arg{3} }
define-command then -params 2 %{ eval %arg{1} }
define-command else -params 2 %{ eval %arg{2} }

# ...................................................................... if-then

# if %{ condition } %{ then }
define-command if -params 2 %{ if-else %arg{1} %arg{2} %{ nop } }

# ........................................................................ Debug

# *debug* hook trace
if %{ [ -n "$UNPLUG" ] } %{
	hook global BufSetOption filetype=.* %{ echo -debug setting %val{hook_param} }
	hook global WinSetOption filetype=.* %{ echo -debug setting %val{hook_param} }
	hook global WinCreate .*             %{ echo -debug setting %val{hook_param} }
}

# Plugins
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
if %{ [ -z "$UNPLUG" ] } %{

	# WARNING: symlink "ln -s /usr/bin/dash $HOME/bin/sh" to avoid busybox "sh" read hang from cork "env sh"
	evaluate-commands %sh{ cork init }
	evaluate-commands %sh{kak-popup init}

	# ................................................................ auto-pairs
	cork auto-pairs https://github.com/alexherbo2/auto-pairs.kak.git %{
		enable-auto-pairs
	}

	# .......................................................... change-directory
	cork cd  https://github.com/Delapouite/kakoune-cd.git %{
		hook global WinDisplay .* change-directory-current-buffer
		hook global FocusIn .* change-directory-current-buffer
	}

	# ................................................................ crosshairs
	cork crosshairs https://github.com/insipx/kak-crosshairs.git %{
		# map global user | ': cursorcolumn<ret>' -docstring "toggle column"
		# map global user + ': crosshairs<ret>'   -docstring "toggle crosshairs"  # BUG: occasional hidden underline
		map global user + ': cursorcolumn<ret>' -docstring "toggle column"
	}
 
	# ..................................................................... fandt
	cork fandt https://github.com/listentolist/kakoune-fandt.git %{
		require-module fandt
		map global normal G 'ge' -docstring 'goto buffer end'
		map global normal ^ 'gh' -docstring 'goto line begin'
		map global normal $ 'gl' -docstring 'goto line end'
	}

	# .......................................................... find and replace
	cork find https://github.com/occivink/kakoune-find.git %{
		map global user f ': find ' -docstring "find and replace"
	}

	# .......................................................... focus selections
	cork focus https://github.com/caksoylar/kakoune-focus.git %{
		map global user <space> ': focus-toggle<ret>' -docstring "toggle selections focus"
	}

	# ......................................................... forth interpreter
	cork forth https://gitlab.com/kstr0k/kak-stkmach

	# ...................................................... kakboard (clipboard)
	cork kakboard https://github.com/lePerdu/kakboard.git %{
		set global kakboard_copy_cmd 'xclip -in -selection clipboard'
		set global kakboard_paste_cmd 'xclip -out -selection clipboard'
		hook global WinCreate .* %{ kakboard-enable }

		map global user y ': kakboard-with-push-clipboard y<ret>' -docstring 'yank to clipboard'
		# map global user c ': kakboard-with-push-clipboard c<ret>'
		# map global user d ': kakboard-with-push-clipboard d<ret>'
		map global user p ': kakboard-with-pull-clipboard p<ret>' -docstring 'put from clipboard'
		map global user P ': kakboard-with-pull-clipboard P<ret>' -docstring 'put from clipboard'
		map global user R ': kakboard-with-pull-clipboard R<ret>' -docstring 'replace with clipboard'
	}

	# ................................................................... kakpipe
	cork kakpipe https://github.com/eburghar/kakpipe.git %{
		# NOTE: manually install binary from git folder with: cargo install --path . --root ~/.local
		require-module kakpipe
		map global user | ': kakpipe ' -docstring "kakpipe FIFO buffer"
	}

	# ................................................................... kak-lsp
	cork lsp https://github.com/kak-lsp/kak-lsp.git %{
		# currently running commit 36f99810bdcc060617479d6c5405e868584ef0ff BUG: lsp-inlay-diagnostics-enable command option
		# cargo install --locked --force --path .
		# diff kak-lsp.toml $HOME/.config/kak/kak-lsp/kak-lsp.toml.unmarksman
		nop eval %sh{ kak-lsp -s $kak_session --kakoune }

		set-option global lsp_cmd "kak-lsp -v -c $HOME/.config/kak-lsp/kak-lsp.toml -s %val{session} --log /tmp/kak-lsp.log"  # debug lsp with -vvv
		declare-option str linemark '►'                                    # diagnostic line marker
		set-option global lsp_diagnostic_line_error_sign "%opt{linemark}"  # lsp glyph overrides
		set-option global lsp_diagnostic_line_hint_sign "%opt{linemark}"
		set-option global lsp_diagnostic_line_info_sign "%opt{linemark}"
		set-option global lsp_diagnostic_line_warning_sign "%opt{linemark}"
		set-option global lsp_inlay_diagnostic_sign ''                    # diagnostic fence meter (visual ticks replace ■'s)

		hook global WinSetOption filetype=(sh|c|cpp|go|javascript|latex|lua|markdown|perl|python|ruby|rust|toml|typescript) %{
			lsp-enable-window
			lsp-auto-hover-enable
			lsp-inlay-diagnostics-enable global
			colorscheme %opt{theme}  # WHY: restore Diagnostic faces (overwritten by kak-lsp injection above)

			map global user l ': enter-user-mode lsp<ret>' -docstring "LSP mode"
		}
		hook global KakEnd .* lsp-exit

		define-command lsp-restart %{ lsp-stop; lsp-start } -docstring 'restart lsp server'
	}

	# ...................................................................... mark
	cork mark https://gitlab.com/fsub/kakoune-mark.git %{
		map global user m ': mark-word<ret>'  -docstring "(un)mark word / clear marks"
		map global user M ': mark-clear<ret>' -docstring "(un)mark word / clear marks"
	}

	# ................................................................ move lines
	cork move-lines https://git.sr.ht/~raiguard/kak-move-lines %{
		map global normal <c-up> ': move-lines-up %val{count}<ret>'     -docstring 'shift up'
		map global normal <c-down> ': move-lines-down %val{count}<ret>' -docstring 'shift down'
	}

	# .................................................... peneira (fuzzy finder)
	cork luar https://github.com/gustavo-hms/luar.git
	cork peneira https://github.com/gustavo-hms/peneira.git %{
		require-module peneira
		set-option global luar_interpreter luajit
		set-option global peneira_files_command "rg --files --sort=path"  # single threaded --sort is fast enough for my folder organization

		# HACK: multi-client focus switching causes peneira to lose active client buffer directory
		define-command peneira-resync %{
			# change-directory-current-buffer  # handled by hook FocusIn above, otherwise required
			buffer *debug*
			execute-keys ga
		}

		define-command buffers %{
			peneira-resync
			peneira 'buffers: ' %{ printf '%s\n' $kak_quoted_buflist } %{ buffer %arg{1} }
		}

		define-command files %{
			peneira-resync
			peneira-files -hide-opened
		}

		map global user b ': buffers<ret>' -docstring 'buffers'
		map global user e ': files<ret>'   -docstring 'edit file'
	}

	# ......................................................... phantom selection
	cork phantom-selection https://github.com/occivink/kakoune-phantom-selection.git

	# ............................................................... search docs
	cork search-doc https://github.com/jbomanson/search-doc.kak.git %{
		require-module search-doc
		alias global sd search-doc
	}

	# .................................................................. smarttab
	cork smarttab https://github.com/andreyorst/smarttab.kak.git %{
		require-module smarttab
		set-option global softtabstop 3

		hook global BufOpenFile .* smarttab
		hook global BufNewFile  .* smarttab
	}

	# .................................................................. snippets
	cork snippets https://github.com/occivink/kakoune-snippets.git %{
		set-option global snippets_auto_expand true

		define-command user-snippets %{
			set buffer snippets %opt{snippets}  # keep any global snippets
			map global user s ': snippets-info<ret>' -docstring 'Snippets'
		}

		hook -once global BufSetOption filetype=sh %{
			user-snippets
			set -add buffer snippets 'usage:' 'us:'     %{ snippets-insert %{usage() { usage: "$(basename $0) ${1:options}"; exit 1; } }}
			set -add buffer snippets 'usage:pipe' 'up:' %{ snippets-insert %{usage() { usage: "$(basename $0) ${1:options}" | usage:pipe
			exit 1
		} }}
		}

		hook -once global BufSetOption filetype=markdown %{
			user-snippets
			set -add buffer snippets 'date' 'da:'       %{ snippets-insert %sh{ date '+## %A, %d %B %Y' | tr '[:upper:]' '[:lower:]' }}
			set -add buffer snippets 'img' 'im:'        %{ snippets-insert %{![${1:img}](/images/${1:img}.jpg) }}
			set -add buffer snippets 'search' 'se:'     %{ snippets-insert %{[${1:search}](http://thedarnedestthing.com/search?query=${1:search}) }}
		}
	}

	# ................................................................ sudo-write
	cork sudo-write https://github.com/occivink/kakoune-sudo-write.git %{
		map global user Z ': sudo-write<ret>' -docstring 'sudo save'
	}

	# ............................................................... tree-sitter
	cork tree-sitter https://github.com/phaazon/kak-tree-sitter.git %{
		# cargo install kak-tree-sitter
		# cargo install ktsctl
		nop eval %sh{ kak-tree-sitter -dks --session $kak_session }
	}
}

# Plugins end ..................................................................

# GUI
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# .................................................................. Colorscheme

if-else %{ [ -n "$DISPLAY" ] } %{
	declare-option str theme     'duochrome'
	declare-option str mode      'normal'  # initial state
	declare-option str colormode ''        # force colorscheme initialization

	define-command normal-mode-colorscheme %{
		set-option window mode "normal"
		if %{ [ "$kak_opt_colormode" != "normal" ] } %{
			set-option window colormode "normal"
			colorscheme %opt{theme}
		}
	}

	define-command insert-mode-colorscheme %{
		set-option window mode "insert"
		if %{ [ "$kak_opt_colormode" != "insert" ] } %{
			set-option window colormode "insert"
			colorscheme %opt{theme}
		}
	}

	define-command capslock-colorscheme %{
		if %{ [ "$kak_opt_colormode" != "capslock" ] } %{
			set-option window colormode "capslock"
			colorscheme %opt{theme}
		}
	}

	# BUG: capslock colorscheme switching defers until the first keystroke (vs the realtime statusline reporting)
	define-command capslock-check %{
		if-else %{ capslock } %{
			capslock-colorscheme
		} %{
			if-else %{ [ "$kak_opt_mode" = "insert" ] } %{
				insert-mode-colorscheme
			} %{
				normal-mode-colorscheme
			}
		}
	}

	# window modal/capslock "duo"chrome
	hook global WinCreate .* %{
		normal-mode-colorscheme
		hook window ModeChange (push|pop):.*:insert insert-mode-colorscheme
		hook window ModeChange (push|pop):insert:.* normal-mode-colorscheme
		hook window InsertIdle .* capslock-check
		hook window NormalIdle .* capslock-check
		hook window PromptIdle .* capslock-check
	}
} %{
	declare-option str theme %sh{ echo "${COLORSCHEME:-base16-icy}" }
	colorscheme %opt{theme}
}

# map global user <space> ': normal-mode-colorscheme<ret>' -docstring "%opt{theme}"

# ....................................................................... Screen

# set-option global ui_options terminal_status_on_top=true terminal_assistant=cat
# set-option global ui_options terminal_status_on_top=true

# lines and columns displayed around the cursor
set-option global scrolloff 4,4

# ................................................................. Line numbers

# modal line numbers
declare-option str ruler '│'  # SEE: statusline

define-command margin -params ..1 %{ eval add-highlighter -override window/linenr number-lines -hlcursor -separator "'%opt{ruler}   '" %arg{@} }  # escape 'quotes' for eval

hook global WinCreate .* %{
	 margin '-relative'  # on normal mode open
	 hook window ModeChange (push|pop):.*:insert %{ margin }
	 hook window ModeChange (push|pop):insert:.* %{ margin '-relative' }
}

# .................................................................... Soft wrap

define-command softwrap -params ..1 %{ eval add-highlighter -override global/ wrap -word -indent -marker "'  ↪ '" %arg{@} }  # escape 'quotes' for eval

hook global WinSetOption filetype=markdown %{ softwrap '-width 80' }
hook global WinSetOption filetype=(sh|c|cpp|go|javascript|latex|lua|perl|python|ruby|rust|toml|typescript) softwrap
hook global BufOpenFile  .*(conf|config|log|rc|text|txt) softwrap

# ................................................................... Statusline

# a minimalist statusline of "mode - column [utf-8] - filename [context]"
declare-option str spacer ' '
# display utf-8 value for non-latin characters
set-option global modelinefmt '%sh{capslock && echo "—CAPS— "}{{mode_info}} %opt{spacer} %val{buf_line_count}%opt{ruler} %val{cursor_char_column}%sh{[ "$kak_cursor_char_value" -gt 126 ] && printf " U+%04x" "$kak_cursor_char_value"} %opt{spacer} %val{bufname}{{context_info}} [%sh{[ -z "$kak_opt_filetype" ] && echo "--" || echo "$kak_opt_filetype"}] %opt{spacer} %val{session}(%sh{echo "$kak_client" | sed -r "s/[^0-9]*(.*)/\1/"})'

# set-option global ui_options terminal_assistant=cat

# Editing
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# ................................................................... Formatting

set-option global tabstop 3
set-option global indentwidth 3

map global normal <c-l> ': comment-line<ret>' -docstring '(un)comment'  # beakl key position for "#" NOTE: <c-c> unmappable
# map global user   '#' 'x|comment \#<ret>'   -docstring '^# comment'   # BUG: patched comment.kak to explicitly handle filetype sh

declare-user-mode format
map global format c ': comment-line<ret>'     -docstring '(un)comment'
map global format l 'x|comment l .<ret>'      -docstring 'leader ... comment'
map global format t 'x|comment t .<ret>'      -docstring 'trailer comment ...'
map global format R 'x|comment r =<ret>'      -docstring 'ruler ═══'
map global format r 'x|comment r --<ret>'     -docstring 'ruler ━━━'
map global format u 'x|comment u --<ret>'     -docstring 'underline ━━━ comment'
map global format '#' 'x|align \#<ret>'       -docstring 'align #  comment'
map global format / 'x|align //<ret>'         -docstring 'align // comment'
map global format <minus> 'x|align --<ret>'   -docstring 'align -- comment'
map global format = 'x|align =<ret>'          -docstring 'align  = statement'
map global format { 'x|align \{<ret>'         -docstring 'align  { block'
map global format ) 'x|align \)<ret>'         -docstring 'align  ) case'
map global format ';' 'x|align \;\;<ret>'     -docstring 'align ;; endcase'
map global format '\' 'x|align \\<ret>'       -docstring 'align  \ continuation'
map global normal '#' ': enter-user-mode format<ret>'

# .................................................................... Selection

map global user   / '/(?i)'         -docstring 'case insensitive search'
map global user   <a-/> '<a-/>(?i)' -docstring 'case insensitive search'
map global user   ? '?(?i)'         -docstring 'case insensitive extend search'
map global user   <a-?> '<a-?>(?i)' -docstring 'case insensitive extend search'

map global normal } ']p'            -docstring 'next paragraph'
map global normal { '[p'            -docstring 'previous paragraph'

# .............................................................. Line operations

map global normal D '<a-l>d' -docstring 'delete to end of line'
map global normal Y '<a-l>'  -docstring 'yank to end of line'

# ........................................................................ Paste

map global normal <c-p> ':<space>yank-ring-previous<ret>'
map global normal <c-n> ':<space>yank-ring-next<ret>'

# Buffers
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

set-option global autoreload yes

# ..................................................................... Filetype

# modeline inline context: "# kak: filetype=.." (comment delimiter by filetype)
# NOTE: markdown statement '#[ kak: ... ]: #' issues *debug* "Unsupported kakoune variable:" message for trailing ']'
set-option global modelines 2  # BUG: avoid "otherwords:" error (not kak: or vim:) within modeline scan range (default 5)
hook global BufOpenFile .* %{ modeline-parse }

hook global BufOpenFile .*.eml %{ set buffer filetype markdown }
hook global FocusOut .* write

# ............................................................ Buffer management

map global normal <a-ret> ': buffer-next<ret>'           -docstring 'next buffer'
map global normal <a-backspace> ': buffer-previous<ret>' -docstring 'previous buffer'
map global normal <a-space> 'ga'                         -docstring 'last buffer'

map global user   d ': buffer *debug*<ret>'              -docstring '*debug*'
map global user   D ': delete-buffer<ret>'               -docstring 'delete buffer'
map global user   q ': quit<ret>'                        -docstring 'quit'
map global user   w ': write<ret>'                       -docstring 'save'
map global user   x ': write-all-quit<ret>'              -docstring 'save all and quit'

# Highlighting
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

add-highlighter global/ show-matching
add-highlighter global/ dynregex '%reg{/}' 0:+u
add-highlighter global/ show-whitespaces -tab '┊' -tabpad ' ' -spc ' ' -lf ' '

# highlight trailing whitespace
add-highlighter global/ regex \h+$ 0:Error

# admonitions
declare-option str admonition "\s(?i)(attn|attention|bug|example|hack|note|see|tip|todo|usage|warning|why):\s"
hook -once global WinSetOption filetype=.* %{ add-highlighter global/ regex %opt{admonition} 1:WrapMarker }  # select field 1: (vs 0:) to not hilight the colon :)

