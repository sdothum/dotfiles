# sdothum - 2016 (c) wtfpl

# Kakoune
# ══════════════════════════════════════════════════════════════════════════════

# Config for Kakoune

# runtime env control variables SEE: bin/functions/edit/kak shell script wrapper
# $UNPLUG   -> nop all bundles
# $DISPLAY  -> load $DISPLAY (server) dependent bundles
# $DIFF     -> kak diff mode
# $TEST     -> eval $TEST.kak (nop all bundles)
# $TRACE    -> trace message file

# Lambda calculus block statements
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# simplifying "try %{ .. } catch %{ .. }" to "eval -verbatim %arg{1} %arg{2} %arg{3}"
# where %arg{1} is "%sh{ test .. && echo .. || echo .. }"
# further refactored to "%{ test .. }" by the define-command with %arg{1} as $1

# ................................................................. if-then-else

# if-else %{ condition } %{ then } %{ else }
define-command if-else -params 3 %{ evaluate-commands -verbatim %sh{ eval $1 && echo then || echo else } %arg{2} %arg{3} }
define-command then    -params 2 %{ evaluate-commands %arg{1} }
define-command else    -params 2 %{ evaluate-commands %arg{2} }

# ...................................................................... if-then

# if %{ condition } %{ then }
define-command if -params 2 %{ if-else %arg{1} %arg{2} %{ nop } }

# Debug
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# trace %{ message }
if-else %{ [ -n "$TRACE" ] } %{
	nop %sh{ rm -f $TRACE }  # clear last trace
	define-command trace -params 1 %{ nop %sh{ echo "> $1" >>$TRACE }}
} %{
	define-command trace -params 1 %{ nop }
}

# *debug* hook trace
if %{ [ -n "$UNPLUG" ] || [ -n "$TEST"] } %{
	hook global BufSetOption filetype=.* %{ echo -debug setting %val{hook_param} }
	hook global WinSetOption filetype=.* %{ echo -debug setting %val{hook_param} }
	hook global WinCreate    .*          %{ echo -debug setting %val{hook_param} }
}

# User-mode order manager
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# organize user mode popup lists by sort key

declare-option str usermodes ''

# .................................................................... Queue map

# addm %{ <group> [<sortkey>] : map global <user-mode> <key> <command> -docstring <string> }
define-command addm -params 1 %{
	set-option global usermodes "%sh{ echo ""$kak_opt_usermodes\n$(echo $1 | cut -d: -f2- | cut -d' ' -f4 )$1"" }"
}

# ................................................... Insert user-mode separator
 
# gapm %{ <user-mode> [<separator>] }  # WHERE: up to 3 separators [+-=] within a single user-mode, default '+'
define-command gapm -params 1 %{
	evaluate-commands %sh{
		# docstring() { for i in $(seq 1 32) ;do echo -n '—' ;done; echo -n $K; }
		docstring() { for i in $(seq 1 32) ;do echo -n "${F:-⠀}" ;done; echo -n $K; }  # U+2800 (braille blank) to prevent kak space char trimming

		set -- $1  # <user-mode> [<separator>]
		# NOTE: multiple separators within a single user-mode list must map unique keys and docstrings (to display as separate lines)
		case "$2" in
			'' ) K=· ;;         # U+00b7 default
			1  ) K=· ;;         # U+00b7 of 3 available utf-8 center dot characters
			2  ) K=‧ ;;         # U+2027
			3  ) K=ꞏ ;;         # U+a78f
			*  ) K=$2; F=$2 ;;  # non-blank (visual) separator NOTE: limited to glyphs not represented by kak "<named>" character
		esac
		echo "map global $1 '$K' ': nop<ret>' -docstring '$(docstring)'"
	}
}

# ................................................................. Activate map

# setm %{ <user-mode> [: <group>] }
define-command setm -params 1 %{
	evaluate-commands %sh{
		M=$(echo ${1%%:*})
		G=$(echo ${1#*:})
		[ "$M" = "$G" ] && unset G
		echo "$kak_opt_usermodes" | grep "^$M $G" | sort | cut -d: -f2-
	}
}

# Plugins
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# ncurses console plugins
if %{ [ -z "$UNPLUG" ] && [ -z "$TEST" ] } %{
	source "%val{config}/bundle/kak-bundle/rc/kak-bundle.kak"
   bundle-noload kak-bundle https://codeberg.org/jdugan6240/kak-bundle

	source "%val{config}/console-plugins.kak"
	source "%val{config}/snippets.kak"
}

# terminal $DISPLAY plugins
if %{ [ -z "$UNPLUG" ] && [ -z "$TEST" ] && [ -n "$DISPLAY" ] } %{
	source "%val{config}/xdisplay-plugins.kak"
}

# isolated plugin test
if %{ [ -n "$TEST" ] } %{
	evaluate-commands %sh{ cat "${kak_config}/$TEST.kak" }
}

# Config
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# redefine default <space> "user" mode
declare-user-mode select
map global normal <space> ': enter-user-mode select<ret>'

source "%val{config}/ui.kak"
source "%val{config}/ux.kak"

# inline admonitions
declare-option str admonition "\s(((?i)(att(n|ention)|(be)*cause|bu[gt]|deprecated|donot|ex(ample)*|for|hack|hist(ory)*|important|note|see|tip|(to)*do|unknown|us(ag)*e|warn(ing)*|where):)|\([?][?]+\))\s"
hook -once global WinSetOption filetype=.* %{ add-highlighter global/ regex %opt{admonition} 1:WrapMarker }  # select field 1: (vs 0:) to not hilight the colon :)

# build visually organized user-mode lists
setm %{ select   : focus   }
gapm %{ select 1           }
setm %{ select   : search  }
gapm %{ select 2           }
setm %{ select   : paste   }
gapm %{ select 3           }
setm %{ select   : mode    }

setm %{ buffer   : meta    }
gapm %{ buffer 1         }
setm %{ buffer   : goto    }
gapm %{ buffer 2         }
setm %{ buffer   : test    }
gapm %{ buffer 3         }
setm %{ buffer   : file    }

setm %{ format   : block   }
gapm %{ format 1         }
setm %{ format   : align   }
gapm %{ format 2         }
setm %{ format   : comment }
gapm %{ format 3         }
setm %{ format   : heading }

# info-notifier %{user-modes} %{<space>   edit\n<ret>     buffer\n#         format}
nop %sh{ notify 10 user-modes "&lt;<b>space</b>&gt;\tedit\n&lt;<b>ret</b>&gt;\tbuffer\n<b>#</b>\tformat" }
nop %sh{ xdotool key g c }  # center cursor, also HACK: refreshes occaisonally stale cursorline at startup

# kak: filetype=kak
