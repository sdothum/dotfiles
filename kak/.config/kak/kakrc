# sdothum - 2016 (c) wtfpl

# Kakoune
# ══════════════════════════════════════════════════════════════════════════════

# Config for Kakoune

# runtime env control variables SEE: bin/functions/edit/kak shell script wrapper
# $UNPLUG   -> nop all bundles
# $DISPLAY  -> load $DISPLAY (server) dependent bundles
# $DIFF     -> kak diff mode
# $TEST     -> eval $TEST.kak (nop all bundles)
# $TRACE    -> trace message file

# Lambda calculus block statements
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# simplifying "try %{ .. } catch %{ .. }" to "eval -verbatim %arg{1} %arg{2} %arg{3}"
# where %arg{1} is "%sh{ test .. && echo .. || echo .. }"
# further refactored to "%{ test .. }" by the define-command with %arg{1} as $1 SEE: ATTENTION

# ATTENTION: the eval $1 "$kak_opt_<names>" must be explicitly provided for %sh{} env variable export
# SEE: the comment (#) list of "$kak_opt_<names>" in the define-command "%sh{ .. # .. }" block
#      variables passed to if(-else) within this kakrc:
#         - %opt{color}     # SEE: ui.kak
#         - %opt{mode}      # SEE: ui.kak
#         - %opt{focus}     # SEE: console-plugins.kak
#         - %opt{livedown}  # SEE: xdisplay-plugins.kak

# ................................................................. if-then-else

# if-else %{ condition } %{ then } %{ else }
define-command if-else -params 3 %{ evaluate-commands -verbatim %sh{ eval $1 && echo then || echo else # kak_opt_color kak_opt_mode kak_opt_focus kak_opt_livedown } %arg{2} %arg{3} }  # SEE: ATTENTION
define-command then    -params 2 %{ evaluate-commands %arg{1} }
define-command else    -params 2 %{ evaluate-commands %arg{2} }

# ...................................................................... if-then

# if %{ condition } %{ then }
define-command if -params 2 %{ if-else %arg{1} %arg{2} %{ nop } }

# Debug
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# trace %{ message }
if-else %{ [ -n "$TRACE" ] } %{
	nop %sh{ rm -f $TRACE }  # clear last trace
	define-command trace -params 1 %{ nop %sh{ echo "${1# }" >>$TRACE } }
} %{
	define-command trace -params 1 %{ nop }
}

# *debug* hook trace
if %{ [ -n "$UNPLUG" ] || [ -n "$TEST"] } %{
	hook global BufSetOption filetype=.* %{ echo -debug setting %val{hook_param} }
	hook global WinSetOption filetype=.* %{ echo -debug setting %val{hook_param} }
	hook global WinCreate    .*          %{ echo -debug setting %val{hook_param} }
}

# User-mode
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

declare-option str usermodes ''

# catch %{ group sortkey* : map global user-mode .. }
define-command catch -params 1 %{
	trace %arg{1}
 	set-option global usermodes "%sh{ echo ""$kak_opt_usermodes\n$(echo $1 | cut -d: -f2- | cut -d' ' -f4 )$1"" }"
}

# release %{ user-mode } [ %{ group } ]
define-command release -params ..2 %{
	trace %sh{ echo "$kak_opt_usermodes" | grep "^$(echo $1) $(echo $2) | sort" }
	evaluate-commands %sh{ echo "$kak_opt_usermodes" | grep "^$(echo $1) $(echo $2)" | sort | cut -d: -f2- }
}

# Plugins
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# ncurses console plugins
if %{ [ -z "$UNPLUG" ] && [ -z "$TEST" ] } %{
	source "%val{config}/bundle/kak-bundle/rc/kak-bundle.kak"
	bundle-noload kak-bundle https://github.com/jdugan6240/kak-bundle

	source "%val{config}/console-plugins.kak"
	source "%val{config}/snippets.kak"
}

# terminal $DISPLAY plugins
if %{ [ -z "$UNPLUG" ] && [ -z "$TEST" ] && [ -n "$DISPLAY" ] } %{
	source "%val{config}/xdisplay-plugins.kak"
}

# isolated plugin test
if %{ [ -n "$TEST" ] } %{
	evaluate-commands %sh{ cat "${kak_config}/$TEST.kak" }
}

# Config
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

source "%val{config}/ui.kak"
source "%val{config}/ux.kak"

# inline admonitions
declare-option str admonition "\s(?i)(att(n|ention)|(be)*cause|bu[gt]|deprecated|donot|ex(ample)*|hack|hist(ory)*|note|see|tip|(to)*do|us(ag)*e|warn(ing)*):\s"
hook -once global WinSetOption filetype=.* %{ add-highlighter global/ regex %opt{admonition} 1:WrapMarker }  # select field 1: (vs 0:) to not hilight the colon :)

# arrange user-mode lists
release %{ user   } %{ focus   }
release %{ user   } %{ snippet }
release %{ user   } %{ shell   }
release %{ user   } %{ alpha   }
release %{ buffer }
release %{ format } %{ snippet }
release %{ format } %{ align   }
release %{ format } %{ comment }

nop %sh{ notify 10 user-modes "space   user\nreturn  buffer\n#      format" }

# kak: filetype=kak
