# sdothum - 2016 (c) wtfpl

# Kakoune
# ══════════════════════════════════════════════════════════════════════════════

# config for Kakoune

# ........................................................................ Theme

# see UX (crosshairs)
declare-option str faint_lime             'rgb:d0e9de'  # pale green contrast
declare-option str faint_orange           'rgb:efe7dd'  # pale orange contrast

declare-option str theme 'duochrome'

# see colors/duochrome for highlight str's
declare-option str desaturated_green      'rgb:78ab78'
declare-option str pale_green             'rgb:e1f1ea'
declare-option str desaturated_orange     'rgb:d5b875'
declare-option str pale_orange            'rgb:f7f3ee'

define-command normal-mode-colorscheme %{
	declare-option str background          "%opt{pale_green}"
	declare-option str comment             "%opt{desaturated_green}"
	declare-option str menu                "%opt{pale_orange}"
	colorscheme %opt{theme}
}

define-command insert-mode-colorscheme %{
	declare-option str background          "%opt{pale_orange}"
	declare-option str comment             "%opt{desaturated_orange}"
   declare-option str menu                "%opt{pale_green}"
	colorscheme %opt{theme}
}

# modal "duo"chrome
hook global ModeChange (push|pop):.*:insert insert-mode-colorscheme
hook global ModeChange (push|pop):insert:.* normal-mode-colorscheme

map global user <space> ': normal-mode-colorscheme<ret>' -docstring "%opt{theme}"

# on entry
normal-mode-colorscheme

# ....................................................................... Layout

# set-option global ui_options terminal_status_on_top=true terminal_assistant=cat
# set-option global ui_options terminal_status_on_top=true

# lines and columns displayed around the cursor
set-option global scrolloff 4,4

# modal line numbers
declare-option str ruler '│ '
hook global WinCreate .* %{ add-highlighter window/linenr number-lines -hlcursor -separator %opt{ruler} -relative }
hook global ModeChange (push|pop):.*:insert %{ add-highlighter -override window/linenr number-lines -hlcursor -separator %opt{ruler} }
hook global ModeChange (push|pop):insert:.* %{ add-highlighter -override window/linenr number-lines -hlcursor -separator %opt{ruler} -relative }

# ................................................................... Statusline

# a minimalist statusline :)
declare-option str separator '✦'
# display utf-8 value for characters > tilde
set-option global modelinefmt '{{mode_info}} %opt{separator} %val{cursor_char_column}%sh{[ "$kak_cursor_char_value" -gt 126 ] && printf " U+%04x" "$kak_cursor_char_value"} %opt{separator} %val{bufname} {{context_info}}'

# ........................................................................... UX

# set-option global ui_options terminal_assistant=cat

# plug 'jbomanson/search-doc'
require-module search-doc
alias global sd search-doc

# plug 'Delapouite/kakoune-cd'
hook global WinDisplay .* change-directory-current-buffer

# plug 'insipx/kak-crosshairs'
set-face global crosshairs_line           "default,default+u"
set-face global crosshairs_column         "default,%opt{faint_lime}"
hook global ModeChange (push|pop):.*:insert %{ set-face global crosshairs_column "default,%opt{faint_orange}" }
hook global ModeChange (push|pop):insert:.* %{ set-face global crosshairs_column "default,%opt{faint_lime}" }

map global user | ': cursorcolumn<ret>' -docstring "toggle column"
map global user + ': crosshairs<ret>'   -docstring "toggle crosshairs"  # BUG: occasional hidden underline

# ................................................................. Highlighting

define-command softwrap %{ add-highlighter -override global/ wrap -word -indent -marker "  ↪ " }

# softwrap long lines
hook global WinSetOption filetype=markdown %{ add-highlighter -override global/ wrap -word -indent -marker "  ↪ " -width 80 }
hook global WinSetOption filetype=(bash|c|cpp|go|javascript|latex|perl|python|ruby|rust|toml|typescript) softwrap
hook global BufOpenFile  .*(conf|config|log|rc|text|txt) softwrap

add-highlighter global/ show-matching
add-highlighter global/ dynregex '%reg{/}' 0:+u

# highlight trailing whitespace
add-highlighter global/ regex \h+$ 0:Error

# inline admonitions
declare-option str admonition "\s(?i)(attention|bug|example|fixme|note|tip|todo|usage|warning):\s"
hook -once global WinSetOption filetype=.* %{ add-highlighter global/ regex %opt{admonition} 1:WrapMarker }  # select field 1: (vs 0:) to not hilight the colon :)

# ................................................................... Formatting

# plug 'andreyorst/smarttab.kak'
require-module smarttab
hook global BufOpenFile .* smarttab
hook global BufNewFile  .* smarttab

set-option global softtabstop 3
set-option global tabstop 3
set-option global indentwidth 3

# plug 'alexherbo2/auto-pairs'
enable-auto-pairs

map global normal <c-l> ': comment-line<ret>' -docstring '(un)comment'  # beakl key position for "#" NOTE: <c-c> unmappable

declare-user-mode format
map global format l 'x|kc l .<ret>'           -docstring 'leader ... comment'
map global format r 'x|kc r =<ret>'           -docstring 'ruler ═══'
map global format u 'x|kc u --<ret>'          -docstring 'underline ━━━'
map global format '#' 'x|ka \#<ret>'          -docstring 'align #  comment'
map global format / 'x|ka //<ret>'            -docstring 'align // comment'
map global format <minus> 'x|ka --<ret>'      -docstring 'align -- comment'
map global format = 'x|ka =<ret>'             -docstring 'align  = statement'
map global format { 'x|ka \{<ret>'            -docstring 'align  { block'
map global format ) 'x|ka \)<ret>'            -docstring 'align  ) case'
map global format ';' 'x|ka \;<ret>'          -docstring 'align ;; endcase'
map global normal '#' ': enter-user-mode format<ret>'

# ....................................................................... Motion

# plug 'listentolist/kakoune-fandt'
require-module fandt

map global normal G 'ge' -docstring 'goto buffer end'

# .................................................................... Selection

# plug 'fsub/kakoune-mark'
map global user   m ': mark-word<ret>'  -docstring "(un)mark word / clear marks"
map global user   M ': mark-clear<ret>' -docstring "(un)mark word / clear marks"

map global user   / '/(?i)'             -docstring 'case insensitive search'
map global user   <a-/> '<a-/>(?i)'     -docstring 'case insensitive search'
map global user   ? '?(?i)'             -docstring 'case insensitive extend search'
map global user   <a-?> '<a-?>(?i)'     -docstring 'case insensitive extend search'

map global normal } ']p'                -docstring 'next paragraph'
map global normal { '[p'                -docstring 'previous paragraph'

# ...................................................................... Editing

# plug 'occivink/kakoune-find'
map global user   f ': find '                   -docstring "find and replace"

map global normal D '<a-l>d'                    -docstring 'delete to end of line'
map global normal Y '<a-l>'                     -docstring 'yank to end of line'
# move lines up/down -- works with single selection.
map global normal <a-up> 'x"aZy<a-;>kPZ"azdz'   -docstring 'shift up'
map global normal <a-down> 'xdp'                -docstring 'shift down'

# ..................................................................... Snippets

# plug 'occivink/kakoune-snippets'
set-option global snippets_auto_expand true

define-command user-snippets %{
	set buffer snippets %opt{snippets}  # keep any global snippets
	map global user s ': snippets-info<ret>' -docstring 'Snippets'
}

hook -once global BufSetOption filetype=sh %{
	user-snippets
	set -add buffer snippets 'usage:' 'us:'     %{ snippets-insert %{usage() { usage: "$(basename $0) ${1:options} ${2:what}"; exit 1; } }}
	set -add buffer snippets 'usage:pipe' 'up:' %{ snippets-insert %{usage() { usage: "$(basename $0) ${1:options}" | usage:pipe
	exit 1
} }}
}

hook -once global BufSetOption filetype=markdown %{
	user-snippets
	set -add buffer snippets 'date' 'da:'       %{ snippets-insert %sh{ date '+## %A, %d %B %Y' | tr '[:upper:]' '[:lower:]' }}
	set -add buffer snippets 'img' 'im:'        %{ snippets-insert %{![${1:img}](/images/${1:img}.jpg) }}
	set -add buffer snippets 'search' 'se:'     %{ snippets-insert %{[${1:search}](http://thedarnedestthing.com/search?query=${1:search}) }}
}

# .................................................................... Clipboard

# plug 'lePerdu/kakboard' (optimized)
set global kakboard_copy_cmd 'xclip -in -selection clipboard'
set global kakboard_paste_cmd 'xclip -out -selection clipboard'
hook global WinCreate .* %{ kakboard-enable }

map global user y ': kakboard-with-push-clipboard y<ret>' -docstring 'yank to clipboard'
# map global user c ': kakboard-with-push-clipboard c<ret>'
# map global user d ': kakboard-with-push-clipboard d<ret>'
map global user p ': kakboard-with-pull-clipboard p<ret>' -docstring 'put from clipboard'
map global user P ': kakboard-with-pull-clipboard P<ret>' -docstring 'put from clipboard'
map global user R ': kakboard-with-pull-clipboard R<ret>' -docstring 'replace with clipboard'

# ............................................................ Buffer management

set-option global autoreload yes

# modeline inline context: "# kak: filetype=.." (comment delimiter by filetype)
# NOTE: markdown #[ kak: ... ] issues *debug* "Unsupported kakoune variable:" message for trailing ']'
hook global BufOpenFile .* %{ modeline-parse }
hook global BufOpenFile .*.eml %{ set buffer filetype markdown }
hook global FocusOut .* write

map global normal <a-ret> ': buffer-next<ret>'            -docstring 'next buffer'
map global normal <a-backspace> ': buffer-previous<ret>'  -docstring 'previous buffer'
map global normal <a-space> 'ga'                          -docstring 'last buffer'

# plug 'occivink/kakoune-buffer-switcher'
map global user   b ': buffer-switcher<ret>'              -docstring 'buffer switcher'

map global user   d ': buffer *debug*<ret>'               -docstring '*debug*'
map global user   D ': delete-buffer<ret>'                -docstring 'delete buffer'
map global user   q ': quit<ret>'                         -docstring 'quit'
map global user   x ': write-all-quit<ret>'               -docstring 'save all and quit'
# plug 'occivink/kakoune-sudo-write'
map global user   Z ': sudo-write<ret>'                   -docstring 'sudo save'

# .................................................................. Tree-sitter

# plug 'phaazon/kak-tree-sitter'
eval %sh{ kak-tree-sitter -dks --session $kak_session }

# ...................................................................... kak-lsp

# plug 'kak-lsp/kak-lsp'
eval %sh{ kak-lsp --kakoune -s $kak_session }  # Not needed if you load it with plug.kak.

set-option global lsp_cmd "kak-lsp -v -c $HOME/.config/kak-lsp/kak-lsp.toml -s %val{session} --log /tmp/kak-lsp.log"
define-command lsp-restart -docstring 'restart lsp server' %{ lsp-stop; lsp-start }
hook global KakEnd .* lsp-exit

set-option global lsp_completion_trigger "execute-keys 'h<a-h><a-k>\S[^\s,=;*(){}\[\]]\z<ret>'"
set-option global lsp_diagnostic_line_error_sign "•"
set-option global lsp_diagnostic_line_hint_sign "•"
set-option global lsp_diagnostic_line_info_sign "•"
set-option global lsp_diagnostic_line_warning_sign "•"
hook global WinSetOption filetype=(bash|c|cpp|go|javascript|latex|markdown|perl|python|ruby|rust|toml|typescript) %{

	lsp-enable-window

	lsp-auto-signature-help-enable
	lsp-auto-hover-enable
	lsp-auto-hover-insert-mode-disable
	set-option global lsp_auto_highlight_references true
	set-option global lsp_hover_anchor true

	hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
	hook window -group semantic-tokens NormalIdle .* lsp-semantic-tokens
	hook window -group semantic-tokens InsertIdle .* lsp-semantic-tokens
	hook -once -always window WinSetOption filetype=.* %{ remove-hooks window semantic-tokens }

	lsp-inlay-diagnostics-enable global
	# see above hard fix.. use null string to suppress diagnostic level
	# lsp-diagnostic-lines-disable global

	hook window BufWritePost .* lsp-diagnostics
	hook global WinSetOption filetype=rust %{ set-option window lsp_server_configuration rust.clippy_preference="on" }
}

map global user l ': enter-user-mode lsp<ret>' -docstring "LSP mode"

map global insert <tab> '<a-;>:try lsp-snippets-select-next-placeholders catch %{ execute-keys -with-hooks <lt>tab> }<ret>' -docstring 'Select next snippet placeholder'
map global object a '<a-semicolon>lsp-object<ret>'                               -docstring 'LSP any symbol'
map global object <a-a> '<a-semicolon>lsp-object<ret>'                           -docstring 'LSP any symbol'
map global object e '<a-semicolon>lsp-object Function Method<ret>'               -docstring 'LSP function or method'
map global object k '<a-semicolon>lsp-object Class Interface Struct<ret>'        -docstring 'LSP class interface or struct'
map global object d '<a-semicolon>lsp-diagnostic-object --include-warnings<ret>' -docstring 'LSP errors and warnings'
map global object D '<a-semicolon>lsp-diagnostic-object<ret>'                    -docstring 'LSP errors'

