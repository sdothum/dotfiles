
# ........................................................................ Theme

declare-option str theme 'duochrome'

# see colors/chroma for highlight str's
declare-option str pale_blue              'rgb:e1e8f1'
declare-option str pale_green             'rgb:e1f1ea'
declare-option str white                  'rgb:f7f3ee'

define-command normal-background %{
	declare-option str background          "%opt{pale_blue}"
   declare-option str menu                "%opt{white}"
	colorscheme %opt{theme}
	# x11-send-text "%sh{ termbg fbfcfd }"
}

define-command insert-background %{
	declare-option str background          "%opt{white}"
   declare-option str menu                "%opt{pale_blue}"
	colorscheme %opt{theme}
	# x11-send-text "%sh{ termbg f7f3ee }"
}

hook global ModeChange (push|pop):.*:insert insert-background
hook global ModeChange (push|pop):insert:.* normal-background

map global user <space> ': normal-background<ret>' -docstring "%opt{theme}"

# on entry
normal-background

# ....................................................................... Layout
 
# lines and columns displayed around the cursor
set-option global scrolloff 4,4

# ........................................................................... UI

# plug 'jbomanson/search-doc'
require-module search-doc
alias global sd search-doc

# ................................................................. Highlighting

add-highlighter global/ show-matching
add-highlighter global/ dynregex '%reg{/}' 0:+u

# softwrap long lines
add-highlighter global/ wrap -word -indent -marker "  ↪ "
# display line numbers.. optimized
add-highlighter global/ number-lines -hlcursor -relative
# highlight trailing whitespace
add-highlighter global/ regex \h+$ 0:Error

# ................................................................... Formatting

# plug 'andreyorst/smarttab.kak'
require-module smarttab
hook global BufOpenFile .* smarttab
hook global BufNewFile  .* smarttab

set-option global softtabstop 3
set-option global tabstop 3
set-option global indentwidth 3

# plug 'alexherbo2/auto-pairs'
enable-auto-pairs

map global user c ': comment-line<ret>' -docstring '(un)comment'

# .................................................................... Selection

# plug 'fsub/kakoune-mark'
map global user   m ': mark-word<ret>'  -docstring "(un)mark word / clear marks"
map global user   M ': mark-clear<ret>' -docstring "(un)mark word / clear marks"

map global user   '/' /(?i)             -docstring 'case insensitive search'
map global user   '<a-/>' <a-/>(?i)     -docstring 'case insensitive search'
map global user   '?' ?(?i)             -docstring 'case insensitive extend search'
map global user   '<a-?>' <a-?>(?i)     -docstring 'case insensitive extend search'

map global normal '}' ']p'              -docstring 'next paragraph'
map global normal '{' '[p'              -docstring 'previous paragraph'

# ...................................................................... Editing

# plug 'occivink/kakoune-find'
map global user   f ': find '                   -docstring "find and replace"

map global normal D <a-l>d                      -docstring 'delete to end of line'
map global normal Y <a-l>                       -docstring 'yank to end of line'
# move lines up/down -- works with single selection.
map global normal '<a-up>' 'x"aZy<a-;>kPZ"azdz' -docstring 'shift up'
map global normal '<a-down>' 'xdp'              -docstring 'shift down'

# ..................................................................... Snippets

# plug occivink/kakoune-snippets
set-option global snippets_auto_expand true

define-command user-snippets %{
	set buffer snippets %opt{snippets}  # keep any global snippets
	map global user s ': snippets-info<ret>' -docstring 'Snippets'
}

# # sh snippets
# set -add global snippets 'usage:' 'us:' %{ snippets-insert %{usage() { usage: "$(basename $0) ${1:options} ${2:what}"; exit 1; } }}
# set -add global snippets 'usage:pipe' 'up:' %{ snippets-insert %{usage() { usage: "$(basename $0) ${1:options}" | usage:pipe
# 	exit 1
# } }}

# # markdown snippets
# set -add global snippets 'date' 'da:' %{ snippets-insert %sh{ date '+## %A, %d %B %Y' | tr '[:upper:]' '[:lower:]' }}
# set -add global snippets 'img' 'im:' %{ snippets-insert %{![${1:img}](/images/${1:img}.jpg) }}
# set -add global snippets 'search' 'se:' %{ snippets-insert %{[${1:search}](http://thedarnedestthing.com/search?query=${1:search}) }}

# hook adds snippets twice(?) to snippets-info.. see patched snippets.kak.hook
hook global BufSetOption filetype=sh %{
	user-snippets
	set -add buffer snippets 'usage:' 'us:'     %{ snippets-insert %{usage() { usage: "$(basename $0) ${1:options} ${2:what}"; exit 1; } }}
	set -add buffer snippets 'usage:pipe' 'up:' %{ snippets-insert %{usage() { usage: "$(basename $0) ${1:options}" | usage:pipe
	exit 1
} }}
}

hook global BufSetOption filetype=markdown %{
	user-snippets
	set -add buffer snippets 'date' 'da:'       %{ snippets-insert %sh{ date '+## %A, %d %B %Y' | tr '[:upper:]' '[:lower:]' }}
	set -add buffer snippets 'img' 'im:'        %{ snippets-insert %{![${1:img}](/images/${1:img}.jpg) }}
	set -add buffer snippets 'search' 'se:'     %{ snippets-insert %{[${1:search}](http://thedarnedestthing.com/search?query=${1:search}) }}
}

# .................................................................... Clipboard

# plug "lePerdu/kakboard" (optimized)
set global kakboard_copy_cmd 'xclip -in -selection clipboard'
set global kakboard_paste_cmd 'xclip -out -selection clipboard'
hook global WinCreate .* %{ kakboard-enable }

map global user y ': kakboard-with-push-clipboard y<ret>' -docstring 'yank to clipboard'
# map global user c ': kakboard-with-push-clipboard c<ret>'
# map global user d ': kakboard-with-push-clipboard d<ret>'
map global user p ': kakboard-with-pull-clipboard p<ret>' -docstring 'put from clipboard'
map global user P ': kakboard-with-pull-clipboard P<ret>' -docstring 'put from clipboard'
map global user R ': kakboard-with-pull-clipboard R<ret>' -docstring 'replace with clipboard'

# ............................................................ Buffer management

set-option global autoreload yes
# set filetype by content # kak: filetype=.. # (comment delimiter by filetype)
hook global BufOpenFile .* %{ modeline-parse }
hook global BufOpenFile .*.eml %{ set buffer filetype markdown }
hook global FocusOut .* write

# plug 'Delapouite/kakoune-cd'
hook global WinDisplay .* change-directory-current-buffer

map global normal <a-ret> ': buffer-next<ret>'            -docstring 'next buffer'
map global normal <a-backspace> ': buffer-previous<ret>'  -docstring 'previous buffer'

# plug occivink/kakoune-buffer-switcher
map global user   b ': buffer-switcher<ret>'              -docstring 'buffer switcher'

map global user   d ': buffer *debug*<ret>'               -docstring '*debug*'
map global user   D ': delete-buffer<ret>'                -docstring 'delete buffer'
map global user   q ': quit<ret>'                         -docstring 'quit'
map global user   x ': write-all-quit<ret>'               -docstring 'save all and quit'
# plug 'occivink/kakoune-sudo-write'
map global user   Z ': sudo-write<ret>'                   -docstring 'sudo save'
map global user   K ": source %val{config}/kakrc<ret>"    -docstring 'reload kakrc'

# .................................................................. Tree-sitter

# plug 'phaazon/kak-tree-sitter'
eval %sh{ kak-tree-sitter -dks --session $kak_session }

# ...................................................................... kak-lsp

# plug 'kak-lsp/kak-lsp'
eval %sh{ kak-lsp --kakoune -s $kak_session }  # Not needed if you load it with plug.kak.

set-option global lsp_cmd "kak-lsp -v -c $HOME/.config/kak-lsp/kak-lsp.toml -s %val{session} --log /tmp/kak-lsp.log"
define-command lsp-restart -docstring 'restart lsp server' %{ lsp-stop; lsp-start }
hook global KakEnd .* lsp-exit

set-option global lsp_completion_trigger "execute-keys 'h<a-h><a-k>\S[^\s,=;*(){}\[\]]\z<ret>'"
set-option global lsp_diagnostic_line_error_sign "•"
set-option global lsp_diagnostic_line_hint_sign "•"
set-option global lsp_diagnostic_line_info_sign "•"
set-option global lsp_diagnostic_line_warning_sign "•"
hook global WinSetOption filetype=(bash|c|cpp|go|javascript|latex|markdown|perl|python|ruby|rust|toml|typescript) %{

	lsp-enable-window

	lsp-auto-signature-help-enable
	lsp-auto-hover-enable
	lsp-auto-hover-insert-mode-disable
	set-option global lsp_auto_highlight_references true
	set-option global lsp_hover_anchor true

	hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
	hook window -group semantic-tokens NormalIdle .* lsp-semantic-tokens
	hook window -group semantic-tokens InsertIdle .* lsp-semantic-tokens
	hook -once -always window WinSetOption filetype=.* %{ remove-hooks window semantic-tokens }

	lsp-inlay-diagnostics-enable global
	# see above hard fix.. use null string to suppress diagnostic level
	# lsp-diagnostic-lines-disable global

	hook window BufWritePost .* lsp-diagnostics
	hook global WinSetOption filetype=rust %{ set-option window lsp_server_configuration rust.clippy_preference="on" }
}

map global user l ': enter-user-mode lsp<ret>' -docstring "LSP mode"

map global insert <tab> '<a-;>:try lsp-snippets-select-next-placeholders catch %{ execute-keys -with-hooks <lt>tab> }<ret>' -docstring 'Select next snippet placeholder'
map global object a '<a-semicolon>lsp-object<ret>'                               -docstring 'LSP any symbol'
map global object <a-a> '<a-semicolon>lsp-object<ret>'                           -docstring 'LSP any symbol'
map global object e '<a-semicolon>lsp-object Function Method<ret>'               -docstring 'LSP function or method'
map global object k '<a-semicolon>lsp-object Class Interface Struct<ret>'        -docstring 'LSP class interface or struct'
map global object d '<a-semicolon>lsp-diagnostic-object --include-warnings<ret>' -docstring 'LSP errors and warnings'
map global object D '<a-semicolon>lsp-diagnostic-object<ret>'                    -docstring 'LSP errors'

