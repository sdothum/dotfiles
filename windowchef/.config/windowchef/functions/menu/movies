# sdothum - 2016 (c) wtfpl
[ $TRACE ] && CHILD="menu/movies $@" . $PARENT

# Windowchef
# ══════════════════════════════════════════════════════════════════════════════

# ....................................................................... Movies

# Usage: menu movies [cache] [animation]

# Library structure:
# ../videos
#        ../movies
#               ../title.YEAR.*  (movie)

LAST='last watched'
NAME='sort by name'
DATE='sort by date'
TOGGLE='toggle date order'
USENET='usenet'
FILE='file manager'
CATALOGUE='catalogue new movies'

# preload cache option
[ "$1" = cache ] && { shift; cache=true; }
[ $1 ] && MOVIES='movies' || MOVIES='animation'

category=${1:-movies}
PASSPORT="/run/media/$USER/My Passport/$category"
catlg=$CACHEDIR/menu:$category
[ -d "$PASSPORT" ] && { library=$PASSPORT; rm -rf $catlg; usb=true; } || library=${LIBRARY:-/net/media/videos/$category}
nzb=/net/downloads/nzbs/completed
playlist="$library/.playlist"
retitle="$library/.retitle"
rm -f "$retitle"

movies="/run/media/$USER/My Passport"  # create symlinks to avoid space parsing errors
passport=/tmp/movies:passport
# pathname containing spaces cannot override link, hence rm+ln vesus ln -sf
[ -d "$movies/movies" ] && { rm -f $passport; ln -s "$movies/movies" $passport; } || { [ -d "$movies/Movies" ] && { rm -f $passport; ln -s "$movies/Movies" $passport; } }
[ -L $passport ] && copy='copy\n'

# unset debug to remove exit from menu items
debug='\nexit'
find "$library" -name '*sample*' -exec rm {} \; &

# list latest movie additions first
T=t
cache() {
	notify low 'Movies' 'Caching library..'
	find "$library" -maxdepth 1 -regex '.*S[0-9][0-9]E[0-9][0-9].*' -exec rm -r {} \;  # purge television series
	find "$library" -maxdepth 1 -iregex '.*the.daily.show.2024.*' -exec rm -r {} \;    # purge the daily show
	retitle "$library" >>$retitle
	[ -e "$playlist" ] || echo >"$playlist"
	cat /dev/null >$catlg
	ls -1$T$R "$library" | sed -r 's/\./ /g; s/(.*) ([12][0-9][0-9][0-9])( .*)*/\1  (\2)/' >/tmp/menu:$category
	playlist /tmp/menu:$category "$playlist" >$catlg &
	unset movie
}

toggle()   { [ $T ] && echo "\\\\\\n$(X $TOGGLE)"; }
uncatlgd() {  [ $(find $nzb -maxdepth 1 -type d | wc -l) -gt 1 ]; }

# move downloads to media folder
catalogue() {
	for i in $(find $nzb -maxdepth 3 -regex '.*\(avi\|mkv\|mp4\)') ;do
		mv ${i%/*} $library
	done
	unset movie
}

# any new media added?
if [ -s $catlg ] ;then
	stest -dqr -n $catlg "$library" && cache
else
	cache force
fi
[ $cache ] && exit

options() {
	uncatlgd && edit="\\\\\\n$(X $CATALOGUE)" || unset edit
	grep -q '[^ ]' "$playlist" && echo "$(X $MOVIES)\\\n$(X $LAST)\\\n$(X $USENET)\\\n$(X $FILE)\\\n$(X $(sortlist $T))$(toggle)$edit" || echo "$(X $(sortlist $T))$(toggle)$edit"
}

playback() {
	while : ;do
		action=$(echo "${copy}play\nmrqe\nimdb\nmanage\ndelete\nmark$debug" | rmenu "$movie" -no-custom) || break
		title=$(echo "$movie" | sed 's/  (\([12][0-9][0-9][0-9]\))$/ \1/; s/ /./g')
		video=$(find "$library" -maxdepth 1 -type d -regex ".*/${title}.*")

		case $action in
			play   )
				if [ $(echo "$video" | wc -l) -gt 1 ] ;then
					notify 3 critical "$movie" "Duplicate movie files found"
					term 'movies' WAIT ranger "$video" || term 'movies' WAIT ranger "$library"
				fi
				mhistory "$playlist" "$movie"
				play "$video" "$movie"
				cache  # update deletes
				break
				;;

			copy   ) cp -rf "$video" $passport; break ;;
			mrqe   ) surf "http://www.mrqe.com/search?q=$movie" ;;
			imdb   ) surf "http://www.imdb.com/find?s=all&q=$movie" ;;
			manage ) term 'movies' WAIT nnn "$video" || term 'movies' WAIT nnn "$library"; cache; break ;;
			delete ) rm -rf "$video"; cache; break ;;
			mark   ) mhistory "$playlist" "$movie"; cache; break ;;
			exit   ) exit ;;
		esac
	done
}

while : ;do
	# rebuilding catalogue?
	[ ! -s $catlg ] && { sleep 0.1; continue; }

	uncatlgd && movie=5  # highlight update catalogue
	movie=$(cat "$catlg" | sed "1i$(options)" | rmenu 'Movie' "$movie" -no-custom) || break

	[ "$movie" = "$(X $LAST)" ] && movie=$(grep '^[a-zA-Z0-9]' $playlist | head -1)
	case ${movie#$(X)} in
		"$MOVIES"    ) [ $MOVIES = 'movies' ] && exec menu movies || exec menu movies $MOVIES ;;
		"$NAME"      ) unset T; cache ;;
		"$DATE"      ) T=t; cache ;;
		"$TOGGLE"    ) [ $R ] && unset R || R=r; cache ;;
		"$USENET"    ) nzbgeek; unset movie ;;
		"$FILE"      ) killall 'nnn' 2>/dev/null; preview=' ' term 'movies' WAIT nnn -s movies; cache; continue ;;
		"$CATALOGUE" ) catalogue; cache; movie=4; continue ;;  # highlight added movie
		*            ) movie=$(echo "$movie" | sed "s/^$SEP //"); playback ;;
	esac
done

# kak: filetype=sh
