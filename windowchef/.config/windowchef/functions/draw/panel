# sdothum - 2016 (c) wtfpl
[ $TRACE ] && CHILD="draw/panel $@" . $PARENT

# Windowchef
# ══════════════════════════════════════════════════════════════════════════════

# ................................................................... Draw panel

# Usage: draw panel [<fifo>], see restore panel
# NOTE:  adjustments made to accomodate alpine linux differences
# NOTE:  desktop 0..9 conversion to windowchef groups *in progress*

SPANEL=$SESSION/panel   # toggle state
[ -e $SPANEL ] || exit  # no panel
PANELTOP=$SPANEL:top
STARTREK=$SPANEL:startrek
STAT=$SPANEL:stat
TICKER=$SPANEL:ticker
WEATHER=$SPANEL:weather

which lemonbar >/dev/null 2>&1         || exit
fifo=${DISPLAY#:}       # for multi-monitor setup
pstat "lemonbar -d -n lemonbar:$fifo " && exit
toggle picom on

# .................................................................. Panel theme

DEFAULT_BG='#00000000'     # alpha channel for panel transparency with picom
DEFAULT_FG="#$(rice color default)"
ACTIVE_FG="#$(rice color active)"
INACTIVE_FG="#$(rice color inactive)"
FREE_FG="#$(rice color free)"
OCCUPIED_FG=$FREE_FG
if [ -e $PANELTOP ] ;then  # even more distraction free!
	LSEP='    '
	RSEP='    '
else
	LSEP='    '
	RSEP='    '
fi

# panel font
# PANEL_FONT='Iosevka\-mono'  # lemonbar requires the dash be escaped
# PANEL_FONT=$MONOFONT
PANEL_FONT=monograffic
PANEL_UNDERLINE=2             # thickness

# panel symbols (tag numbers option dropped to simplify colour assignments)
case $(query display width) in
	3440 ) TAG_PAD='      '; STATPAD='   ' ;;  # tag bar separator (visual spacing)
	1920 ) TAG_PAD='     ' ; STATPAD='  '  ;;
	*    ) TAG_PAD='    '  ; STATPAD='  '  ;;
esac
[ $(query display width) -lt 1920 ] && scaledown=true
[ $scaledown ] && { LSEP=${LSEP# }; LSEP=${LSEP% }; RSEP=${RSEP# }; RSEP=${RSEP% }; }

# ..................................................................... Geometry

# Windowchef panel geometry
PANEL_HEIGHT=$(query screen panel)
PANEL_INDENT=$(query screen indent)  # assumes equal left/right screen margins

fontsize=$(fontsize)
[ $scaledown ] && fontsize=$(( fontsize - 1 ))
width=$(query display width)
chop=$(( $width / $fontsize / 2 ))  # hackey column width calculation for title trim below

[ -e $PANELTOP ] && panel_offsetY=0 || panel_offsetY=$(( $(query display height) - $PANEL_HEIGHT ))
panel_offsetX=$PANEL_INDENT
panel_width=$(( $width - $PANEL_INDENT * 2 ))

# ................................................................... Tag status

# desktops
# tagcount=$(xdotool get_num_desktops)
tagcount=6  # don't need all TEN :)
DESKTOPS=$(seq 0 $(( $tagcount - 1 )) )
OCCUPIED='■'
FREE='□'

# desktop windows
windows()     { window group $1; }
visible()     { window group $1 visible; }
hidden()      { window group $1 hidden; }
has_windows() { [ $(window group $1) -gt 0 ]; }
has_visible() { [ $(window group $1 visible) -gt 0 ]; }
has_hidden()  { [ $(window group $1 hidden) -gt 0 ]; }

desktops() {
	unset desktops viewscreen
	for i in $DESKTOPS ;do
		format="%{B$DEFAULT_BG}"

		# NOTE: visible *ONLY* returns correct value for active desktop

		# has_visible $i && icon=$OCCUPIED || icon=$FREE
		has_windows $i && icon=$OCCUPIED || icon=$FREE

		if [ $i = $(desktop) ] ;then
			has_visible $i && format="${format}%{F$ACTIVE_FG}"
			has_hidden  $i && format="${format}%{F$ACTIVE_FG}%{U$ACTIVE_FG}%{+u}"
		elif ! has_windows $i ;then
			format="${format}%{F$FREE_FG}"
		else
			# has_visible $i && format="${format}%{F$INACTIVE_FG}"
			# has_hidden  $i && format="${format}%{F$INACTIVE_FG}%{U$INACTIVE_FG}%{+u}"
			format="${format}%{F$INACTIVE_FG}"  # has_windows $i
		fi
		desktops="${desktops}${TAG_PAD}${format}${icon}%{-u}%{U-}%{B-}%{F-}"
		viewscreen="${viewscreen} ${format} ${icon}"  # star trek!
	done
	[ -e $STAT ] || desktops="${desktops}$TAG_PAD"  # center tags with triple padding, see $stat
}

# .................................................................... Cpu stats

cpu_stat() { stat="${TAG_PAD} $cpu_usage ${STATPAD}$cpu_speed ${STATPAD}$cpu_temp ${STATPAD}$mem_usage${DESKPAD}${TAG_PAD}"; }

# ............................................................... Current window

# desktop details NOTE: windowchef cannot track window visibility states (so just count all)
active_window() {
	title="$(query desktop)"  # current/last group
	active=$(desktop)
	if has_windows $active ;then
		if has_visible $active && has_hidden $active ;then
			title="${title}${LSEP}$(visible $active)${LSEP}%{U$DEFAULT_FG}%{+u}$(hidden $active)%{-u}%{U-}"
		elif has_visible $active ;then
			title="${title}${LSEP}$(visible $active)"
		else
			title="${title}${LSEP}%{U$DEFAULT_FG}%{+u}$(hidden $active)%{-u}%{U-}"
		fi
	fi
	if has_visible $active ;then
		[ "$(xtitle)" = '' ] && { window next; return; }  # will trigger X record
		name=$(xtitle | sed -r "s/^(.)/\u\1/; s/'(.*)'/\1/")  # trap unfocused error messages & discard xtitle quotes
		# title="${title}${LSEP}%{B$DEFAULT_BG}%{F$ACTIVE_FG}$name%{F-}%{B-}%{F$DEFAULT_FG}"
		[ "$name" ] && name="${LSEP}%{B$DEFAULT_BG}%{F$ACTIVE_FG}$name%{F-}%{B-}%{F$DEFAULT_FG}"
		title="${title}${name}"
	fi
}

# ....................................................................... Clocks

dot()     { [ "$tic" = '●' ] && tic='○' || tic='●'; }
seconds() { tic=${line#*| }; tic=${tic%|*}; }

circle() {
	[ "$tic" = '◓' ] && tic='◑' ||
	{ [ "$tic" = '◑' ] && tic='◒' ||
		{ [ "$tic" = '◒' ] && tic='◐' || tic='◓'; };}
}

square() {
	[ "$tic" = '⬒' ] && tic='⬔' ||
	{ [ "$tic" = '⬔' ] && tic='◨' ||
		{ [ "$tic" = '◨' ] && tic='◪' ||
			{ [ "$tic" = '◪' ] && tic='⬓' ||
				{ [ "$tic" = '⬓' ] && tic='⬕' ||
					{ [ "$tic" = '⬕' ] && tic='◧' ||
						{ [ "$tic" = '◧' ] && tic='◩' || tic='⬒'; };};};};};}
}

bar() {
	tic=${line#*|}
	tic=${tic%|*}
	case $tic in
		00       ) tic=' ' ;;
		0[2468]  ) tic="%{F$DEFAULT_FG}▁%{F-}" ;;
		0[13579] ) tic="%{F$DEFAULT_FG}▂%{F-}" ;;
		10       ) tic="%{F$DEFAULT_FG}▁%{F-}" ;;
		1[2468]  ) tic="%{F$DEFAULT_FG}▂%{F-}" ;;
		1[13579] ) tic="%{F$DEFAULT_FG}▃%{F-}" ;;
		20       ) tic="%{F$DEFAULT_FG}▂%{F-}" ;;
		2[2468]  ) tic="%{F$DEFAULT_FG}▃%{F-}" ;;
		2[13579] ) tic="%{F$DEFAULT_FG}▄%{F-}" ;;
		30       ) tic="%{F$DEFAULT_FG}▃%{F-}" ;;
		3[2468]  ) tic="%{F$DEFAULT_FG}▄%{F-}" ;;
		3[13579] ) tic="%{F$DEFAULT_FG}▅%{F-}" ;;
		40       ) tic="%{F$DEFAULT_FG}▄%{F-}" ;;
		4[2468]  ) tic="%{F$DEFAULT_FG}▅%{F-}" ;;
		4[13579] ) tic="%{F$DEFAULT_FG}▆%{F-}" ;;
		50       ) tic="%{F$DEFAULT_FG}│%{F-}" ;;
		51       ) tic="%{F$DEFAULT_FG}┃%{F-}" ;;
		52       ) tic="%{F$DEFAULT_FG}█%{F-}" ;;
		53       ) tic="%{F$DEFAULT_FG}▇%{F-}" ;;
		54       ) tic="%{F$DEFAULT_FG}▆%{F-}" ;;
		55       ) tic="%{F$DEFAULT_FG}▅%{F-}" ;;
		56       ) tic="%{F$DEFAULT_FG}▄%{F-}" ;;
		57       ) tic="%{F$DEFAULT_FG}▃%{F-}" ;;
		58       ) tic="%{F$DEFAULT_FG}▂%{F-}" ;;
		59       ) tic="%{F$DEFAULT_FG}▁%{F-}" ;;
	esac
}

tape() {
	tic=${line#*|}
	tic=${tic%|*}
	if [ "${tic%%:*}" -lt 10 ] ;then
		# hours 0 - 9, cycle aligns on ten second intervals
		len=11
		pos=${tic##*:}
		# pos=$(( ${pos%??} % 10 ))  # crashes in dash (memory leak on arm?)
		pos=$(echo "${pos%??} % 10" | bc)
		[ $pos = 0 ] && pos=10
	else
		# hours 10 - 12, format string continously cycles
		len=12
		pos=$(( ${pos:-0} + 1 ))
		[ $pos -gt 10 ] && pos=0
	fi
	tic="$(echo "$tic" | tail -c $(( $len - $pos )))$(echo "$tic" | head -c $pos)"
}

# ................................................................ Weather watch

weather() { unset update_weather; conky weather panel | sed "s/\^/$RSEP/g" >/tmp/${WEATHER##*/} & }

# .................................................................. System info

# initialize (for overlay redraw), see draw root
[ -e $WEATHER ] && { [ -s /tmp/${WEATHER##*/} ] && current_weather=$(cat /tmp/${WEATHER##*/}); weather; }
# $STARTREK == ['', #<color>, $ACTIVE_FG, ..] 
[ -s $STARTREK ] && eval VIEWSCREEN="%{F$(cat $STARTREK)}"
# tic indicator: none (unset), dot, circle, square, bar, tape, seconds
[ -e $TICKER ] && { TIC=$(cat $TICKER); TIC=${TIC:-tape}; }

touch /tmp/${STAT##*/}:cpu /tmp/${STAT##*/}:speed /tmp/${STAT##*/}:temp /tmp/${STAT##*/}:mem
cpu_usage=$(cat /tmp/${STAT##*/}:cpu | sed 's/^.$/  &/; s/^..$/ &/')  # to avoid line centering shift
cpu_temp=$(cat /tmp/${STAT##*/}:temp)
cpu_speed=$(cat /tmp/${STAT##*/}:speed)
mem_usage=$(cat /tmp/${STAT##*/}:mem)

TUMBLING="▶ ◢ ▼ ◣ ◀ ◤ ▲ ◥"
counter=0   # desktops
cardinal=0  # directioons

# prevent lemonbar race to catch up (impossible to force race condition to test..)
stale() { [ ${EPOCH#S} -lt $(date +%s -d "-1 seconds") ] && unset EPOCH; }

currently() {
	stale && return
	line="S${line#$EPOCH}"  # restore S record format (sans epoch time)
	desktops
	[ "$(xtitle)" = '' ] && active_window  # no focused window

	line=$(echo "$line" | sed -r 's/#[{]/%{/g; s/(AM|PM)/\L\1/')  # recover lemonbar format strings, see clock below
	if [ -e $STARTREK ] ;then
		[ $counter -lt $(( $tagcount - 1 )) ] && counter=$(( $counter + 1 )) || { counter=0; cardinal=0; }
		if [ -e $STARTREK:cardinal ] ;then  # very silly tumbling triangle.. works best with 8 workspaces ¯\(°_o)/¯
			[ $cardinal -lt 8 ] && cardinal=$(( $cardinal + 1 )) || cardinal=1
			tumble=$(echo $TUMBLING | cut -d' ' -f$cardinal)
		else
			# tumble='⬤'
			tumble=${TUMBLING%% *}
		fi
		set -- ${viewscreen}
		unset desktops
		for j in $DESKTOPS ;do
			[ $counter = $j ] && icon="${VIEWSCREEN}$tumble" || icon=$2
			desktops="${desktops}${TAG_PAD}$1${icon}%{-u}%{U-}%{B-}%{F-}"
			shift 2
		done
	fi

	unset clock
	if [ $TIC ] ;then
		case $TIC in
			b*  ) bar ;;
			c*  ) circle ;;
			d*  ) dot ;;
			sq* ) square ;;
			s*  ) seconds ;;
			t*  ) tape ;;
		esac
		ticker="%{F$DEFAULT_FG}$tic%{F-}"
		case $TIC in
			se* ) clock="$ticker" ;;
			t*  ) clock="$ticker" ;;
			*   ) clock="  $ticker" ;;
		esac
	fi

	# refresh weather every 10 minutes
	if [ -e $WEATHER ] ;then
		minute=${line#*:?}    # hh:mm:ss.* -> m:ss.*
		case ${minute%:*} in  #            -> m
			0 ) [ $update_weather ] && weather ;;
			* ) update_weather=true ;;
		esac
	fi
	[ -s /tmp/${WEATHER##*/} ] && [ "$(cat /tmp/${WEATHER##*/})" != '' ] && current_weather=$(cat /tmp/${WEATHER##*/})  # prevent blanking during update, see weather()

	line="${line%%^*}${current_weather}${line#*^}"
	line="${line%%|*}${clock}%{F-}${line##*|}"
	system="%{F$DEFAULT_FG}%{B$DEFAULT_BG}${line#?}%{B-}%{F-}"
}

# ............................................................... FIFO read loop

panel() {
	desktops  # initialize
	while read -r line ;do
		case $line in
			S*         ) EPOCH=${line%%^*}; currently  ;;  # clock based info
			X*         ) active_window; EPOCH=true     ;;  # realtime xtitle update
			U*         ) [ "${line#?}" = '  0%' ] || cpu_usage=${line#?}; cpu_stat ;;  # ignore 0%
			T*         ) cpu_temp=${line#?};  cpu_stat ;;
			C*         ) cpu_speed=${line#?}; cpu_stat ;;
			M*         ) mem_usage=${line#?}; cpu_stat ;;
			!*         ) echo "$cpu_usage" >/tmp/${STAT##*/}:cpu; echo "$cpu_temp" >/tmp/${STAT##*/}:temp; echo "$mem_usage" >/tmp/${STAT##*/}:mem ;;  # save stats for draw root redraw
		esac
		
		# [ "$title"    ] || title
		# [ "$desktops" ] || desktops
		title=$(echo "$title" | cut -b -$chop)
		[ $EPOCH ] && printf "%s\n" "%{l}${title}%{c}${desktops}${stat}%{r}${system}"
		unset line EPOCH
	done
}

# ......................................................................... FIFO

# initialize fifo
[ -e $PANEL_FIFO:$fifo ] && rm -f $PANEL_FIFO:$fifo
mkfifo $PANEL_FIFO:$fifo
echo $PANEL_FIFO:$fifo >$PANEL_FIFO

# note physical linebreaks for each format specification (to accomodate slow processors, notably arm)
# NOTE: lemonbar %{F..} changed to #{F..} for alpine "clock" (fails on % char, see function currently)
# NOTE: added time since epoch for race condition trap
case $TIC in
	se* ) clock -i 1 -sf "S%s^${RSEP}#{F$ACTIVE_FG}| %-I:%M %S%p|#{F-}${RSEP}%a %-d %b '%y" >$PANEL_FIFO:$fifo & ;;
	t*  ) clock -i 1 -sf "S%s^${RSEP}#{F$ACTIVE_FG}| %-I:%M:%S%p|#{F-}${RSEP}%a %-d %b '%y" >$PANEL_FIFO:$fifo & ;;
	*   ) clock -i 1 -sf "S%s^${RSEP}#{F$ACTIVE_FG}%-I:%M#{F-} %p|%S|${RSEP}%a %-d %b '%y"  >$PANEL_FIFO:$fifo & ;;
esac

# event driven panel update
xtitle -sf 'X%s\n' >$PANEL_FIFO:$fifo 2>/dev/null &

# cpu usage, cpu temperature, memory usage stats
if [ -e $STAT ] ;then
	while : ;do echo "U$(cpu_percent)ᵁ" >$PANEL_FIFO:$fifo ;done &  # sar cycle >~ 1 second
	while : ;do echo "C$(cpu_speed)ᴳ" >$PANEL_FIFO:$fifo; sleep 1; done &
	while : ;do echo "T$(cpu_temp)°" >$PANEL_FIFO:$fifo; sleep 2; done &
	while : ;do free -h | grep 'Mem:' | sed -r 's/^[^ ]* *[^ ]* *([0-9.]*)Mi.*/\1ᴹ/; s/^[^ ]* *[^ ]* *([0-9.]*)Gi.*/\1ᴹ/; s/^/M/' >$PANEL_FIFO:$fifo; sleep 3; done &
fi

cat $PANEL_FIFO:$fifo | panel                                    \
| lemonbar -d -n "lemonbar:$fifo"                                \
	-g ${panel_width}x$PANEL_HEIGHT+$panel_offsetX+$panel_offsetY \
	-u $PANEL_UNDERLINE                                           \
	-f "$PANEL_FONT:size=$fontsize" -F "$DEFAULT_FG" -B "$DEFAULT_BG" &

# kak: filetype=sh
