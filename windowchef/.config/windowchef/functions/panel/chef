# sdothum - 2016 (c) wtfpl
[ $TRACE ] && CHILD="panel/infobar $@" . $PARENT

# Windowchef
# ══════════════════════════════════════════════════════════════════════════════

# ................................................................... Draw panel

# Usage: panel chef [<offset Y>]
#
# NOTE: this script is executed via "draw panel" SEE: also restore panel

[ $1 ] && panel_offsetY=$1

if [ "$panel_offsetY" = "0" ] ;then   # WHY: use of -eq fails comparison(?)
	LSEP="  %{F$INACTIVE_FG}%{F-}  "  # top bar
	RSEP="  %{F$INACTIVE_FG}%{F-}  "
else
	LSEP="  %{F$INACTIVE_FG}%{F-}  "  # bottom bar
	RSEP="  %{F$INACTIVE_FG}%{F-}  "
fi

# ............................................................... Current window

map=$(for i in $(seq 1 $tagcount) ;do echo -n '‧' ;done)

map() { echo "$map" | sed "s/‧/•/$(chef desktop $(chef desktop))"; }

# desktop details NOTE: windowchef does not track window visibility states
active_window() {
	title="$(map)  $(chef desktop)"  # current/last group
	active=$(desktop)
	if has_windows $active ;then
		if deactivated $active ;then
			title="${title}${LSEP}%{U$DEFAULT_FG}%{+u}$(visible $active)%{-u}%{U-}"
		else
			title="${title}${LSEP}$(visible $active)"
		fi
	fi
	if has_hidden ;then
		title="${title}${LSEP}%{U$DEFAULT_FG}%{+u}$(hidden)%{-u}%{U-}"
	fi
	if has_nilgroup ;then
		if has_hidden ;then
			title="${title}  -$(nilgroup)"  # group -1 windows
		else
			title="${title}${LSEP}-$(nilgroup)"  # group -1 windows
		fi
	fi
	if has_visible $active || has_nilgroup ;then
		[ "$(xtitle)" = '' ] && { waitron window_focus_last; return; }  # will trigger X record
		name=$(xtitle | sed -r "s/^(.)/\u\1/; s/'(.*)'/\1/")  # trap unfocused error messages & discard xtitle quotes
		[ "$name" ] && name="${LSEP}%{B$DEFAULT_BG}%{F$ACTIVE_FG}$name%{F-}%{B-}%{F$DEFAULT_FG}"
		title="${title}${name}"
	fi
}

# ............................................................... FIFO read loop

panel() {
	while read -r line ;do
		active_window
		
		# [ "$title"    ] || title
		printf "%s\n" "%{l}${title}"
	done
}

# ......................................................................... FIFO

# initialize fifo
[ -e $PANEL_FIFO:$fifo ] && rm -f $PANEL_FIFO:$fifo
mkfifo $PANEL_FIFO:$fifo
echo $PANEL_FIFO:$fifo >$PANEL_FIFO  # SEE: refresh_panel

# event driven panel update
xtitle -sf 'X%s\n' >$PANEL_FIFO:$fifo 2>/dev/null &
while : ;do chef -- vacuum; sleep 0.5; done &

cat $PANEL_FIFO:$fifo | panel | handlebar &

# kak: filetype=sh
