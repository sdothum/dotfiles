#!/usr/bin/dash
# sdothum - 2016 (c) wtfpl
# [ $TRACE ] && CHILD="window $@" . $PARENT

# Windowchef
# ══════════════════════════════════════════════════════════════════════════════

# ............................................................ Window operations

# Usage: window [@[<delay> | <class> | <name>] WAIT] <msg>, SEE: functions/window
#               where, <name> is window name (containing spaces)

# usable screen dimensions
margin=$(chef screen margin)
panel=$(chef screen panel)
top=$(chef screen top)                   # windowchefrc panel height is default bottom gap_width
gap=$(chef screen gap)
W=$(( $(chef display width) - margin * 2 ))
H=$(( $(chef display height) - panel - top ))
[ -e $SESSION/panel:top ] && top=$panel  # see draw panel

# Windowchef window geometry
border=$(chef screen window_border)
winid=$(pfw)
# xdotool windowstate --remove fullscreen $winid  # fullscreen negates any attempted window actions

geometry()      { xdotool getwindowgeometry --shell ${1:-$winid}; }  # X Y WIDTH HEIGHT (doesn't include borders)
set_geometry()  { eval $(geometry ${1:-$winid}); }
cat_geometry()  { [ -e $WINFO:$winid ] && eval $(cat $WINFO:$winid) || exit 1; }
save_geometry() { geometry $1 >$WINFO:${1:-$winid}; }                                # for revert
opposite_side() { echo $(( width + margin * 2 - (X + WIDTH + border * 2) )); }  # for nearest edge SEE: window snap / stretch

# ..................................................................... X Y size

# draw <winid> <width> <height> [rotate]
draw() {
	save_geometry
	[ $4 ] && { WID=$3; HGT=$2; } || { WID=$2; HGT=$3; }
	[ $HGT -gt $HEIGHT ] && { swap=$WID; WID=$HGT; HGT=$swap; }
	wtp $X $Y $WID $HGT $1
}

# do we need to wait longer for window creation?
if [ "$1" ] && [ -z "${1%%@*}" ] ;then
	notify trace "window $1"
	case $1 in
		@[0-9.]* ) sleep ${1#@} ;;
		*        )
			if [ $2 = 'WAIT' ] || xdotool getwindowname $(pfw) | grep -q "${1#@}" ;then
				case $1 in
					@*\ *    ) xdotool search -sync -onlyvisible -name      "${1#@}" windowfocus ;;
					@*       ) xdotool search -sync -onlyvisible -classname "${1#@}" windowfocus ;;
				esac
				[ $2 = 'WAIT' ] && shift
			else
				return 1  # not expected window
			fi
			;;
	esac
	winid=$(pfw)
	shift
fi

msg=$1
[ $msg ] && shift || usage: $0
if [ -e ${0%/window}/functions/window/$msg ] ;then
	. ${0%/window}/functions/window/$msg $@
else
	usage: $0
fi

mapw -m $winid  # regain focus

# kak: filetype=sh
