#!/usr/bin/dash
# sdothum - 2016 (c) wtfpl
# [ $TRACE ] && CHILD="window $@" . $PARENT

# Windowchef
# ══════════════════════════════════════════════════════════════════════════════

# ............................................................ Window operations

# Usage: window [@<delay>] <msg>, see functions/window

# usable screen dimensions
margin=$(chef screen margin)
panel=$(chef screen panel)
width=$(( $(chef display width) - $margin * 2 ))
height=$(( $(chef display height) - $panel * 2 ))

# Windowchef window geometry
border=$(chef screen window_border)
winid=$(pfw)
# xdotool windowstate --remove fullscreen $winid  # fullscreen negates any attempted window actions

geometry()      { xdotool getwindowgeometry --shell ${1:-$winid}; }  # X Y WIDTH HEIGHT (doesn't include borders)
set_geometry()  { eval $(geometry ${1:-$winid}); }
cat_geometry()  { [ -e $WINFO:$winid ] && eval $(cat $WINFO:$winid) || exit 1; }
save_geometry() { geometry $1 >$WINFO:${1:-$winid}; }                                # for revert
opposite_side() { echo $(( $width + $margin * 2 - ($X + $WIDTH + $border * 2) )); }  # for nearest edge SEE: window snap / stretch

# ..................................................................... X Y size

# draw <winid> <width> <height> [rotate]
draw() {
	save_geometry
	[ $4 ] && { W=$3; H=$2; } || { W=$2; H=$3; }
	[ $H -gt $height ] && { swap=$W; W=$H; H=$swap; }
	wtp $X $Y $W $H $1
}

# do we need to wait longer for window creation?
[ $1 ] && { [ "${1%%@*}" ] || { sleep ${1#@}; winid=$(pfw); shift; } }

msg=$1
[ $msg ] && shift || usage: $0
if [ -e ${0%/window}/functions/window/$msg ] ;then
	. ${0%/window}/functions/window/$msg $@
else
	usage: $0
fi

mapw -m $winid  # regain focus

# kak: filetype=sh
