#!/usr/bin/dash
# sdothum - 2016 (c) wtfpl
[ $TRACE ] && CHILD="souschef $@" . $PARENT

# Windowchef
# ══════════════════════════════════════════════════════════════════════════════

# ............................................................ sous chef desktop

# Usage: souschef [group | window [<action>]]

TREE=/tmp/souschef:tree
> $TREE

tree() { echo -n "$1 / " | tee -a $TREE >/dev/null; }

pick() {
	pick=$(rmenu "$(cat $TREE)$1" -no-custom -auto-select) || return 1
	tree "$1"
	echo $pick  # echo returns single spaced words
}

mactions="group
window
"

gactions="close
filter
raise
toggle
"

wactions="beam
column
draw
form
group
snap
tile
"

columns="3:1   left
3:2
3:3
4:1
4:2
4:3
4:4   right
"

tiles="0   fill
1   monocle
2   halves
3   thirds
4   quarters
5   fifths
"

regions="+   center
a   left
d   right
j   top
k   top     left
q   top     right
s   center  vertical
u   center  left
w   center  right
x   bottom
y   bottom  left
z   bottom  right
"

formats="-   term
c   B4  rotate
d   A4
f   A4  rotate
g   B5
h   B5  rotate
i   A5
j   A5  rotate
k   B6
l   B6  rotate
n   A6
p   A6  rotate
q   B7
s   B7  rotate
"

directions="a   tile    left
c   tile    right
d   top
j   left
k   right
n   bottom
q   top     left
s   top     right
u   bottom  left
v   bottom  right
"

for i in $(seq 1 9);do groups="${groups}$i   $(chef desktop $i | grep -v "''")\n" ;done  # SEE: chef desktop

while [ $1 ] ;do
	case $1 in
		group  ) menu=$1 ;;
		window ) menu=$1 ;;
		*      ) action=$1; tree "$menu" ;;
	esac
	shift
done

[ $menu ] || menu=$(echo "$mactions" | pick "sous-chef") || exit
case $menu in
	group  )
		[ $action ] || action=$(echo "$gactions" | pick "group") || exit
		tree "$action"
		case $action in
			close  )
				group=$(echo "$groups" | pick "close") || exit
				desktop ${group%% *} close
				waitron window_focus_last
				chef -- desktop
				;;
			filter )
				group=$(echo "$groups" | sed '1i-   restore all\n0   current' | pick "by") || exit
				[ ${group%% *} = 0 ] && group=$(desktop)
				case ${group%% *} in
					- ) desktop restore               ;;
					* ) desktop ${group%% *} specific ;;
				esac
				;;
			raise  )
				group=$(echo "$groups" | sed '1i0 last' | pick "raise") || exit
				[ ${group%% *} = 0 ] && group=last
				desktop ${group%% *}
				;;
			toggle )
				group=$(echo "$groups" | sed '1i0   current' | pick "toggle") || exit
				[ ${group%% *} = 0 ] && group=$(desktop)
				desktop ${group%% *} toggle
				;;
		esac
		;;
	window )
		[ $action ] || action=$(echo "$wactions" | pick "window") || exit
		tree "$action"
		case $action in
			beam   )
				group=$(echo "$groups" | pick "group") || exit
				window desktop ${group%% *} teleport
				;;
			column )
				column=$(echo "$columns" | pick "tile : column") || exit
				column=${column%% *}
				window tile ${column%:*} ${column#*:}
				;;
			draw   )
				extend=$(echo "$directions" | pick "direction") || exit
				extend=${extend#* }
				case ${extend%% *} in
					tile ) window ${extend}        ;;
					*    ) window extend ${extend} ;;
				esac
				;;
			form   )
				size=$(echo "$formats" | pick "size") || exit
				window size ${size#* }
				wgeometry record $(pfw)  # window snap overwrites window size geometry history
				window snap center vertical
				wgeometry restore $(pfw)
				;;
			group  )
				group=$(echo "$groups" | pick "group") || exit
				window desktop ${group%% *}
				;;
			snap   )
				snap=$(echo "$regions" | pick "to") || exit
				snap=${snap#* }
				case $snap in
					left | right ) [ "$(chef window classname)"  = "term" ] && window spread 3 $snap || window snap $snap ;;
					*            ) window snap ${snap} ;;
				esac
				;;
			tile   )
				tile=$(echo "$tiles" | pick "by") || exit
				W=$(pfw)
				layout fold ${tile%% *} $(chef window classname)
				waitron window_focus $W
				;;
		esac
		;;
esac

# kak: filetype=sh
