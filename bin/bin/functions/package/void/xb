#!/usr/bin/bash
# sdothum - 2016 (c) wtfpl

# Package
# ══════════════════════════════════════════════════════════════════════════════

# ........................................................... Package management

usage() {
	echo "$(basename $0) [-][S[S] | D | U | R | H | Q] [-<options>] [--<option>]* <package>
>  S .. sync noconfirm
> -S .. sync confirm
> SS .. sync force noconfirm
> -S    update repos
>  D .. downgrade
>  U .. update noconfirm
> -U .. update confirm
>  R .. remove recursive
> -R .. remove non-recursive
>  H .. hold
> -H .. unhold
$(basename $0)  B | C | H | I | U
>  B    backup cache
>  C    check database
>  H    held (list)
>  I    installed (count)
>  U    upgrade system
$(basename $0)  [/ | f** | [-]d | h] [<package> | <file>**]
>  / .. search (package and description)
>  f .. find (file)
>  d .. depends on
>  h .. history
>  I .. installed (package)
>  r .. required by
>    .. query" | usage:
	exit 1
}

# NOTE: dynamic/init symlink changes cause these packages to fail database check
IGNORE='pinentry|runit-void'

CACHE=/var/cache/xbps
BACKUP=/net/depot/
ITERATE=/tmp/xb:iterate
XBDIR=$(dirname $0)
ACTIONS=$XBDIR/functions/rules  # tuple: <action> <package> -> file: function/<action>, see upgrade_check and upgrade_actions

[ $1 ] || usage

# kernel must be last of ordered action tuples, see file function/kernel
[ -e $ACTIONS ] && upgrade_actions=$(cat $ACTIONS | sed 's/#.*//')  # prune comments
upgrade_actions="$upgrade_actions
	kernel  linux[0-9]
"

flag() { package=$(echo "$update" | grep "^$2" | head -1); [ "$package" ] && { ditto $1 "$package"; eval $1=true; } }

upgrade_check() {
	sudo xbps-install -S
	update=$(xbps-install -un |  cut -d' ' -f1)
	set -- $upgrade_actions
	while [ $2 ] ;do
		flag $1 "$2"
		shift 2
	done
	xlocate -S >/dev/null 2>&1 &
}

# over a list of packages
iterate() {
	action=$1
	shift
	touch $ITERATE  # see hold (below)
	trap "rm -f $ITERATE" EXIT
	count=$#
	for i in $@ ;do count=$(( $count - 1 )); [ $count -eq 0 ] && rm $ITERATE; xb $action $i ;done
	exit
}

# default (no options) to package query
case $1 in
	B  ) [ $2 ] && usage || action=backup ;;
	C  ) [ $2 ] && usage || action=check ;;
	I  ) [ $2 ] && action=installed || action=count ;;
	S  ) [ $2 ] && { action=sync; yes='-y'; } || usage ;;
	SS ) [ $2 ] && { action=force; yes='-y'; } ;;
	-S ) [ $2 ] && action=sync || sudo xbps-install -S; exit ;;
	D  ) action=downgrade ;;
	U  ) [ $2 ] && { action=update; yes='-y'; } || { action=upgrade; upgrade_check; } ;;
	-U ) [ $2 ] && action=update ;;
	R  ) action=remove; recursive='-R' ;;
	-R ) action=remove ;;
	H  ) [ $3 ] && iterate $@ || [ $2 ] && action=hold || action=held ;;
	-H ) [ $3 ] && iterate $@ || action=unhold ;;
	/* ) action=search; [ $1 = '/' ] || { package=${1#/}; shift; set -- 0 $package $@; } ;;  # allow /<pattern> short form (no action separator)
	f  ) action=file ;;
	d  ) action=dependson ;;
	h  ) action=history ;;
	r  ) action=requiredby ;;
	?  ) usage ;;
	*  ) action=query; set -- 0 $@ ;;  # preserve argv stack
esac

shift; [ $1 ] || case $action in
	backup  ) ;;
	check   ) ;;
	held    ) ;;
	history ) ;;
	count   ) ;;
	upgrade ) ;;
	*       ) usage ;;
esac

options=" $@"
package=${options##* }
options=${options% *}
[ $action = file ] || { [ $package ] && pkgver=$(xbps-query -S $package | grep pkgver | cut -d' ' -f2); }

upgrade_actions() {
	set -- $upgrade_actions
	while [ $2 ] ;do 
		eval [ \$$1 ] && { [ -e ${ACTIONS%/*}/$1 ] && . ${ACTIONS%/*}/$1 || post_install $2; }
		shift 2
	done
}

history() {
	xilog | grep $(xilog | tail -1 | awk '{ print $3 }')
	ifno 'full history' || xilog | tac | less
}

installed() { file=$(stat -c '%x %n' $CACHE/$1* 2>/dev/null | sort | tail -1); [ "$file" ] && ditto ${file%% *} ${file##*/}; }
version()   { sed 's|^.*/||; s/^[+a-zA-Z-]*//; s/.x.*//'; }  # trim path*, package name and extension*
package()   { grep "$1$package-[0-9]*[._][0-9]*"; }         # package name template
latest()    { package=$(echo $1 | sed 's/-[0-9].*//'); xbps-query -Rs "$package-" | cut -d' ' -f2 | package '^' | version; }
cached()    { package=$(echo $1 | sed 's/-[0-9].*//'); xb h "$package-" | package '/var/cache/xbps/' | tail -1 | version; }
status()    { current=$(echo $1 | version); latest=$(latest $1); cached=$(cached $1); [ "$current" != "$latest" ] && echo -n "${CYAN} ${latest}"; [ "$cached" != "$current" ] && echo -n "$NOCOLOR  ($cached)"; }
scandb()    { sudo xbps-pkgdb -a 2>&1 | grep -Ev "$IGNORE"; }
check()     { [ $(scandb | wc -l) -eq 0 ] || { scandb; false; } }
repair()    { for i in $(scandb | cut -d: -f2) ;do sudo xbps-install -fy $i ;done }

case $action in
	backup     ) rsync -av $CACHE $BACKUP ;;
	check      ) ditto xbps 'checking database..'; check || ifno "reinstall (ERROR) packages" || repair ;;  # suppress hash mismatch (bash redirect syntax)
	count      ) ditto installed "$(xbps-query -l $options | wc -l) packages" ;;
	dependson  ) ditto "$package" "depends on.."; for i in $(xbps-query -x $package | sed 's/>=.*//; s/-[0-9].*/-/') ;do installed $i ;done | sort ;;
	downgrade  ) sudo xdowngrade $@ ;;  # downgrade must include package dependencies
	file       ) xlocate $package ;;
	force      ) sudo xbps-install -f $yes $options $package ;;
	held       ) for i in $(xbps-query --list-hold-pkgs) ;do ditto held "$i $(status $i)" ;done | column -t ;;
	history    ) if [ $package ] ;then  ls -l $CACHE/$package* 2>/dev/null ;else history ;fi ;;
	hold       ) [ $pkgver ] && { sudo xbps-pkgdb -m hold $options $package; xb H; [ -e $ITERATE ] || xb C; } ;;
	installed  ) xbps-query -l $options | grep '^ii' | cut -d' ' -f2- | sed -r "s/^([^ ]*)/${yellow}\1${NOCOLOR}/" | grep "$@" ;;
	query      ) [ $options ] && xbps-query -R $options $package || xbps-query -Rs $options "$package" | a $package ;;
	remove     ) sudo xbps-remove $recursive $options $package ;;
	requiredby ) ditto "$package" "required by.."; xbps-query -X $package ;;
	search     ) xbps-query -Rs $options $package | a $package ;;
	sync       ) sudo xbps-install $yes $options $package ;;
	update     ) sudo xbps-install $yes $options -u $package ;;
	upgrade    ) sudo xbps-install -y -u xbps | grep -q 'is up to date' || exec xb U; sudo xbps-install $options -u; upgrade_actions; xb H ;;  # 2 stage upgrade!
	unhold     ) [ $pkgver ] && { sudo xbps-pkgdb -m unhold $options $package; ditto unhold "$pkgver"; } ;;
esac

# kak: filetype=sh
