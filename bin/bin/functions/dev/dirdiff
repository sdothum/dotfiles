#!/usr/bin/dash
# sdothum - 2016 (c) wtfpl

# Dev
# ══════════════════════════════════════════════════════════════════════════════

# ..................................................... Recursive directory diff

usage() { usage: "$(basename $0) [-[1 | s | b | E | Z | EZ]] [-d <date>] <.|source> [<repo|target>] [<regex>]"; exit 1; }

# HISTORY: dirdiff has now been updated to handle a single file reference (in addition to a directory tree :)
# NOTE: ${T} clauses for explicit file type handling gymnastics
#       dirdiff is especially tailored for this installation with directory structure..
#       $HOME/bin (symlink to $HOME/stow/bin/bin)
#       $HOME/stow
#       /home/depot/dotfiles (repo of "stow" installation configuration files and scripts)

# ignore='backups|debian|\.history|makepkg|nixos|plugged-custom|qmk_firmware|root|snippets|undo|vps'
ignore='backups|debian|\.history|makepkg|nixos|plugged-custom|root|snippets|undo|vps'

DOTFILES=/home/depot/dotfiles  # git dotfile repo (pull)
DIRDIFF=/tmp/dirdiff
FILES=$DIRDIFF:files
LOG=$DIRDIFF.log
if exists icdiff ;then
	IC=ic
	ICOPT='--line-numbers --truncate --tabsize=3 --color-map=add:red_bold,change:red_bold,subtract:red_bold,description:yellow,line-numbers:black_bold,separator:yellow'  # side-by-side
fi
delay=0.001  # match message animation interval

# Runtime ......................................................................

while [ "$1" ] ;do
	case $1 in
		-1  ) unset IC ICOPT ;;                                        # standard diff (not side-by-side)
		-s  ) S=true         ;;                                        # flash messages
		-b  ) w=-w; diffopt='set diffopt+=iwhite'  ;;                  # ignore whitespace
		-E  ) w=-E; diffopt='set diffopt+=iwhite'  ;;                  # ignore whitespace
		-Z  ) w=-Z; diffopt='set diffopt+=iwhite'  ;;                  # ignore whitespace
		-EZ ) w=-EZ; diffopt='set diffopt+=iwhite' ;;                  # ignore whitespace
		-d  ) FILTER=$DIRDIFF:filter; touch -d "$2" $FILTER; shift ;;  # timestamp filter
		*   ) break ;;
	esac
	shift
done

[ $IC ] && unset w  # inapplicable option

# Target directory .............................................................

while [ "$1" ] ;do
	[ -e "$1" ] && { [ "$source" ] && target=${1%/} || source=${1%/}; } || regex=$1
	shift
done
source=${source#$HOME/}
[ "$target" ] && [ "${target%${target#?*}}" != '/' ] && target=$PWD/$target  # target must be full pathname
target=${target%/.}
[ -d "$source" ] && { cd "$source" >/dev/null; source=$(pwd); path="$source"; } || { T=f; path="$(pwd)/${source#$HOME}"; }

# find matching source directory in target repo
TARGET=${target:-$DOTFILES}  # unprovided target defaults to git dotfile repo
[ -L $TARGET ] && L=-L
target=$(find $L $TARGET -type ${T:-d} -regex ".*${path#$HOME}" 2>/dev/null | head -1)
[ -${T:-d} "$target" ] || target=$(find $L $TARGET -type ${T:-d} -regex ".*${path#*/stow}" 2>/dev/null | head -1)

# $HOME/bin ....................................................................

# distinguish $HOME/bin from all other application bin folders
if [ $T ] ;then
	[ $(dirname "$source") = '.' ] && unset path || path=/$(dirname "$source")
	path="$(pwd)$path"
else
	path="$source"
fi
case "${path#$HOME/}" in
	bin          ) target="$TARGET/bin/bin"; src=/${source##*/} ;;
	stow/bin     ) target="$TARGET/bin";     src=/${source##*/} ;;
	stow/bin/bin ) target="$TARGET/bin/bin"; src=/${source##*/} ;;
esac
[ $T ] && target="$target$src"
[ -${T:-d} "$target" ] || usage
[ "$regex"           ] || regex='.*'

# File set .....................................................................

# to handle filenames containing spaces
[ $T ] && echo "$source" >$FILES || find -L ./ -type f | exclude | grep -E -v $ignore | grep "$regex" >$FILES
[ -s $FILES ] || usage
src=${source#$HOME/stow/*/}
src=\~/${src#$HOME/}

# Diff .........................................................................

while read file <&3 ;do
	[ "${file##*.}" = 'log' ] || [ "${file##*.}" = 'jpg' ] && continue
	file "$file" | grep -q text || { ditto skipping "${file#./}"; continue; }
	unset blink
	[ $T ] && targetfile=$target || targetfile="${target}/${file#./}"
	while : ;do
		[ $FILTER ] && [ "$file" -ot $FILTER ] && break
		[ $S ] && clear
		file="${file#./}"
		[ $title ] || { ditto -t diff "$src/$regex && $target" >>$LOG; title=true; }
		[ -e "${targetfile}" ] || { ditto ERROR missing "${targetfile}" >>$LOG; break; }
		if ! diff --brief $w "${file}" "${targetfile}" >/dev/null 2>&1 ;then
			[ $S ] || clear
			ditto diff "${file}"
			${IC}diff ${ICOPT} $w "${file}" "${targetfile}" | colordiff | pager  # SEE: ~/.colordiffrc
			ifno "edit ${file}" && break
			kakdiff "${file}" "${targetfile}"
			blink=${BLINK}
		else
			ditto match "${file}"
			[ $S ] && sleep $delay
			break
		fi
	done
done 3< $FILES

# kak: filetype=sh
