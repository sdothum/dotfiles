#!/usr/bin/dash
# sdothum - 2016 (c) wtfpl

# Dev
# ══════════════════════════════════════════════════════════════════════════════

# ..................................................... Recursive directory diff

usage() { usage: "$(basename $0) [-[1 | s | b | E | Z | EZ | debug]] [-d <date>] <.[/]|[./]source> [<repo|target>] [<regex>]"; exit 1; }

# NOTE: dirdiff quickly highlights project source code changes against a (separate) snapshot directory
#       ./                    -> do not match source path against target
#       The $var defaults reflect this installation's directory structure..
#       $HOME/bin             -> symlink to $HOME/stow/bin/bin
#       $HOME/stow            -> head of directory tree for all projects
#       /home/depot/dotfiles  -> a dated snapshot of "stow" (default comparison tree)
# HISTORY: dirdiff has now been updated to handle a single file reference (in addition to a directory tree :)
# SEE: ${T} clauses for explicit source file type handling gymnastics

# ignore='backups|debian|\.history|makepkg|nixos|plugged-custom|qmk_firmware|root|snippets|undo|vps'
ignore='backups|debian|\.history|makepkg|nixos|plugged-custom|root|snippets|undo|vps'

SNAPSHOT=${SNAPSHOT:-/home/depot/dotfiles}  # default project snapshot
DIRDIFF=/tmp/dirdiff
FILES=$DIRDIFF:files
LOG=$DIRDIFF.log
rm -f $LOG

delay=0.001  # match message animation interval

# Runtime ......................................................................

while [ "$1" ] ;do
	case $1 in
		-1     ) unset IC ICOPT ;;                                        # standard diff (not side-by-side)
		-s     ) S=true         ;;                                        # flash messages
		-b     ) w=-w; diffopt='set diffopt+=iwhite'  ;;                  # ignore whitespace
		-E     ) w=-E; diffopt='set diffopt+=iwhite'  ;;                  # ignore whitespace
		-Z     ) w=-Z; diffopt='set diffopt+=iwhite'  ;;                  # ignore whitespace
		-EZ    ) w=-EZ; diffopt='set diffopt+=iwhite' ;;                  # ignore whitespace
		-debug ) debug=true; set -x ;;
		-d     ) FILTER=$DIRDIFF:filter; touch -d "$2" $FILTER; shift ;;  # timestamp filter
		*      ) break ;;
	esac
	shift
done

[ $IC ] && unset w  # inapplicable option

# Target directory .............................................................

while [ "$1" ] ;do
	[ -e "$1" ] && { [ "$source" ] && target=${1%/} || source=${1%/}; } || regex=$1
	shift
done
source=${source#$HOME/}
[ "$target" ] && [ "${target%${target#?*}}" != '/' ] && target=${PWD}/$target  # target must be full pathname
target=${target%/.}
[ "${source#./}" = "${source}" ] && P=$HOME || { P=${PWD}; P=${P#$HOME/}; }    # ./ ignore source path
[ -d "$source" ] && { cd "$source" >/dev/null; source=${PWD}; path="$source"; } || { T=f; path="${PWD}/${source#$HOME}"; [ "$P" ] && path="${path#*./}"; unset S; }

# find matching source directory in target repo
TARGET=${target:-$SNAPSHOT}  # unprovided target defaults to dotfile repo
[ -L $TARGET ] && L=-L       # WARNING: find will fail on errant recursive links
target=$(find $L $TARGET -type ${T:-d} -regex ".*${path#*$P}" | head -1)
[ -${T:-d} "$target" ] || target=$(find $L $TARGET -type ${T:-d} -regex ".*${path#*/stow}" | head -1)

# Source bin ...................................................................

# distinguish $HOME/bin from all other application bin folders
if [ $T ] ;then
	[ $(dirname "$source") = '.' ] && unset path || path=/$(dirname "$source")
	path="${PWD}$path"
else
	path="$source"
fi
case "${path#$HOME/}" in
	bin          ) target="$TARGET/bin/bin"; src=/${source##*/} ;;
	stow/bin     ) target="$TARGET/bin";     src=/${source##*/} ;;
	stow/bin/bin ) target="$TARGET/bin/bin"; src=/${source##*/} ;;
esac
[ $T ] && target="$target$src"
[ -${T:-d} "$target" ] || usage
[ "$regex"           ] || regex='.*'

# File set .....................................................................

# to handle filenames containing spaces
[ $T ] && echo "$source" >$FILES || find -L ./ -type f | exclude | grep -E -v $ignore | grep "$regex" >$FILES
[ -s $FILES ] || usage
src=${source#$HOME/stow/*/}
src=\~/${src#$HOME/}

[ $debug ] && { ditto debug "T=$T target=$target"; exit; }

# Diff .........................................................................

while read file <&3 ;do
	[ "${file##*.}" = 'log' ] || [ "${file##*.}" = 'jpg' ] && continue
	file "$file" | grep -q text || { ditto skipping "${file#./}"; continue; }
	[ $T ] && targetfile=$target || targetfile="${target}/${file#./}"
	while : ;do
		[ $FILTER ] && [ "$file" -ot $FILTER ] && break
		[ $S ] && clear
		file="${file#./}"
		[ $title ] || { ditto -t $(basename $0) "$src/$regex  ✔  $target" >>$LOG; title=true; }
		[ -e "${targetfile}" ] || { ditto ERROR notfound "${targetfile}"; ditto ERROR notfound "${targetfile}" >>$LOG; break; }
		kakdiff "${file}" "${targetfile}"
		case $? in
			0 ) ditto match "${file}"; [ $S ] && sleep $delay; break ;;
			1 ) break ;;
			2 ) ;;  # SEE: kakdiff
		esac
	done
done 3< $FILES

[ -e $LOG ] && cat $LOG | pager

# kak: filetype=sh
