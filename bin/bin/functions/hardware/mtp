#!/usr/bin/dash
# sdothum - 2016 (c) wtfpl

# Hardware
# ══════════════════════════════════════════════════════════════════════════════

# ....................................................................... Device

# Usage: mtp [mount | umount | mounted | list | ls | recover], SEE: $FILEMANAGER, eject (plugin)

MTP=$HOME/mtp                        # mount point

name()    { ls -1 $MTP | tail -1; }  # device mount name
device()  { jmtpfs -l | grep -q '^Device [0-9]'; }
mounted() { mount | grep -q "^jmtpfs on $MTP "; }
recover() { sudo umount $MTP; [ -d $MTP ] || ditto mkdir "$(mkdir -v $MTP)"; }

busy() { ditto ERROR mtp "cd ~ before any mtp actions"; exit 1; }

if pwd | grep -q "$MTP" ;then
	case $1 in
		mount   ) busy ;;
		u*mount ) busy ;;
		recover ) busy ;;
	esac
fi

[ ! -d $MTP ] && recover

case $1 in
	mount   )
		if $(device) ;then
			[ "$(name)" = '' ] && { jmtpfs $MTP -o big_writes >/dev/null && notify critical "$(name)" "$MTP mounted" || notify critical "$MTP" "mount failed"; } || notify "$(name)" 'already mounted'
		else exit 1
		fi
		;;

	u*mount )
		if mounted ;then
			name=$(name)
			echo ${PWD} | grep -q "$MTP/$name" && { notify critical "$name" "$MTP busy"; exit 1; }
			fusermount -u $MTP && notify critical "$name" "$MTP unmounted" || notify critical "$name" "$MTP umount failed"
		fi
		;;

	mounted ) mounted; exit ;;
	list    ) $(device) && jmtpfs -l  ;;
	ls      ) [ -d $MTP ] && [ $(find $MTP -maxdepth 1 | wc -l) -gt 1 ] && { echo $MTP; exit; } ;;  # SEE: eeject
	recover ) recover; exec mtp mount ;;
	*       ) [ -d $MTP ] && { [ $(find $MTP -maxdepth 1 | wc -l) -gt 1 ] && ditto dir $MTP; true; } || ditto ERROR notfound $MTP ;;
esac

[ "$(ls -A $MTP/)" ] && ditto mtp "$(ls -1 $MTP)" || ditto mtp "unmounted"

# kak: filetype=sh
