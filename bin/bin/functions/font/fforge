#!/usr/bin/dash
# sdothum - 2016 (c) wtfpl

# Font
# ══════════════════════════════════════════════════════════════════════════════

# ................................................. monolegible font adjustments

# SEE: font/iosevka
#
# HISTORY: Iosevka directory and file (naming conventions) changed with version 3x

usage() { 
	echo "$(basename $0) Q_hook | q_hook
$(basename $0) baseline      <shape>
$(basename $0) bookweight    [book+regular]
$(basename $0) capadjust     <letters>
$(basename $0) copy <family> <name>, font alias via commandline only
$(basename $0) f_ascending   <shape>
$(basename $0) f_asymmetric  <shape>
$(basename $0) f_descending  <shape>
$(basename $0) FP_descending <shape>
$(basename $0) I_descending  <shape>
$(basename $0) i_flipped     <shape>, experimental
$(basename $0) l_ascending   <shape>
$(basename $0) l_tailed      <letters> <shape>
$(basename $0) ligature      <width>   <shape>
$(basename $0) map  <family> <glyph> <glyph>, map U+<glyph> via commandline only
$(basename $0) punctuation   <emdash>  <shape>
$(basename $0) Q_custom      <shape>
$(basename $0) q_hook_       <shape>
$(basename $0) Q_horizontal  <shape>
$(basename $0) quote         <letters> <shape>
$(basename $0) serifed       <letters> <shape>
$(basename $0) serifless     <letters> <shape>
$(basename $0) space         <space>
$(basename $0) tailed        <letters> <shape>
$(basename $0) t_descending  <shape>
$(basename $0) T_descending  <shape>
$(basename $0) t_flipped     <shape>
$(basename $0) Y_descending  <shape>" | usage:
	exit 1
}

# export FONTFORGE_VERBOSE=1

MAKE_INSTALL=/tmp/iosevka:make_install
REPO=${REPO:-/home/depot/Iosevka.$IOSEVKA}
LOG=/tmp/fontforge

ANGLE=${ANGLE:--9}     # iosevka italic angle (verify with fontforge).. SEE: font/iosevka
XSHIFT=${XSHIFT:--40}  # italic descending capital left side bearing shift
# Yshrink=50           # elongation bar percent (original large overlap spec)
# Yshift=-174          # descending capital elongation
# yshift=-140          # lower case t elongation
Yshrink=25.5           # elongation bar percent
Yshift=-210            # descending capital elongation
yshift=-176            # lower case t elongation

confirm()  { [ -e $MAKE_INSTALL ] && ditto "$(basename $0)" "$1" || { ifyes "$1" || exit; }; }
percent()  { echo "$1 * 100" | bc | cut -d. -f1; }
regular()  { ls -1 | grep -Ev 'italic|oblique|extended'; }
italic()   { ls -1 | grep -E  'italic'; }

basefont() {
	case $1 in
		*normal*italic* ) echo "${1%italic*}upright.ttf" ;;  # version 3x
		*normal*        ) echo "${1}.ttf" ;;
		*italic*        ) echo "${1%italic*}upright.ttf" ;;  # version 1x/2x
		*               ) echo "${1}.ttf" ;;
	esac
}

# utf decimal "0u9999"
utf() { printf "$1" | iconv -t UTF16LE | od -t x2 -An -v | sed 's/ /\u/g; s/^/0u/'; }

replace() {
	echo "
Select($2);
Copy();
Select($1);
Paste();
"
}

capmove() {
	echo "
Select($(utf $1));
Move(0,8);  # shift bottom curvature to x base
"
}

# shift "C G O Q S U" to x base
capadjust() {
	echo "
Open(\$1);
" >${LOG}:capadjust.script

	set -- $(echo $letters | sed -r "s/(.)/\1 /g")
	while [ $1 ] ;do
		capmove $1 >>${LOG}:capadjust.script
		shift
	done

	echo "
Generate(\$1);
" >>${LOG}:capadjust.script

	for i in *.ttf ;do
		ditto capadjust $i
		fontforge -quiet --script ${LOG}:capadjust.script $i
	done
}

tighten() {
	echo "
Select($(utf $1));
Move($XSHIFT,0);  # tweak side bearing towards left
SetWidth($width);
"
}

# scale serifless "I i j l" cell width
serifless() {
	XSHIFT=-50
	echo "
Open(\$1);
" >${LOG}:serifless.script

	set -- $(echo $letters | sed -r "s/(.)/\1 /g")
	while [ $1 ] ;do
		tighten $1 >>${LOG}:serifless.script
		shift
	done

	echo "
Generate(\$1);
" >>${LOG}:serifless.script

	for i in *.ttf ;do
		ditto serifless $i
		fontforge -quiet --script ${LOG}:serifless.script $i
	done
}

# scale serifed "i j l" cell width
serifed() {
	XSHIFT=10
	echo "
Open(\$1);
" >${LOG}:serifed.script

	set -- $(echo $letters | sed -r "s/(.)/\1 /g")
	while [ $1 ] ;do
		tighten $1 >>${LOG}:serifed.script
		shift
	done

	echo "
Generate(\$1);
" >>${LOG}:serifed.script

	for i in *.ttf ;do
		ditto serifed $i
		fontforge -quiet --script ${LOG}:serifed.script $i
	done
}

# scale tailed "l" cell width
l_tailed() {
	XSHIFT=-20
	echo "
Open(\$1);
" >${LOG}:l_tailed.script

	set -- $(echo $letters | sed -r "s/(.)/\1 /g")
	while [ $1 ] ;do
		tighten $1 >>${LOG}:l_tailed.script
		shift
	done

	echo "
Generate(\$1);
" >>${LOG}:l_tailed.script

	for i in *.ttf ;do
		ditto l_tailed $i
		fontforge -quiet --script ${LOG}:l_tailed.script $i
	done
}

# scale single quote (apostrophe glyph) cell width
quote() {
	echo "
Open(\$1);
" >${LOG}:quote.script

	set -- $(echo $letters | sed -r "s/(.)/\1 /g")
	while [ $1 ] ;do
		case $1 in
			# ‘ ) XSHIFT=-60 ;;  # quote left
			# ’ ) XSHIFT=-50 ;;  # quote right
			# ‛ ) XSHIFT=-60 ;;  # quote reversed
			‘ ) XSHIFT=-70 ;;  # quote left
			’ ) XSHIFT=-20 ;;  # quote right
			‛ ) XSHIFT=-70 ;;  # quote reversed
		esac
		tighten $1 >>${LOG}:quote.script
		shift
	done

	echo "
Generate(\$1);
" >>${LOG}:quote.script

	for i in *.ttf ;do
		ditto quote $i
		fontforge -quiet --script ${LOG}:quote.script $i
	done
}

# flip serifed i WARNING: ** cannot override italic **
i_flipped() {
	Xright=$(( ${XSHIFT#-} * 2 ))
	echo "
Open(\$1);
Select($(utf 'i'));
HFlip();
Move($Xright,0);  # tweak side bearing towards right
SetWidth($shape);
Generate(\$1);
" >${LOG}:flipped:i.script

	for i in $(regular) ;do
		ditto i_flipped $i
		fontforge -quiet --script ${LOG}:flipped:i.script $i
	done

	# italicize flipped from regular glyph and shift to left of cell
	echo "
Open(\$2);
Select($(utf 'i'));
Italic($ANGLE);
Copy();
Open(\$1);
Select($(utf 'i'));
Paste();
Move($Xright,0);  # adjust for italic side bearing shift towards right 
SetWidth($shape);
Generate(\$1);
" >${LOG}:flipped:i:italic.script

	for i in $(italic) ;do
		ditto i_flipped:italic $i
		fontforge -quiet --script ${LOG}:flipped:i:italic.script $i $(basefont $i)
	done
}

# flip asymmetric t
t_flipped() {
	echo "
Open(\$1);
Select($(utf 't'));
HFlip();
Move($XSHIFT,0);  # tweak side bearing towards left
SetWidth($shape);
Generate(\$1);
" >${LOG}:flipped:t.script

	for i in $(regular) ;do
		ditto t_flipped $i
		fontforge -quiet --script ${LOG}:flipped:t.script $i
	done

	# italicize flipped from regular glyph and shift to left of cell
	echo "
Open(\$2);
Select($(utf 't'));
Italic($ANGLE);
Copy();
Open(\$1);
Select($(utf 't'));
Paste();
Move($XSHIFT,0);  # adjust for italic side bearing shift towards left 
SetWidth($shape);
Generate(\$1);
" >${LOG}:flipped:t:italic.script

	for i in $(italic) ;do
		ditto t_flipped:italic $i
		fontforge -quiet --script ${LOG}:flipped:t:italic.script $i $(basefont $i)
	done
}

# substitute curly tail q
q_hook() {
	# copy char 0u024b and paste to char 0u0071
	# confirm 'atkinson q-hook'  # SEE: iosevka
	echo "
Open(\$1);
$(replace $(utf 'q') 0u024b)
Generate(\$1);
" >${LOG}:q_hook.script

	for i in *ttf ;do
		ditto q_hook $i
		fontforge -quiet --script ${LOG}:q_hook.script $i
	done
}

# substitute curly tail q (extended as in atkinson hyperlegible)
# NOTE: extended tail spec'd for cell shapes 576, 600 (and 650 for webfont headers :-)
q_hook_() {
	# copy char 0u024b and paste to char 0u0071
	# confirm 'atkinson q-hook'  # SEE: iosevka
	echo "
Open(\$1);
$(replace $(utf 'q') 0u024b)
Select($(utf '╺'));                                  # U+237a (box drawing glyph)
CopyReference();
Select(0u0001);                                      # temporary cell to avoid modifying original glyph
Paste();
Select(0u0001);
CopyReference();
Transform(Int(Strtod(\$2)),0,0,Int(Strtod(\$3)),0,0);
Select($(utf 'q'));
PasteWithOffset(Int(Strtod(\$4)),Int(Strtod(\$5)));  # NOTE: fontforge arguments are passed as strings
RemoveOverlap();
Select(0u0001);
Clear();
Generate(\$1);
" >${LOG}:q_hook_.script

	for i in $(regular) ;do
		ditto q_hook_ $i
		unset Xwidth Ydepth Xshift Yshift
		if [ $shape -eq 650 ] ;then
			Xwidth=28
			case $i in  # webfont
				*book* ) Xshift=578; Yshift=-400 ;;
				*bold* ) Xshift=566; Yshift=-399;;
				*      ) Xshift=580; Yshift=-403 ;;
			esac
		elif [ $shape -eq 600 ] ;then
			Xwidth=28
			case $i in  # webfont
				*book* ) Xshift=542; Yshift=-400; Ydepth=55 ;;
				*bold* ) Xshift=523; Yshift=-400; Ydepth=58;;
				*      ) Xshift=534; Yshift=-402; Ydepth=55 ;;
			esac
		fi
		case $i in
			*book* ) Xshift=${Xshift:-561}; Yshift=${Yshift:--401}; Ydepth=${Ydepth:-55} ;;  # NOTE: spec for cell shape 576
			*bold* ) Xshift=${Xshift:-556}; Yshift=${Yshift:--401}; Ydepth=${Ydepth:-58} ;;
			*      ) Xshift=${Xshift:-565}; Yshift=${Yshift:--403}; Ydepth=${Ydepth:-55} ;;
		esac
		fontforge -quiet --script ${LOG}:q_hook_.script $i ${Xwidth:-18} $Ydepth $Xshift $Yshift
	done

	# italics left shifted in character cell
	for i in $(italic) ;do
		ditto q_hook_:italic $i
		unset Xwidth Ydepth Xshift Yshift
		if [ $shape -eq 650 ] ;then
			Xwidth=28
			case $i in  # webfont
				*book* ) Xshift=484; Yshift=-399; Ydepth=55 ;;
				*bold* ) Xshift=477; Yshift=-403; Ydepth=59 ;;
				*      ) Xshift=487; Yshift=-403; Ydepth=55 ;;
			esac
		elif [ $shape -eq 600 ] ;then
			Xwidth=18
			case $i in  # webfont
				*book* ) Xshift=490; Yshift=-401; Ydepth=55 ;;
				*bold* ) Xshift=483; Yshift=-404; Ydepth=59 ;;
				*      ) Xshift=493; Yshift=-400; Ydepth=54 ;;
			esac
		fi
		case $i in
			*book* ) Xshift=${Xshift:-475}; Yshift=${Yshift:--398}; Ydepth=${Ydepth:-54} ;;  # Xshift from upright
			*bold* ) Xshift=${Xshift:-466}; Yshift=${Yshift:--401}; Ydepth=${Ydepth:-58} ;;
			*      ) Xshift=${Xshift:-474}; Yshift=${Yshift:--403}; Ydepth=${Ydepth:-55} ;;
		esac
		fontforge -quiet --script ${LOG}:q_hook_.script $i ${Xwidth:-17} $Ydepth $Xshift $Yshift
	done
}


Q_hook() {
	# copy char 0u024a and paste to char 0u0051
	# confirm 'Q-hook'  # SEE: iosevka
	echo "
Open(\$1);
$(replace $(utf 'Q') 0u024a)
Generate(\$1);
" >${LOG}:Q_hook.script

	for i in *ttf ;do
		ditto Q_hook $i
		fontforge -quiet --script ${LOG}:Q_hook.script $i
	done
}

overlay() {
	echo "
Select($2);
CopyReference();
Select($1);
PasteWithOffset($3,$4);
RemoveOverlap();
"
}

Q_custom() {
	# copy char 0u03d8 and paste to char 0u0051
	# confirm 'Q-custom'  # SEE: iosevka
	# $(overlay 0u0051 0u0325 $(( $shape / 3 * 4 )) 35)  # circle to cell edge
	# $(overlay 0u0051 0u0325 $(( $shape / 4 * 5 )) 35)  # circle to glyph edge
	Q_offset() {
		echo "
Open(\$1);
$(replace $(utf 'Q') $(utf 'O'))
$(overlay $(utf 'Q') 0u2035 $x -650)
Generate(\$1);
" >${LOG}:Q_offset.script
}

	for i in *ttf ;do
		ditto Q_custom $i
		echo $i | grep -E -q 'italic|oblique' && x=-$(( $shape / 13 )) || x=$(( $shape / 10 ))
		Q_offset  # offset dependencies
		fontforge -quiet --script ${LOG}:Q_offset.script $i
	done
}

# wide cell width punctuation emdash and ellipsis (both are same extended proportional width)
punctuation() {
	width=$(percent $emdash)
	confirm "${emdash}x width emdash"
	
	echo "
Open(\$1);
Select($(utf '—'));  # emdash
Transform($width,0,0,100,0,0);
Select($(utf '…'));  # ellipsis
Transform($width,0,0,$width,0,0);
ChangeWeight(-40);
Move(0,-18);
Generate(\$1);
" >${LOG}:punctuation.script

	for i in *.ttf ;do
		ditto emdash $i
		fontforge -quiet --script ${LOG}:punctuation.script $i
	done
}

# "a d" tailed
tail() {
	echo "
Select($(utf $1));
SetWidth($width);
Move($TSHIFT,0);  # tweak (tail) right side bearing
"
}

tailed() {
	XSHIFT=18
	TSHIFT=1
	width=$(( $shape + $XSHIFT ))
	echo "
Open(\$1);
" >${LOG}:tailed.script

	set -- $(echo $letters | sed -r "s/(.)/\1 /g")
	while [ $1 ] ;do
		tail $1 >>${LOG}:tailed.script
		shift
	done

	echo "
Generate(\$1);
" >>${LOG}:tailed.script

	for i in *.ttf ;do
		ditto tailed $i
		fontforge -quiet --script ${LOG}:tailed.script $i
	done
}

# double width ligatures
explode() {
	if [ $shape ] ;then
		# explode monospace ligature
		echo "
Select($2);
CopyReference();
Select($1);
Paste();
Select($3);
CopyReference();
Select($1);
PasteWithOffset($shape,0);
RemoveOverlap();
Select($4);
CopyReference();
Select($1);
PasteWithOffset($5,$6);
RemoveOverlap();
SetWidth($(( $shape * 2 )));
"
	else
		# stretch proportional ligature
		echo "
Select($1);
Transform(${width:-200},0,0,100,0,0);
ChangeWeight(-15);
"
	fi
}

ligature() {
	confirm 'add exploded double width ligatures'
	grep -q '^cap =' $REPO/private-build-plans.toml && adjust=21 || adjust=0  # cap extended adjustment
	echo "
Open(\$1);
$(explode 0u00e6 $(utf 'a') $(utf 'e') 0u0335 $(( ${shape:-0} / 2 * 3 + 10 )) 0)
$(explode 0u0152 $(utf 'O') $(utf 'E') 0u0335 $(( ${shape:-0} / 2 * 3 + 10 )) $(( 118 + $adjust )) )
$(explode 0u0153 $(utf 'o') $(utf 'e') 0u0335 $(( ${shape:-0} / 2 * 3 + 10 )) 0)
$(explode 0u01fc $(utf 'A') $(utf 'E') 0u0301 $(( ${shape:-0} / 2 * 3 )) $(( 208 + $adjust )) )
$(explode 0u01fd $(utf 'a') $(utf 'e') 0u0301 $(( ${shape:-0} / 2 * 3 )) 0)
Generate(\$1);
" >${LOG}:ligature.script

	for i in *.ttf ;do
		ditto ligature $i
		fontforge -quiet --script ${LOG}:ligature.script $i
	done
}

# descending glyphs

baseline() {
	confirm "baseline"
	# [ $shape -eq 600 ] && xshift=-253 || xshift=-242  # if 100% width
	[ $shape -eq 600 ] && xshift=-2 || xshift=-1
	echo "
Open(\$1);
Select($(utf '|'));         # bar symbol to be transformed into point
CopyReference();
Select(0u0001);             # temporary cell to avoid modifying original glyph
Paste();
Select(0u0001);
# Transform(2,0,0,1,0,0);   # test position
Transform(0.0001,0,0,0.0001,0,0);
CopyReference();
SelectGlyphsSplines();
SelectFewer(0u0001);
PasteWithOffset($xshift,$(( $Yshift - 37)));
Select(0u0001);
Clear();
Generate(\$1);
" >${LOG}:baseline.script

	for i in $(regular) ;do
		ditto baseline $i
		fontforge -quiet --script ${LOG}:baseline.script $i
	done

	# do similar for italics (though, appears to be unnecessary)
	xshift=$(( $xshift + $XSHIFT ))
	echo "
Open(\$1);
Select($(utf '|'));
CopyReference();
Select(0u0001);  # temporary cell to avoid modifying original glyph
Paste();
Select(0u0001);
Transform(0.0001,0,0,0.0001,0,0);
CopyReference();
SelectGlyphsSplines();
SelectFewer(0u0001);
PasteWithOffset($xshift,$(( $Yshift - 37)));
Select(0u0001);
Clear();
Generate(\$1);
" >${LOG}:baseline:italic.script

	for i in $(italic) ;do
		ditto baseline:italic $i
		fontforge -quiet --script ${LOG}:baseline:italic.script $i
	done
}

descender() {
	# create regular descender
	confirm "$1"
	echo "
Open(\$1);
Select($(utf '|'));
CopyReference();
Select(0u0001);  # temporary cell to avoid modifying original glyph
Paste();
Select(0u0001);
CopyReference();
Transform(100,0,0,$Yshrink,0,0);
Select($2);
PasteWithOffset($3,$4);
RemoveOverlap();
Select(0u0001);
Clear();
Generate(\$1);
" >${LOG}:descender.script

	for i in $(regular) ;do
		ditto $1 $i
		fontforge -quiet --script ${LOG}:descender.script $i
	done

	# italicize descender from regular glyph and shift to left of cell
	echo "
Open(\$2);
Select($2);
Italic($ANGLE,0,0x0020);  # do not hook f
Copy();
Open(\$1);
Select($2);
Paste();
Move($XSHIFT,0);  # adjust for italic side bearing shift towards left 
SetWidth($shape);
Generate(\$1);
" >${LOG}:descender:italic.script

	for i in $(italic) ;do
		ditto $1:italic $i
		fontforge -quiet --script ${LOG}:descender:italic.script $i $(basefont $i)
	done
}

I_descending() {
	descender I_descending '0u0049' 0 $Yshift
}

T_descending() {
	descender T_descending '0u0054' 0 $Yshift
}

t_descending() {
	descender t_descending '0u0074' 0 $yshift  # f descender depth
}

Y_descending() {
	descender Y_descending '0u0059' 0 $Yshift
}

FP_descending() {
	descender F_descending '0u0046' -162 $Yshift
	descender P_descending '0u0050' -176 $Yshift
}

l_ascending() {
	# create regular descender
	confirm "l_ascending"
	echo "
Open(\$1);
Select($(utf '|'));
CopyReference();
Select(0u0001);  # temporary cell to avoid modifying original glyph
Paste();
Select(0u0001);
CopyReference();
# Transform(100,0,0,93,0,0);
# Move(0,133);
Transform(100,0,0,92,0,0);
Move(0,132);
Select($(utf 'l'));
Paste();
Select(0u0001);
Clear();
Generate(\$1);
" >${LOG}:l_ascending.script

	for i in *.ttf ;do
		ditto l_ascending $i
		fontforge -quiet --script ${LOG}:l_ascending.script $i
	done
}

f_ascending() {
	# create regular descender
	confirm "f_ascending"

	echo "
Open(\$1);
Select($(utf 'f'));
Move(0,47);
Select($(utf '|'));
CopyReference();
Select(0u0001);                                      # temporary cell to avoid modifying original glyph
Paste();
Select(0u0001);
CopyReference();
Transform(100,0,0,Int(Strtod(\$4)),0,0);
Select($(utf 'f'));
PasteWithOffset(Int(Strtod(\$2)),Int(Strtod(\$3)));  # NOTE: fontforge arguments are passed as strings
RemoveOverlap();
Select(0u0001);
Clear();
Generate(\$1);
" >${LOG}:f_ascending.script

	for i in $(regular) ;do
		ditto f_ascending $i
		case $i in
			*book* ) Xshift=-26 ;;
			*bold* ) Xshift=-24 ;;
			*      ) Xshift=-27 ;;
		esac
		fontforge -quiet --script ${LOG}:f_ascending.script $i $Xshift ${Yshift:-6} ${Ydepth:-5}
	done

	# italicize flipped from regular glyph and shift to left of cell
	echo "
Open(\$2);
Select($(utf 'f'));
Italic($ANGLE,1,0);  # 1:no x-height shift 0: no italic embellishments (tails)
Copy();
Open(\$1);
Select($(utf 'f'));
Paste();
Move(-70,0);  # adjust for italic side bearing shift towards left
SetWidth($shape);
Generate(\$1);
" >${LOG}:f_ascending:italic.script

	for i in $(italic) ;do
		ditto f_flipped:italic $i
		fontforge -quiet --script ${LOG}:f_ascending:italic.script $i $(basefont $i)
	done
}

f_descending() {
	Yshift=-208
	Ydepth=32
	[ $shape -eq 600 ] && { Yshift=-200; Ydepth=36; }  # web font extended cap height
	f_ascending
}

# experimental: tweaked for book upright only
f_asymmetric() {
	confirm "f_asymmetric"
	echo "
Open(\$1);
Select($(utf 'ƭ'));  # latin extended-B
CopyReference();
Select(0u0001);      # temporary cell to avoid modifying original glyph
Paste();
Select($(utf '-'));
Transform(35,0,0,100,0,0);
CopyReference();
Select(0u0001);
PasteWithOffset(284,404);
CopyReference();
Select($(utf 'f'));
Paste();
Select(0u0001);
Clear();
Generate(\$1);
" >${LOG}:f_asymmetric.script

	for i in *.ttf ;do
		ditto f_asymmetric $i
		fontforge -quiet --script ${LOG}:f_asymmetric.script $i
	done
}

Q_horizontal() {
	confirm 'extend horizontal Q'
	echo "
Open(\$1);
$(overlay $(utf 'Q') 0u0335 $(( $shape / 4 * 5 )) -225)
Generate(\$1);
" >${LOG}:Q_horizontal.script

	for i in *.ttf ;do
		ditto Q_horizontal $i
		fontforge -quiet --script ${LOG}:Q_horizontal.script $i
	done
}

# set book weights as regular (for kindle use with bold weights)
regularweight() {
	echo "
Open(\$2);
Select($1);
Copy();
Open(\$1);
Select($1);
Paste();
Generate(\$1);
"
}

weight() {
	confirm "set $regular weights as regular"
	rm -f *\#1.ttf
	rm -f *.ttx

	# version 1x/2x font weight renaming
	if [ -e "$(find . -name '*-regular.ttf')" ] ;then
      fonts="*-$regular *-${regular}italic *-bold *-bolditalic"

		# dump to ttx
		for i in $fonts ;do
			file=$i.ttf
			ditto ttx $file
			ttx -q $file
		done

		# assign book weights as regular (normal)
		family=${FONT##*/}
		sed -i -e "s/$family ${regular} Version/$family Regular Version/i"       \
			-e "s/$family[ -]${regular}/$family/i"                                \
			-e "s/${regular}/Regular/i"                                           \
			*-${regular}${upright}.ttx

		sed -i -e "s/$family ${regular} Italic Version/$family Italic Version/i" \
			-e "s/$family[ -]${regular}/$family/i"                                \
			-e "s/${regular} Italic/Italic/i"                                     \
			*-${regular}italic.ttx 

		# generate new ttf
		for i in $fonts ;do
			file=$i.ttx
			ditto ttf $file
			ttx -q $file
		done
	else
		regular="normal${regular}"
	fi

	if [ $adjust ] ;then
	# optically adjust M W w (to regular weight to narrow stroke width for better small font contrast match)
		echo "
$(regularweight $(utf 'M'))
$(regularweight $(utf 'W'))
$(regularweight $(utf 'w'))
" >${LOG}:weight.script

		echo
		for i in *${regular}*\#1.ttf ;do
			ditto tweak_MWw $i
			case $i in
				*normal*italic* ) file=*-normalregularitalic.ttf; unset upright    ;; # version 3x
				*normal*        ) file=*-normalregularupright.ttf; upright=upright ;;
		 		*italic*        ) file=*-italic.ttf  ;; # version 1x/2x
				*               ) file=*-regular.ttf ;;
			esac
			fontforge -quiet --script ${LOG}:weight.script $i $file
		done
	fi

	for i in $(find . -iname '*#1.ttf') ;do ditto weight "$(mv -v $i ${i%#1.ttf}.ttf | cut -d"'" -f4 | sed 's|.*/||')" ;done
}

# double cell width space
space() {
	if [ $space = "M" ] ;then
		confirm '"M" width space character'
		echo "
Open(\$1);
Select($(utf 'M'));
w = GlyphInfo('Width');
Select($(utf ' '));
SetWidth(w);
Generate(\$1);
" >${LOG}:space.script
	else
		width=$(percent $space)
		confirm "${space}x width space character"
		echo "
Open(\$1);
Select($(utf ' '));
Transform($width,0,0,100,0,0);
Generate(\$1);
" >${LOG}:space.script
	fi

	for i in *.ttf ;do
		ditto space $i
		fontforge -quiet --script ${LOG}:space.script $i
	done
}

copy() {
	confirm "copy $family to $alias"
	rm -f $family*.ttx
	rm -f $alias*.ttf

	# dump to ttx
	for i in $family*.ttf ;do
		ditto ttx $i
		ttx -q $i
	done

	# new alias
	for i in $family*.ttx ;do
		sed "s/$family/$alias/" $i >$alias${i#$family}
	done

	# generate new ttf
	for i in $alias*.ttx ;do
		ditto ttf $i
		ttx -q $i
	done
	rm -f *.ttx
}

# map glyph
map() {
	confirm "map $from to $to"
	echo "
Open(\$1);
$(replace 0u$to 0u$from)
Generate(\$1);
" >${LOG}:map.script

	for i in $family.ttf ;do
		ditto map $i
		fontforge -quiet --script ${LOG}:map.script $i
	done
}

# main, SEE: iosevka
fforge=$1
case $1 in
	baseline      ) shape=$2; shift ;;
	capadjust     ) letters=$2; shift ;;                                         # align "C G O Q S U" to x base
	copy          ) [ $3 ] && { family=$2; alias=$3; shift 2; copy; exit; }      || usage ;;  # pwd commandline only!
	f_ascending   ) shape=$2; shift ;;
	f_asymmetric  ) shape=$2; shift ;;
	f_descending  ) shape=$2; shift ;;
	FP_descending ) shape=$2; shift ;;
	I_descending  ) shape=$2; shift ;;
	i_flipped     ) shape=$2; shift ;;
	l_ascending   ) shape=$2; shift ;;
	l_tailed      ) letters=$2; width=$(( $3 * 925 / 1000 )); shift 2 ;;         # percent of "l" (tailed)
	ligature      ) [ $4 ] && { width=$2; shift 2; } || { shape=$2; shift; } ;;  # SEE: iosevka for tricky bits
	map           ) [ $4 ] && { family=$2; from=$3; to=$4; shift 3; map; exit; } || usage ;;  # pwd commandline only!
	punctuation   ) emdash=$2; shape=$3; shift 2 ;;
	Q_custom      ) shape=$2; shift ;;
	q_hook        ) ;;
	Q_hook        ) ;;
	q_hook_       ) shape=$2; shift ;;
	Q_horizontal  ) shape=$2; shift ;;
	quote         ) letters=$2; width=$(( $3 * 825 / 1000));  shift 2 ;;         # percent of quote (left,right,reversed)
	serifed       ) letters=$2; width=$(( $3 * 925 / 1000 )); shift 2 ;;         # percent of "i j l" (serifed)
	serifless     ) letters=$2; width=$(( $3 * 825 / 1000));  shift 2 ;;         # percent of "I i j l" (serifless)
	# serifless   ) letters=$2; width=$(( $3 * 845 / 1000));  shift 2 ;;         # percent of "I i j l" (serifless)
	space         ) space=$2; shift ;;
	tailed        ) letters=$2; shape=$3; shift 2 ;;                             # "a d" (tailed)
	t_descending  ) shape=$2; shift ;;
	T_descending  ) shape=$2; shift ;;
	t_flipped     ) shape=$2; shift ;;
	*weight       ) regular=${1%weight}; fforge=weight; [ "$2" = 'book+regular' ] && { adjust=true; shift; } ;;
	Y_descending  ) shape=$2; shift ;;
	*             ) usage ;;
esac
shift
[ $2 ] && usage

FONT=$HOME/.fonts/${1:-Iosevka}
[ $shape ] && HALF=$(( $shape / 2 ))  # half cell width (SEE: punctuation)
cd $FONT || usage

$fforge

rm -f *.ttx

# kak: filetype=sh
