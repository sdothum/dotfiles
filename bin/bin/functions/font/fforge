#!/usr/bin/dash
# sdothum - 2016 (c) wtfpl

# Font
# ══════════════════════════════════════════════════════════════════════════════

# ................................................. monolegible font adjustments

# SEE: font/iosevka
#
# HISTORY: Iosevka directory and file (naming conventions) changed with version 3x

usage() { 
	echo "$(basename $0) Q_hook | q_hook
$(basename $0) I_descending  <shape>
$(basename $0) i_flipped     <shape>, experimental
$(basename $0) l_ascending   <shape>
$(basename $0) Q_custom      <shape>
$(basename $0) Q_horizontal  <shape>
$(basename $0) T_descending  <shape>
$(basename $0) t_descending  <shape>
$(basename $0) t_flipped     <shape>
$(basename $0) Y_descending  <shape>
$(basename $0) FP_descending <shape>
$(basename $0) baseline      <shape>
$(basename $0) space         <space>
$(basename $0) punctuation   <emdash>  <shape>
$(basename $0) ligature      <width>   <shape>
$(basename $0) capadjust     <letters>
$(basename $0) serifed       <letters> <shape>
$(basename $0) serifless     <letters> <shape>
$(basename $0) tailed        <letters> <shape>
$(basename $0) bookweight    [book+regular]
$(basename $0) copy <family> <name>, font alias via commandline only
$(basename $0) map  <family> <glyph> <glyph>, map U+<glyph> via commandline only" | usage:
	exit 1
}

# export FONTFORGE_VERBOSE=1

MAKE_INSTALL=/tmp/iosevka:make_install
REPO=${REPO:-/home/depot/Iosevka.$IOSEVKA}
LOG=/tmp/fontforge

ANGLE=${ANGLE:--9}     # iosevka italic angle (verify with fontforge).. SEE: font/iosevka
XSHIFT=${XSHIFT:--40}  # italic descending capital left side bearing shift
# Yshrink=50           # elongation bar percent (original large overlap spec)
# Yshift=-174          # descending capital elongation
# yshift=-140          # lower case t elongation
Yshrink=25.5           # elongation bar percent
Yshift=-210            # descending capital elongation
yshift=-176            # lower case t elongation

confirm()  { [ -e $MAKE_INSTALL ] && ditto "$(basename $0)" "$1" || { ifyes "$1" || exit; }; }
percent()  { echo "$1 * 100" | bc | cut -d. -f1; }
regular()  { ls -1 | grep -Ev 'italic|oblique|extended'; }
italic()   { ls -1 | grep -E  'italic'; }

basefont() {
	case $1 in
		*normal*italic* ) echo "${1%italic*}upright.ttf" ;;  # version 3x
		*normal*        ) echo "${1}.ttf" ;;
		*italic*        ) echo "${1%italic*}upright.ttf" ;;  # version 1x/2x
		*               ) echo "${1}.ttf" ;;
	esac
}

# utf decimal "0u9999"
utf() { printf "$1" | iconv -t UTF16LE | od -t x2 -An -v | sed 's/ /\u/g; s/^/0u/'; }

replace() {
	echo "
Select($2);
Copy();
Select($1);
Paste();
"
}

capmove() {
	echo "
Select($(utf $1));
Move(0,8);  # shift bottom curvature to x base
"
}

# shift "C G O Q S U" to x base
capadjust() {
	echo "
Open(\$1);
" >${LOG}:capadjust.script

	set -- $(echo $letters | sed -r "s/(.)/\1 /g")
	while [ $1 ] ;do
		capmove $1 >>${LOG}:capadjust.script
		shift
	done

	echo "
Generate(\$1);
" >>${LOG}:capadjust.script

	for i in *.ttf ;do
		ditto capadjust $i
		fontforge -quiet --script ${LOG}:capadjust.script $i
	done
}

tighten() {
	echo "
Select($(utf $1));
Move($XSHIFT,0);  # tweak side bearing towards left
SetWidth($width);
"
}

# scale serifless "I i j l" cell width
serifless() {
	XSHIFT=-50
	echo "
Open(\$1);
" >${LOG}:serifless.script

	set -- $(echo $letters | sed -r "s/(.)/\1 /g")
	while [ $1 ] ;do
		tighten $1 >>${LOG}:serifless.script
		shift
	done

	echo "
Generate(\$1);
" >>${LOG}:serifless.script

	for i in *.ttf ;do
		ditto serifless $i
		fontforge -quiet --script ${LOG}:serifless.script $i
	done
}

# scale serifed "i j l" cell width
serifed() {
	XSHIFT=10
	echo "
Open(\$1);
" >${LOG}:serifed.script

	set -- $(echo $letters | sed -r "s/(.)/\1 /g")
	while [ $1 ] ;do
		tighten $1 >>${LOG}:serifed.script
		shift
	done

	echo "
Generate(\$1);
" >>${LOG}:serifed.script

	for i in *.ttf ;do
		ditto serifed $i
		fontforge -quiet --script ${LOG}:serifed.script $i
	done
}

# scale tailed "l" cell width
l_tailed() {
	XSHIFT=-20
	echo "
Open(\$1);
" >${LOG}:l_tailed.script

	set -- $(echo $letters | sed -r "s/(.)/\1 /g")
	while [ $1 ] ;do
		tighten $1 >>${LOG}:l_tailed.script
		shift
	done

	echo "
Generate(\$1);
" >>${LOG}:l_tailed.script

	for i in *.ttf ;do
		ditto l_tailed $i
		fontforge -quiet --script ${LOG}:l_tailed.script $i
	done
}

# scale single quote (apostrophe glyph) cell width
quote() {
	echo "
Open(\$1);
" >${LOG}:quote.script

	set -- $(echo $letters | sed -r "s/(.)/\1 /g")
	while [ $1 ] ;do
		case $1 in
			# ‘ ) XSHIFT=-60 ;;  # quote left
			# ’ ) XSHIFT=-50 ;;  # quote right
			# ‛ ) XSHIFT=-60 ;;  # quote reversed
			‘ ) XSHIFT=-70 ;;  # quote left
			’ ) XSHIFT=-20 ;;  # quote right
			‛ ) XSHIFT=-70 ;;  # quote reversed
		esac
		tighten $1 >>${LOG}:quote.script
		shift
	done

	echo "
Generate(\$1);
" >>${LOG}:quote.script

	for i in *.ttf ;do
		ditto quote $i
		fontforge -quiet --script ${LOG}:quote.script $i
	done
}

# flip serifed i WARNING: ** cannot override italic **
i_flipped() {
	Xright=$(( ${XSHIFT#-} * 2 ))
	echo "
Open(\$1);
Select($(utf 'i'));
HFlip();
Move($Xright,0);  # tweak side bearing towards right
SetWidth($shape);
Generate(\$1);
" >${LOG}:flipped:i.script

	for i in $(regular) ;do
		ditto i_flipped $i
		fontforge -quiet --script ${LOG}:flipped:i.script $i
	done

	# italicize flipped from regular glyph and shift to left of cell
	echo "
Open(\$2);
Select($(utf 'i'));
Italic($ANGLE);
Copy();
Open(\$1);
Select($(utf 'i'));
Paste();
Move($Xright,0);  # adjust for italic side bearing shift towards right 
SetWidth($shape);
Generate(\$1);
" >${LOG}:flipped:i:italic.script

	for i in $(italic) ;do
		ditto i_flipped:italic $i
		fontforge -quiet --script ${LOG}:flipped:i:italic.script $i $(basefont $i)
	done
}

# flip asymmetric t
t_flipped() {
	echo "
Open(\$1);
Select($(utf 't'));
HFlip();
Move($XSHIFT,0);  # tweak side bearing towards left
SetWidth($shape);
Generate(\$1);
" >${LOG}:flipped:t.script

	for i in $(regular) ;do
		ditto t_flipped $i
		fontforge -quiet --script ${LOG}:flipped:t.script $i
	done

	# italicize flipped from regular glyph and shift to left of cell
	echo "
Open(\$2);
Select($(utf 't'));
Italic($ANGLE);
Copy();
Open(\$1);
Select($(utf 't'));
Paste();
Move($XSHIFT,0);  # adjust for italic side bearing shift towards left 
SetWidth($shape);
Generate(\$1);
" >${LOG}:flipped:t:italic.script

	for i in $(italic) ;do
		ditto t_flipped:italic $i
		fontforge -quiet --script ${LOG}:flipped:t:italic.script $i $(basefont $i)
	done
}

# substitute curly tail q
q_hook() {
	# copy char 0u024b and paste to char 0u0071
	# confirm 'atkinson q-hook'  # SEE: iosevka
	echo "
Open(\$1);
$(replace $(utf 'q') 0u024b)
Generate(\$Usage: xsel [options]
Manipulate the X selection.

By default the current selection is output and not modified if both
standard input and standard output are terminals (ttys).  Otherwise,
the current selection is output if standard output is not a terminal
(tty), and the selection is set from standard input if standard input
is not a terminal (tty). If any input or output options are given then
the program behaves only in the requested mode.

If both input and output is required then the previous selection is
output before being replaced by the contents of standard input.

Input options
  -a, --append          Append standard input to the selection
  -f, --follow          Append to selection as standard input grows
  -z, --zeroflush       Overwrites selection when zero ('\0') is received
  -i, --input           Read standard input into the selection

Output options
  -o, --output          Write the selection to standard output

Action options
  -c, --clear           Clear the selection
  -d, --delete          Request that the selection be cleared and that
                        the application owning it delete its contents

Selection options
  -p, --primary         Operate on the PRIMARY selection (default)
  -s, --secondary       Operate on the SECONDARY selection
  -b, --clipboard       Operate on the CLIPBOARD selection

  -k, --keep            Do not modify the selections, but make the PRIMARY
                        and SECONDARY selections persist even after the
                        programs they were selected in exit.
  -x, --exchange        Exchange the PRIMARY and SECONDARY selections

X options
  --display displayname
                        Specify the connection to the X server
  -m wm, --name wm      Name with the process will be identified
  -t ms, --selectionTimeout ms
                        Specify the timeout in milliseconds within which the
                        selection must be retrieved. A value of 0 (zero)
                        specifies no timeout (default)

Miscellaneous options
  --trim                Remove newline ('\n') char from end of input / output
  -l, --logfile         Specify file to log errors to when detached.
  -n, --nodetach        Do not detach from the controlling terminal. Without
                        this option, xsel will fork to become a background
                        process in input, exchange and keep modes.

  -h, --help            Display this help and exit
  -v, --verbose         Print informative messages
  --version             Output version information and exit

Please report bugs to <conrad@vergenet.net>.
1);
" >${LOG}:q_hook.script

	for i in *ttf ;do
		ditto q_hook $i
		fontforge -quiet --script ${LOG}:q_hook.script $i
	done
}

Q_hook() {
	# copy char 0u024a and paste to char 0u0051
	# confirm 'Q-hook'  # SEE: iosevka
	echo "
Open(\$1);
$(replace $(utf 'Q') 0u024a)
Generate(\$1);
" >${LOG}:Q_hook.script

	for i in *ttf ;do
		ditto Q_hook $i
		fontforge -quiet --script ${LOG}:Q_hook.script $i
	done
}

overlay() {
	echo "
Select($2);
CopyReference();
Select($1);
PasteWithOffset($3,$4);
RemoveOverlap();
"
}

Q_custom() {
	# copy char 0u03d8 and paste to char 0u0051
	# confirm 'Q-custom'  # SEE: iosevka
	# $(overlay 0u0051 0u0325 $(( $shape / 3 * 4 )) 35)  # circle to cell edge
	# $(overlay 0u0051 0u0325 $(( $shape / 4 * 5 )) 35)  # circle to glyph edge
	Q_offset() {
		echo "
Open(\$1);
$(replace $(utf 'Q') $(utf 'O'))
$(overlay $(utf 'Q') 0u2035 $x -650)
Generate(\$1);
" >${LOG}:Q_offset.script
}

	for i in *ttf ;do
		ditto Q_custom $i
		echo $i | grep -E -q 'italic|oblique' && x=-$(( $shape / 13 )) || x=$(( $shape / 10 ))
		Q_offset  # offset dependencies
		fontforge -quiet --script ${LOG}:Q_offset.script $i
	done
}

# wide cell width punctuation emdash and ellipsis (both are same extended proportional width)
punctuation() {
	width=$(percent $emdash)
	confirm "${emdash}x width emdash"
	
	echo "
Open(\$1);
Select($(utf '—'));  # emdash
Transform($width,0,0,100,0,0);
Select($(utf '…'));  # ellipsis
Transform($width,0,0,$width,0,0);
ChangeWeight(-40);
Move(0,-18);
Generate(\$1);
" >${LOG}:punctuation.script

	for i in *.ttf ;do
		ditto emdash $i
		fontforge -quiet --script ${LOG}:punctuation.script $i
	done
}

# "a d" tailed
tail() {
	echo "
Select($(utf $1));
SetWidth($width);
Move($TSHIFT,0);  # tweak (tail) right side bearing
"
}

tailed() {
	XSHIFT=18
	TSHIFT=1
	width=$(( $shape + $XSHIFT ))
	echo "
Open(\$1);
" >${LOG}:tailed.script

	set -- $(echo $letters | sed -r "s/(.)/\1 /g")
	while [ $1 ] ;do
		tail $1 >>${LOG}:tailed.script
		shift
	done

	echo "
Generate(\$1);
" >>${LOG}:tailed.script

	for i in *.ttf ;do
		ditto tailed $i
		fontforge -quiet --script ${LOG}:tailed.script $i
	done
}

# double width ligatures
explode() {
	if [ $shape ] ;then
		# explode monospace ligature
		echo "
Select($2);
CopyReference();
Select($1);
Paste();
Select($3);
CopyReference();
Select($1);
PasteWithOffset($shape,0);
RemoveOverlap();
Select($4);
CopyReference();
Select($1);
PasteWithOffset($5,$6);
RemoveOverlap();
SetWidth($(( $shape * 2 )));
"
	else
		# stretch proportional ligature
		echo "
Select($1);
Transform(${width:-200},0,0,100,0,0);
ChangeWeight(-15);
"
	fi
}

ligature() {
	confirm 'add exploded double width ligatures'
	grep -q '^cap =' $REPO/private-build-plans.toml && adjust=21 || adjust=0  # cap extended adjustment
	echo "
Open(\$1);
$(explode 0u00e6 $(utf 'a') $(utf 'e') 0u0335 $(( ${shape:-0} / 2 * 3 + 10 )) 0)
$(explode 0u0152 $(utf 'O') $(utf 'E') 0u0335 $(( ${shape:-0} / 2 * 3 + 10 )) $(( 118 + $adjust )) )
$(explode 0u0153 $(utf 'o') $(utf 'e') 0u0335 $(( ${shape:-0} / 2 * 3 + 10 )) 0)
$(explode 0u01fc $(utf 'A') $(utf 'E') 0u0301 $(( ${shape:-0} / 2 * 3 )) $(( 208 + $adjust )) )
$(explode 0u01fd $(utf 'a') $(utf 'e') 0u0301 $(( ${shape:-0} / 2 * 3 )) 0)
Generate(\$1);
" >${LOG}:ligature.script

	for i in *.ttf ;do
		ditto ligature $i
		fontforge -quiet --script ${LOG}:ligature.script $i
	done
}

# descending glyphs

baseline() {
	confirm "baseline"
	# [ $shape -eq 600 ] && xshift=-253 || xshift=-242  # if 100% width
	[ $shape -eq 600 ] && xshift=-2 || xshift=-1
	echo "
Open(\$1);
Select($(utf '|'));         # bar symbol to be transformed into point
CopyReference();
Select(0u0001);             # temporary cell to avoid modifying original glyph
Paste();
Select(0u0001);
# Transform(2,0,0,1,0,0);   # test position
Transform(0.0001,0,0,0.0001,0,0);
CopyReference();
SelectGlyphsSplines();
SelectFewer(0u0001);
PasteWithOffset($xshift,$(( $Yshift - 37)));
Select(0u0001);
Clear();
Generate(\$1);
" >${LOG}:baseline.script

	for i in $(regular) ;do
		ditto baseline $i
		fontforge -quiet --script ${LOG}:baseline.script $i
	done

	# do similar for italics (though, appears to be unnecessary)
	xshift=$(( $xshift + $XSHIFT ))
	echo "
Open(\$1);
Select($(utf '|'));
CopyReference();
Select(0u0001);  # temporary cell to avoid modifying original glyph
Paste();
Select(0u0001);
Transform(0.0001,0,0,0.0001,0,0);
CopyReference();
SelectGlyphsSplines();
SelectFewer(0u0001);
PasteWithOffset($xshift,$(( $Yshift - 37)));
Select(0u0001);
Clear();
Generate(\$1);
" >${LOG}:baseline:italic.script

	for i in $(italic) ;do
		ditto baseline:italic $i
		fontforge -quiet --script ${LOG}:baseline:italic.script $i
	done
}

descender() {
	# create regular descender
	confirm "$1"
	echo "
Open(\$1);
Select($(utf '|'));
CopyReference();
Select(0u0001);  # temporary cell to avoid modifying original glyph
Paste();
Select(0u0001);
CopyReference();
Transform(100,0,0,$Yshrink,0,0);
Select($2);
PasteWithOffset($3,$4);
RemoveOverlap();
Select(0u0001);
Clear();
Generate(\$1);
" >${LOG}:descender.script

	for i in $(regular) ;do
		ditto $1 $i
		fontforge -quiet --script ${LOG}:descender.script $i
	done

	# italicize descender from regular glyph and shift to left of cell
	echo "
Open(\$2);
Select($2);
Italic($ANGLE,0,0x0020);  # do not hook f
Copy();
Open(\$1);
Select($2);
Paste();
Move($XSHIFT,0);  # adjust for italic side bearing shift towards left 
SetWidth($shape);
Generate(\$1);
" >${LOG}:descender:italic.script

	for i in $(italic) ;do
		ditto $1:italic $i
		fontforge -quiet --script ${LOG}:descender:italic.script $i $(basefont $i)
	done
}

I_descending() {
	descender I_descending '0u0049' 0 $Yshift
}

T_descending() {
	descender T_descending '0u0054' 0 $Yshift
}

t_descending() {
	descender t_descending '0u0074' 0 $yshift  # f descender depth
}

Y_descending() {
	descender Y_descending '0u0059' 0 $Yshift
}

FP_descending() {
	descender F_descending '0u0046' -162 $Yshift
	descender P_descending '0u0050' -176 $Yshift
}

l_ascending() {
	# create regular descender
	confirm "l_ascending"
	echo "
Open(\$1);
Select($(utf '|'));
CopyReference();
Select(0u0001);  # temporary cell to avoid modifying original glyph
Paste();
Select(0u0001);
CopyReference();
# Transform(100,0,0,93,0,0);
# Move(0,133);
Transform(100,0,0,92,0,0);
Move(0,132);
Select($(utf 'l'));
Paste();
Select(0u0001);
Clear();
Generate(\$1);
" >${LOG}:l_ascending.script

	for i in *.ttf ;do
		ditto l_ascending $i
		fontforge -quiet --script ${LOG}:l_ascending.script $i
	done
}

f_ascending() {
	# create regular descender
	confirm "f_ascending"

	echo "
Open(\$1);
Select($(utf 'f'));
Move(0,47);
Select($(utf '|'));
CopyReference();
Select(0u0001);                        # temporary cell to avoid modifying original glyph
Paste();
Select(0u0001);
CopyReference();
Transform(100,0,0,Int(Strtod(\$4)),0,0);
Select($(utf 'f'));
PasteWithOffset(Int(Strtod(\$2)),Int(Strtod(\$3)));  # NOTE: fontforge arguments are passed as strings
RemoveOverlap();
Select(0u0001);
Clear();
Generate(\$1);
" >${LOG}:f_ascending.script

	for i in $(regular) ;do
		ditto f_ascending $i
		case $i in
			*book* ) Xshift=-26 ;;
			*bold* ) Xshift=-24 ;;
			*      ) Xshift=-27 ;;
		esac
		fontforge -quiet --script ${LOG}:f_ascending.script $i $Xshift ${Yshift:-6} ${Ydepth:-5}
	done

	# italicize flipped from regular glyph and shift to left of cell
	echo "
Open(\$2);
Select($(utf 'f'));
Italic($ANGLE,1,0);  # 1:no x-height shift 0: no italic embellishments (tails)
Copy();
Open(\$1);
Select($(utf 'f'));
Paste();
Move(-70,0);  # adjust for italic side bearing shift towards left
SetWidth($shape);
Generate(\$1);
" >${LOG}:f_ascending:italic.script

	for i in $(italic) ;do
		ditto f_flipped:italic $i
		fontforge -quiet --script ${LOG}:f_ascending:italic.script $i $(basefont $i)
	done
}

f_descending() {
	Yshift=-160
	Ydepth=60
	f_ascending
}

# experimental: tweaked for book upright only
f_asymmetric() {
	confirm "f_asymmetric"
	echo "
Open(\$1);
Select($(utf 'ƭ'));  # latin extended-B
CopyReference();
Select(0u0001);      # temporary cell to avoid modifying original glyph
Paste();
Select($(utf '-'));
Transform(35,0,0,100,0,0);
CopyReference();
Select(0u0001);
PasteWithOffset(284,404);
CopyReference();
Select($(utf 'f'));
Paste();
Select(0u0001);
Clear();
Generate(\$1);
" >${LOG}:f_asymmetric.script

	for i in *.ttf ;do
		ditto f_asymmetric $i
		fontforge -quiet --script ${LOG}:f_asymmetric.script $i
	done
}

Q_horizontal() {
	confirm 'extend horizontal Q'
	echo "
Open(\$1);
$(overlay $(utf 'Q') 0u0335 $(( $shape / 4 * 5 )) -225)
Generate(\$1);
" >${LOG}:Q_horizontal.script

	for i in *.ttf ;do
		ditto Q_horizontal $i
		fontforge -quiet --script ${LOG}:Q_horizontal.script $i
	done
}

# set book weights as regular (for kindle use with bold weights)
regularweight() {
	echo "
Open(\$2);
Select($1);
Copy();
Open(\$1);
Select($1);
Paste();
Generate(\$1);
"
}

weight() {
	confirm "set $regular weights as regular"
	rm -f *\#1.ttf
	rm -f *.ttx

	# version 1x/2x font weight renaming
	if [ -e "$(find . -name '*-regular.ttf')" ] ;then
      fonts="*-$regular *-${regular}italic *-bold *-bolditalic"

		# dump to ttx
		for i in $fonts ;do
			file=$i.ttf
			ditto ttx $file
			ttx -q $file
		done

		# assign book weights as regular (normal)
		family=${FONT##*/}
		sed -i -e "s/$family ${regular} Version/$family Regular Version/i"       \
			-e "s/$family[ -]${regular}/$family/i"                                \
			-e "s/${regular}/Regular/i"                                           \
			*-${regular}${upright}.ttx

		sed -i -e "s/$family ${regular} Italic Version/$family Italic Version/i" \
			-e "s/$family[ -]${regular}/$family/i"                                \
			-e "s/${regular} Italic/Italic/i"                                     \
			*-${regular}italic.ttx 

		# generate new ttf
		for i in $fonts ;do
			file=$i.ttx
			ditto ttf $file
			ttx -q $file
		done
	else
		regular="normal${regular}"
	fi

	if [ $adjust ] ;then
	# optically adjust M W w (to regular weight to narrow stroke width for better small font contrast match)
		echo "
$(regularweight $(utf 'M'))
$(regularweight $(utf 'W'))
$(regularweight $(utf 'w'))
" >${LOG}:weight.script

		echo
		for i in *${regular}*\#1.ttf ;do
			ditto tweak_MWw $i
			case $i in
				*normal*italic* ) file=*-normalregularitalic.ttf; unset upright    ;; # version 3x
				*normal*        ) file=*-normalregularupright.ttf; upright=upright ;;
		 		*italic*        ) file=*-italic.ttf  ;; # version 1x/2x
				*               ) file=*-regular.ttf ;;
			esac
			fontforge -quiet --script ${LOG}:weight.script $i $file
		done
	fi

	for i in $(find . -iname '*#1.ttf') ;do ditto weight "$(mv -v $i ${i%#1.ttf}.ttf | cut -d"'" -f4 | sed 's|.*/||')" ;done
}

# double cell width space
space() {
	if [ $space = "M" ] ;then
		confirm '"M" width space character'
		echo "
Open(\$1);
Select($(utf 'M'));
w = GlyphInfo('Width');
Select($(utf ' '));
SetWidth(w);
Generate(\$1);
" >${LOG}:space.script
	else
		width=$(percent $space)
		confirm "${space}x width space character"
		echo "
Open(\$1);
Select($(utf ' '));
Transform($width,0,0,100,0,0);
Generate(\$1);
" >${LOG}:space.script
	fi

	for i in *.ttf ;do
		ditto space $i
		fontforge -quiet --script ${LOG}:space.script $i
	done
}

copy() {
	confirm "copy $family to $alias"
	rm -f $family*.ttx
	rm -f $alias*.ttf

	# dump to ttx
	for i in $family*.ttf ;do
		ditto ttx $i
		ttx -q $i
	done

	# new alias
	for i in $family*.ttx ;do
		sed "s/$family/$alias/" $i >$alias${i#$family}
	done

	# generate new ttf
	for i in $alias*.ttx ;do
		ditto ttf $i
		ttx -q $i
	done
	rm -f *.ttx
}

# map glyph
map() {
	confirm "map $from to $to"
	echo "
Open(\$1);
$(replace 0u$to 0u$from)
Generate(\$1);
" >${LOG}:map.script

	for i in $family.ttf ;do
		ditto map $i
		fontforge -quiet --script ${LOG}:map.script $i
	done
}

# main, SEE: iosevka
fforge=$1
case $1 in
	baseline      ) shape=$2; shift ;;
	f_asymmetric  ) shape=$2; shift ;;
	f_ascending   ) shape=$2; shift ;;
	f_descending  ) shape=$2; shift ;;
	I_descending  ) shape=$2; shift ;;
	i_flipped     ) shape=$2; shift ;;
	l_ascending   ) shape=$2; shift ;;
	T_descending  ) shape=$2; shift ;;
	t_descending  ) shape=$2; shift ;;
	t_flipped     ) shape=$2; shift ;;
	Y_descending  ) shape=$2; shift ;;
	FP_descending ) shape=$2; shift ;;
	Q_horizontal  ) shape=$2; shift ;;
	Q_custom      ) shape=$2; shift ;;
	q_hook        ) ;;
	Q_hook        ) ;;
	space         ) space=$2; shift ;;
	punctuation   ) emdash=$2; shape=$3; shift 2 ;;
	ligature      ) [ $4 ] && { width=$2; shift 2; } || { shape=$2; shift; } ;;  # SEE: iosevka for tricky bits
	capadjust     ) letters=$2; shift ;;                                         # align "C G O Q S U" to x base
	tailed        ) letters=$2; shape=$3; shift 2 ;;                             # "a d" (tailed)
	serifed       ) letters=$2; width=$(( $3 * 925 / 1000 )); shift 2 ;;         # percent of "i j l" (serifed)
	# serifless   ) letters=$2; width=$(( $3 * 845 / 1000));  shift 2 ;;         # percent of "I i j l" (serifless)
	serifless     ) letters=$2; width=$(( $3 * 825 / 1000));  shift 2 ;;         # percent of "I i j l" (serifless)
	l_tailed      ) letters=$2; width=$(( $3 * 925 / 1000 )); shift 2 ;;         # percent of "l" (tailed)
	quote         ) letters=$2; width=$(( $3 * 825 / 1000));  shift 2 ;;         # percent of quote (left,right,reversed)
	*weight       ) regular=${1%weight}; fforge=weight; [ "$2" = 'book+regular' ] && { adjust=true; shift; } ;;
	copy          ) [ $3 ] && { family=$2; alias=$3; shift 2; copy; exit; }      || usage ;;  # pwd commandline only!
	map           ) [ $4 ] && { family=$2; from=$3; to=$4; shift 3; map; exit; } || usage ;;  # pwd commandline only!
	*             ) usage ;;
esac
shift
[ $2 ] && usage

FONT=$HOME/.fonts/${1:-Iosevka}
[ $shape ] && HALF=$(( $shape / 2 ))  # half cell width (SEE: punctuation)
cd $FONT || usage

$fforge

rm -f *.ttx

# kak: filetype=sh
