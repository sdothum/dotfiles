#!/usr/bin/bash
# sdothum - 2016 (c) wtfpl

# Font
# ══════════════════════════════════════════════════════════════════════════════

# ...................................................................... iosevka

# NOTE: new git versions may change previous glyph style names !!
#
#       This script is compatible with Iosevka v27.x

# eg. source code and desktop fonts..
#     iosevka expanded I-serifless at-tall 
#     iosevka expanded proof f-extended
#     iosevka expanded menu double
#
#     e-ink fonts..
#     iosevka ebook english quasi-proportional
#     iosevka dyslexic english I-serifless
#
#     variants, full atkinson looks best in larger font sizes..
#     iosevka ebook atkinson english         (strict hyperlegible variants)
#     iosevka expanded geometric jost proof  (expanded width jost prose font)
#
# SEE: make_install

ditto IOSEVKA "${IOSEVKA}"
ditto 'tuples now changed from "option value" pairs to -> option=value'
ditto "refactoring is not fully tested"
echo $@

usage() {
	echo "$(basename $0) normal (default) | dyslexic | ebook | expanded | extended  (shapes)
> utf-8 | english | latin+greek | cyrillic | fluent | ligature <name>  (utf-8)
> heading | kindle | kobo | menu | proof | webfont   (special)
> monolexic (default) | atkinson | geometric | jost  (typefaces)
> altmono | elementary | grote | grotesk | nerdfont  (glyph sets)
> capadjust (C G O Q S U)

> book+regular | descenders | double | open[+]
> emdash=<decimal> 
> family=<name>
> serifless | serifed
> space=[M|<decimal>]

> D-serifless
> FP-descending (experimental)
> G-[corner|hookless[+]|rounded|toothed|toothless]
> I-[serifed|serifless|descending]
> J-[descending|flat|serifless]
> Q-[bar|bend|crossing|detached|hook|horizontal|open|straight|tailed|custom]
> T-descending (includes I-descending)
> W-asymmetric
> Y-descending (includes I-descending T-descending)

> a-[double[_]|earless|rounded|single[/|_]]|toothless]
> b-[corner|cut]
> d-[tailed|toothless]
> f-[asymmetric|extended[+[+]]|flat[+[+]]]
> g-[double|flat|open]
> i-[hooky|serifed[-]|serifless]
> j-[flat|serifed|serifless]
> l-[ascending|bottom|flat|hooky|serifless]
> m-[arch[-[-]]|earless[-]|rounded[-]|serifless]
> p-[eared|serifed]
> q-[hook[_]|tailed]
> t-[asymmetric[+|-[-]]|cross|descending|flat]
> u-toothed
> w-asymmetric
> y-[straight|turn]

> 0-[split|cutout]
> 1-[[no]base|flat]
> 4-open[+]
> asterisk-high
> at-tall
> paren-flat

> [ascender=[+-]<integer>]
> [cap=[-+]<integer> | extended]
> [leading=<decimal>]
> [noround | sb=<decimal>]
> [quasi-[proportional|extension]]
> [shape=<emu>]
> [weight=<integer>:<name>]
> [xheight=[-+]<decimal>]" | usage:
	exit 1
}

# exhibit..
# A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9
# a b c d e f g h i j k l m n o p q r s t u v w x y z      @   $ %   &      { }

[ -e /home/depot ] && REPO=/home/depot/Iosevka.${IOSEVKA} || REPO=/net/depot/Iosevka
MAKE_INSTALL=/tmp/iosevka:make_install

default_leading=1250  # scale font to match 10.x
default_xheight=530   # scale font to match 10.x
default_ascender=775  # scale font to match 10.x

leading=1.25          # default coding line spacing
extended=576          # extended regular shape (slightly tighter than Iosevka defaults)
expanded=600          # maximum terminal source code and proof legibility
capextended=40        # default geometric cap height adjustment

symbols() {
	ampersand=upper-open
	asterisk=penta-high
	at=compact
	dollar=through
	number_sign=upright
	paren=normal
	percent=dots
	question=smooth
}

# dyslexic adjusted Atkinson/grotesk typeface
monolexic() {
	capital_b=standard-serifless
	capital_d=more-rounded-serifless
	capital_g=toothless-corner-serifless-hooked
	capital_i=short-serifed
	capital_j=flat-hook-serifless
	capital_k=straight-serifless
	capital_p=closed-serifless
	capital_q=vertical-crossing
	capital_r=straight-serifless
	capital_w=straight-flat-top-serifless
	a=double-storey-toothless-corner
	b=toothless-rounded-serifless
	d=toothed-serifless
	f=flat-hook-serifless-crossbar-at-x-height
	g=single-storey-serifless
	i=hooky; S_i='i'
	j=flat-hook-serifed
	k=straight-serifless
	l=flat-tailed; T_l='l'
	m=earless-rounded-double-arch-serifless
	p=earless-corner-serifless
	q=tailed-serifless
	t=flat-hook-short-neck2
	u=toothless-rounded-serifless
	w=straight-flat-top-serifless
	y=straight-turn-serifless
	zero=reverse-slashed
	one=no-base-flat-top-serif
	four=closed-serifless
	six=closed-contour
	symbols
	cyrl_ka=symmetric-touching-serifless
}

# bauhaus/geometric typeface
geometric() {
	unset q_hook
	capital_b=standard-serifless
	capital_d=more-rounded-serifless
	capital_g=toothless-rounded-serifless-hooked
	capital_i=serifless; S_I='I'
	capital_j=descending-serifless
	capital_k=symmetric-touching-serifless
	capital_p=closed-serifless
	capital_q=straight
	capital_r=straight-serifless
	capital_w=straight-flat-top-serifless
	a=single-storey-serifless
	b=toothed-serifless
	d=toothed-serifless
	f=serifless-crossbar-at-x-height
	g=single-storey-serifless
	i=serifless; s_i='i'
	j=straight-line; s_j='j'
	k=symmetric-touching-serifless
	l=serifless; s_l='l'
	m=serifless
	p=eared-serifless
	q=straight-serifless
	t=hookless-short-neck2
	u=toothed-serifless
	w=straight-flat-top-serifless
	y=straight-serifless
	zero=unslashed-oval
	one=no-base
	four=closed-serifless
	six=straight-bar
	symbols
	cyrl_ka=symmetric-connected-serifless
}

# for stricter typeface matching
glyph() { eval $1; variant="$variant $1"; }

variant() {
	for o in $@ ;do  # "o"nly non-variant character ($i in use for variant :) ..since rectified with long variant names
		case $o in
			0-cutout       ) glyph zero=reverse-slashed-cutout                          ;;
			0-split        ) glyph zero=reverse-slashed-split                           ;;
			1-base         ) glyph one=base                                             ;;
			1-nobase       ) glyph one=no-base                                          ;;
			1-flat         ) glyph one=no-base-flat-top-serif                           ;;
			4-open+        ) glyph four=semi-open-non-crossing-serifless                ;;
			4-open         ) glyph four=semi-open                                       ;;
			ampersand      ) glyph ampersand=closed                                     ;;
			asterisk-high  ) glyph asterisk=penta-high                                  ;; # webfont restoration
			asterisk-low   ) glyph asterisk=penta-low                                   ;; # paragraph separator (ebook) glyph
			at             ) glyph at=threefold                                         ;;
			at-tall        ) glyph at=threefold-solid-inner-tall                        ;;
			dollar         ) glyph dollar=open                                          ;;
			number_sign    ) glyph number_sign=slanted                                  ;;
			paren-flat     ) glyph paren=flat-arc                                       ;;
			percent        ) glyph percent=rings-continuous-slash                       ;;
			question       ) glyph question=corner                                      ;;

			B-open         ) glyph capital_b=standard-interrupted-serifless             ;;
			D-serifless    ) glyph capital_d=standard-serifless                         ;;
			G-corner       ) glyph capital_g=toothless-corner-serifless-hooked          ;;
			G-hookless     ) glyph capital_g=toothless-corner-serifless-hookless        ;;
			G-hookless+    ) glyph capital_g=toothed-serifless-hookless                 ;;
			G-rounded      ) glyph capital_g=toothless-rounded-serifless-hooked         ;;
			G-toothed      ) glyph capital_g=toothed-serifless-hooked                   ;;
			G-toothless    ) glyph capital_g=toothless-corner-serifless-hooked          ;;
			I-serifed      ) glyph capital_i=short-serifed;                  unset s_I  ;;
			I-serifless    ) glyph capital_i=serifless;                      s_I='I'    ;;
			J-descending   ) glyph capital_j=descending-serifless;           unset S_J  ;;
			J-flat         ) glyph capital_j=descending-flat-hook-serifless; S_J='J'    ;;
			J-serifless    ) glyph capital_j=serifless;                      unset S_J  ;;
			P-open         ) glyph capital_p=open-serifless                             ;;
			Q-bar          ) glyph capital_q=vertical-crossing                          ;;
			Q-bend         ) glyph capital_q=detached-bend-tailed                       ;;
			Q-crossing     ) glyph capital_q=crossing                                   ;;
			Q-detached     ) glyph capital_q=detached-tailed                            ;;
			Q-horizontal   ) glyph capital_q=horizontal-tailed                          ;;
			Q-open         ) glyph capital_q=open-swash                                 ;;
			Q-straight     ) glyph capital_q=straight                                   ;;
			Q-tailed       ) glyph capital_q=crossing-curly-tailed                      ;;
			R-open         ) glyph capital_r=straight-open-serifless                    ;;
			W-asymmetric   ) glyph capital_w=straight-asymmetric-serifless              ;;

			a-double       ) glyph a=double-storey-serifless ;                unset T_a ;;
			a-double_      ) glyph a=double-storey-tailed ;                   T_a='a'   ;;
			a-single       ) glyph a=single-storey-serifless ;                unset T_a ;;
			a-single/      ) glyph a=single-storey-top-cut-serifless ;        unset T_a ;;
			a-single_      ) glyph a=single-storey-top-cut-tailed ;           T_a='a'   ;;
			a-earless      ) glyph a=single-storey-earless-corner-serifless ; unset T_a ;;
			a-rounded      ) glyph a=double-storey-toothless-rounded ;        unset T_a ;;
			a-toothless    ) glyph a=double-storey-toothless-corner ;         unset T_a ;;
			b-corner       ) glyph b=toothless-corner-serifless                         ;;
			b-cut          ) glyph b=bottom-cut-serifless                               ;;
			b-toothed      ) glyph b=toothed-serifless                                  ;;
			d-tailed       ) glyph d=tailed-serifless;                        T_d='d'   ;;
			d-toothless    ) glyph d=toothless-corner-serifless               unset T_d ;;
			f-extended     ) glyph f=flat-hook-extended-crossbar-at-x-height            ;;
			f-extended+    ) glyph f=flat-hook-extended                                 ;;
			f-flat         ) glyph f=flat-hook-serifless-crossbar-at-x-height           ;;
			f-flat+        ) glyph f=flat-hook-serifless                                ;;
			g-double       ) glyph g=double-storey                                      ;;
			g-flat         ) glyph g=single-storey-flat-hook-serifless                  ;;
			g-open         ) glyph g=double-storey-open                                 ;;
			i-hooky        ) glyph i=hooky;               S_i='i'; unset s_i            ;;
			i-serifed      ) glyph i=serifed;             unset s_i S_i                 ;;
			i-serifed-     ) glyph i=hooky;               S_i='i'; unset s_i            ;;
			i-serifless    ) glyph i=serifless;           s_i='i'; unset S_i            ;;
			j-flat         ) glyph j=flat-hook-serifless; S_j='j'                       ;;
			j-serifed      ) glyph j=flat-hook-serifed;   unset S_j                     ;;
			j-serifless    ) glyph j=serifless;           unset S_j                     ;;
			l-ascending    ) glyph l=serifless;           s_l='l'; unset S_l T_l        ;;
			l-bottom       ) glyph l=hooky-bottom;        T_l='l'; unset s_l S_l        ;;
			l-flat         ) glyph l=flat-tailed;         T_l='l'; unset s_l S_l        ;;
			l-hooky        ) glyph l=hooky;               S_l='l'; unset s_l T_l        ;;
			l-serifless    ) glyph l=serifless;           s_l='l'; unset S_l T_l        ;;
			m-arch         ) glyph m=earless-single-arch-serifless                      ;;
			m-arch-        ) glyph m=earless-single-arch-short-leg-serifless            ;;
			m-arch--       ) glyph m=earless-corner-double-arch-short-leg-serifless     ;;
			m-earless      ) glyph m=earless-corner-double-arch-serifless               ;;
			m-earless-     ) glyph m=earless-corner-double-arch-short-leg-serifless     ;;
			m-rounded      ) glyph m=earless-rounded-double-arch-serifless              ;;
			m-rounded-     ) glyph m=earless-rounded-double-arch-short-leg-serifless    ;;
			m-serifless    ) glyph m=serifless                                          ;;
			p-eared        ) glyph p=eared-serifless                                    ;;
			p-serifed      ) glyph p=motion-serifed                                     ;;
			q-tailed       ) glyph q=tailed-serifless                                   ;;
			t-asymmetric   ) glyph t=flat-hook-asymmetric-short-neck2                   ;;
			t-asymmetric+  ) glyph t=hookless-asymmetric-short-neck2                    ;;
			t-asymmetric-* ) glyph t=hookless-asymmetric-short-neck2                    ;;
			t-cross        ) glyph t=hookless-short-neck2                               ;;
			t-flat         ) glyph t=flat-hook-short-neck2                              ;;
			u-toothed      ) glyph u=toothed                                            ;;
			w-asymmetric   ) glyph w=straight-asymmetric-serifless                      ;;
			y-straight     ) glyph y=straight-serifless                                 ;;
			y-turn         ) glyph y=straight-turn-serifless                            ;;

			*              ) variant="$variant $o"                                      ;;
		esac
	done
}

shape()   { shape="shape = $(token number $1)"; }

# metric overrides
leading()  { leading="leading = '$default_leading * $(token decimal $1)'"; }
sb()       { sb="sb = 'default_sb * $(token decimal $1)'"; }
ascender() { ascender="ascender = '$default_ascender + $(token integer $1)'" && ditto override "$ascender"; }
cap()      { [ "$1" = extended ] && cap=$capextended || cap="$1"; cap="cap = 'default_cap + $(token integer ${cap:-$capextended})'" && ditto override "$cap"; }
xheight()  { xheight="xHeight = '$default_xheight + $(token integer $1)'" && ditto override "$xheight"; }

weight() {
	weight=$(token number $1) || return 1
	[ $2 ] && name=$2   || return 1
	ditto override "$name weight = $weight"
}

# e-reading only fontset
english_only() { exclude_chars='ranges = [[384, 401], [403, 505], [512, 535], [540, 566], [568, 585], [588, 709], [712, 712], [714, 727], [734, 768], [770, 805], [807, 820], [822, 915], [917, 936], [938, 955], [957, 959], [961, 7807], [7814, 7921], [7924, 8190], [8352, 8363], [8365, 8452], [8454, 8466], [8468, 8469], [8471, 8481], [8483, 8485], [8487, 8493], [8495, 8530], [8533, 8538], [8543, 8705], [8707, 8709], [8711, 8718], [8720, 8720], [8723, 8724], [8726, 8728], [8731, 8733], [8735, 8746], [8748, 8775], [8777, 8799], [8801, 8803], [8806, 9412], [9414, 9673], [9675, 9727], [9984, 11809], [11811, 11812], [11814, 64255], [64259, 130041]]'; }  # (??) [8826, 8827, 8880, 8881] not excluded
latin_greek()  { exclude_chars='ranges = [[384, 401], [403, 505], [512, 535], [540, 566], [568, 585], [588, 709], [712, 712], [714, 727], [734, 768], [770, 805], [807, 820], [822, 879], [1024, 7678], [7936, 8190], [8352, 8363], [8365, 8452], [8454, 8466], [8468, 8469], [8471, 8481], [8483, 8485], [8487, 8493], [8495, 8530], [8533, 8538], [8543, 8705], [8707, 8709], [8711, 8718], [8720, 8720], [8723, 8724], [8726, 8728], [8731, 8733], [8735, 8746], [8748, 8775], [8777, 8799], [8801, 8803], [8806, 9412], [9414, 9673], [9675, 9727], [9984, 11809], [11811, 11812], [11814, 64255], [64259, 130041]]'; }
cyrillic()     { exclude_chars='ranges = [[384, 401], [403, 505], [512, 535], [540, 566], [568, 585], [588, 709], [712, 712], [714, 727], [734, 768], [770, 805], [807, 820], [822, 879], [3584, 7678], [7936, 8190], [8352, 8363], [8365, 8452], [8454, 8466], [8468, 8469], [8471, 8481], [8483, 8485], [8487, 8493], [8495, 8530], [8533, 8538], [8543, 8705], [8707, 8709], [8711, 8718], [8720, 8720], [8723, 8724], [8726, 8728], [8731, 8733], [8735, 8746], [8748, 8775], [8777, 8799], [8801, 8803], [8806, 9412], [9414, 9673], [9675, 9727], [9984, 11809], [11811, 11812], [11814, 64255], [64259, 130041]]'; }
fluent() { exclude_chars='ranges = [[3584, 3647], [8592, 9673], [9677, 11360], [12800, 42560], [57344, 64256], [65520, 130041]]'; }

family()   { [ $1 ] || return 1; family=$1; }
space()    { [ $1 = "M" ] && space=$1 || space=$(token decimal $1); }
emdash()   { emdash=$(token decimal $1); }
ebook()    { variant asterisk-low; no_litigation=true; family i$(echo $1 | sed 's/.*/\u&/'); regular=book; ebook=true; }

initial()  { family=$(echo $family | sed -r "s/^(.*)([A-Z][^ ]*)/$1\2/"); }  # prefix family
ligature() { [ $1 ] || return 1; [ $1 = default ] && ligature=default-calt || ligature=$1; inherits="inherits = '$ligature'"; }
spacing()  { spacing=$1; }

cmdopts () {
	while [ $1 ] ;do
		ditto cmdopts "$1"
		case "$1" in
			# shapes
			dyslexic       ) shape $expanded; sb 0.7150; leading 1.5000; space 2; emdash 2; width=135; ebook monolexic ;;
			ebook          ) shape $extended; sb 0.7000; leading 1.4185; space 2; emdash 2; width=140; ebook monolegible ;;
			expanded       ) shape $expanded; sb 0.8500 ;;                                                 # expanded width (for source code and proof)
			extended       ) shape $extended; sb 0.7000 ;;                                                 # extended width (tighter than expanded)
			heading        ) shape 650; sb 0.8000; leading 1.2500; weight 300 light; ebook monolegible ;;  # web heading
			kindle         ) leading 1.9; shape $extended; sb 0.6150 ;;
			kobo           ) leading 1; shape $extended; sb 0.6850 ;;
			menu           ) leading 1.5000; build=-menu ;;                                                # rofi menu
			normal         ) shape 500; sb 0.7000 ;;                                                       # normal width
			# proof        ) leading 2.0000; sb 0.8000; build=${build}-proof ;;                            # for pure writing :)
			proof          ) leading 2.0000; build=${build}-proof ;;
			# webfont      ) weight 500 medium; initial w; regular=medium ;;  # heavier font for web usage
			webfont        ) leading 1; initial w ;;

			# language
			cyrillic       ) cyrillic;     ditto char_set "$1" ;;
			english        ) english_only; ditto char_set "$1" ;;
			fluent         ) fluent; ditto char_set "$1" ;;
			latin+greek    ) latin_greek;  ditto char_set "$1" ;;
			ligature       ) ligature $2  || usage; shift ;;
			utf*           ) unset exclude_chars ;;

			# typefaces
			altmono        ) cmdopts t-asymmetric G-hookless+ ;;
			atkinson       ) grotesque; ebook hyperlegible; variant G-toothed J-serifless Q-crossing a-double b-toothed j-serifless m-serifless p-eared u-toothed ampersand at number_sign percent ;;
			elementary     ) variant I-serifless a-single ;;
			geometric      ) geometric; cap extended; build=-jost ;;
			grote          ) cmdopts altmono l-serifless t-asymmetric+ y-straight open+ ;;
			grotesk        ) variant I-serifless f-extended ;;
			jost           ) geometric; cap extended; build=-jost; variant a-double J-descending j-serifless Q-crossing u-toothed ampersand at dollar number_sign percent question ;;
			monolexic      ) monolexic ;;
			nerdfont       ) nerdfont=true ;;

			# styles
			book+regular   ) adjust="book+regular" ;;    # SEE: fforge bookweight
			descenders     ) variant 'FP=DESCENDING'; FP_descending=true; baseline=true ;;
			double         ) unset mono ;;
			emdash=*       ) emdash ${1#*=} || usage ;;  # emdash width
			family=*       ) family ${1#*=} || usage ;;
			open           ) variant B-open P-open R-open ;;
			open+          ) cmdopts open 4-open+ ;;
			serifless      ) variant "SERIFLESS"; serifless=true ;;
			serifed        ) variant "SERIFED"; serifed=true ;;
			space=*        ) space ${1#*=}  || usage; [ ${space#*=} = 1 ] && unset space ;;  # space width

			# glyphs
			D-serifless    ) variant $1 ;;
			G-corner       ) variant $1 ;;
			G-hookless     ) variant $1 ;;
			G-hookless+    ) variant $1 ;;
			G-rounded      ) variant $1 ;;
			G-toothed      ) variant $1 ;;
			G-toothless    ) variant $1 ;;
			I-descending   ) variant I-serifless 'DESCENDING'; I_descending=true; baseline=true ;;
			I-serifed      ) variant $1 ;;
			I-serifless    ) variant $1; initial ;;  # combined minimal stroke glyphs
			J-descending   ) variant $1 ;;
			J-flat         ) variant $1 ;;
			J-serifless    ) variant $1 ;;
			Q-bar          ) variant $1 ;;
			Q-bend         ) variant $1 ;;
			Q-crossing     ) variant $1 ;;
			Q-custom       ) variant 'Q=CUSTOM';      Q_custom=true ;;
			Q-detached     ) variant $1 ;;
			Q-hook         ) variant 'Q=HOOK-TAILED'; Q_hook=true ;;
			Q-horizontal   ) variant $1;              Q_horizontal=true ;;
			Q-open         ) variant $1 ;;
			Q-straight     ) variant $1 ;;
			Q-tailed       ) variant $1 ;;
			T-descending   ) variant 'T=DESCENDING I=DESCENDING'; T_descending=true; I_descending=true; baseline=true ;;
			W-asymmetric   ) variant $1 w-asymmetric ;;
			Y-descending   ) variant I-serifless 'DESCENDING T=DESCENDING Y=DESCENDING'; I_descending=true; T_descending=true; Y_descending=true; baseline=true ;;

			a-double       ) variant $1 ;;
			a-double_      ) variant $1 ;;
			a-earless      ) variant $1 ;;
			a-rounded      ) variant $1 ;;
			a-single       ) variant $1 ;;
			a-single/      ) variant $1 ;;
			a-single_      ) variant $1 ;;
			a-toothless    ) variant $1 ;;
			b-corner       ) variant $1 p-serifed ;;         # alternate b p dyslexic glyphs
			b-cut          ) variant $1 p-eared ;;
			b-toothed      ) variant $1 ;;
			d-tailed       ) variant $1 b-corner p-eared ;;  # alternate b d p dyslexic glyphs
			d-toothless    ) variant $1 p-eared ;;
			f-asymmetric   ) variant $1 'ASYMMETRIC'; f_asymmetric=true ;;
			f-extended     ) variant $1 ;;                   # unolexic (homage to universal grotesk)
			f-extended+    ) variant $1 ;;                   # unolexic (homage to universal grotesk)
			f-extended++   ) variant f-flat+ 'DESCENDING'; f_descending=true ;;
			f-flat         ) variant $1 ;;
			f-flat+        ) variant $1 ;;
			f-flat++       ) variant f-flat+ 'ASCENDING'; f_ascending=true ;;
			g-double       ) variant $1 ;;
			g-flat         ) variant $1 ;;
			g-open         ) variant $1 ;;
			i-hooky        ) variant $1 ;;
			i-serifed      ) variant $1 ;;
			i-serifed-     ) variant $1 'FLIPPED'; i_flipped=true ;;
			i-serifless    ) variant $1 ;;
			j-flat         ) variant $1 ;;
			j-serifed      ) variant $1 ;;
			j-serifless    ) variant $1 ;;
			l-ascending    ) variant $1 'ASCENDING'; l_ascending=true ;;
			l-bottom       ) variant $1 ;;
			l-flat         ) variant $1 ;;
			l-hooky        ) variant $1 ;;
			l-serifless    ) variant $1 ;;
			m-arch         ) variant $1 ;;
			m-arch-        ) variant $1 ;;
			m-arch--       ) variant $1 ;;
			m-earless      ) variant $1 ;;
			m-earless-     ) variant $1 ;;
			m-rounded      ) variant $1 ;;
			m-rounded-     ) variant $1 ;;
			m-serifless    ) variant $1 ;;
			p-eared        ) variant $1 ;;
			p-serifed      ) variant $1 sb 0.7650 ;;         # add air for serif corner
			q-hook         ) variant 'q=HOOK-TAILED';  q_hook=true; unset q_hook_; baseline=true ;;
			q-hook_        ) variant 'q=HOOK-TAILED_'; q_hook_=true; unset q_hook; baseline=true ;;
			q-tailed       ) variant $1; unset q_hook ;;
			t-asymmetric   ) variant $1 ;;
			t-asymmetric+  ) variant $1 ;;
			t-asymmetric-  ) variant $1 'FLIPPED'; t_flipped=true; cmdopts i-serifless j-flat l-serifless ;;
			t-asymmetric-- ) variant $1 'FLIPPED'; t_flipped=true; cmdopts l-hooky ;;
			t-cross        ) variant $1 ;;
			t-descending   ) variant t-cross 'DESCENDING'; t_descending=true; baseline=true ;;
			t-flat         ) variant $1 ;;
			u-toothed      ) variant $1 ;;
			w-asymmetric   ) variant $1 W-asymmetric ;;
			y-straight     ) variant $1 ;;
			y-turn         ) variant $1 ;;

			0-cutout       ) variant $1 ;;
			0-split        ) variant $1 ;;
			1-base         ) variant $1 ;;
			1-nobase       ) variant $1 ;;
			1-flat         ) variant $1 ;;
			4-open         ) variant $1 ;;
			4-open+        ) variant $1 ;;
			paren-flat     ) variant $1 ;;
			asterisk-high  ) variant $1 ;;
			at-tall        ) variant $1 ;;

			# geometry
			ascender=*     ) ascender ${1#*=} || usage ;;                               # affects descender as well
			capadjust      ) capadjust=true ;;
			cap=*          ) cap ${1#*=}      || usage ;;                               # H height (capitals)
			leading=*      ) leading ${1#*=}  || usage ;;                               # line spacing > 1.0
			noround        ) unset sb ;;
			quasi-ext*     ) spacing quasi-proportional-extension-only; unset width; cap extended ;;
			quasi-pro*     ) spacing quasi-proportional; leading 1.2500; space 2; ebook quasi$(echo $family | sed -r 's/.*(Hyper|Mono|Quasi)//'); variant I-serifed; unset baseline ;;
			sb=*           ) sb ${1#*=}       || usage ;;                               # side bearing (spacing)
			shape=*        ) shape ${1#*=}    || usage ;;                               # cell width
			weight=*       ) tuple=${1#*=}; weight ${tuple%:*} ${tuple#*:} || usage ;;  # custom font weight
			xheight=*      ) xheight ${1#*=}  || usage ;;                               # height of x (experimental for larger fontsizes)

			help           ) usage ;;
			*              ) usage ;;
		esac
		shift
	done
}

# default dyslexic monospaced typeface settings
monolexic
cmdopts q-hook

leading $leading
no_litigation=false
mono=--mono  # nerdfont (pango no longer supports double width display)
shape 500
sb 0.7000
spacing term
xheight 0    # set default xHeight (to 10.x)
ascender 0   # set default ascender (to 10.x)

# custom fonts
cmdopts $@

[ "$shape" ] || usage
[ $family ]  || family=Iosevka$build
[ $mono ]    || family=${family}-double

ditto spacing "$spacing"
ditto override "$leading"
ditto override "$shape"
ditto override "$sb"
[ $space     ] && ditto override "space ${space}$([ $space = 'M' ] || echo x)"
[ $emdash    ] && ditto override "emdash ${emdash}x"
[ $width     ] && ditto width "$width"
[ "$variant" ] && ditto variants "$variant"
[ $adjust    ] && ditto adjust "book+weight"
[ $capadjust ] && ditto tweak "caps C G O Q S U"

# additional font weight
[ $weight ] && weight="
[buildPlans.$family.weights.$name]
shape = $weight
menu  = $weight
css   = $weight
"

cd $REPO
# rm -rf build dist 2>/dev/null

# a tweaked :-) atkinson hyperlegible font character emulation
variants="
capital-b = '$capital_b'                   # B
capital-d = '$capital_d'                   # D
capital-g = '$capital_g'                   # G
capital-i = '$capital_i'                   # I
capital-j = '$capital_j'                   # J
capital-k = '$capital_k'                   # K
capital-m = 'flat-bottom-serifless'        # M
capital-p = '$capital_p'                   # P
capital-q = '$capital_q'                   # Q
capital-r = '$capital_r'                   # R
capital-u = 'toothless-rounded-serifless'  # U
capital-w = '$capital_w'                   # W
a = '$a'
b = '$b'
d = '$d'
e = 'flat-crossbar'
f = '$f'
g = '$g'
i = '$i'
j = '$j'
k = '$k'
l = '$l'
m = '$m'
p = '$p'
q = '$q'
r = 'hookless-serifless'
t = '$t'
u = '$u'
w = '$w'
y = '$y'
zero = '$zero'                            # 0
one = '$one'                              # 1
two = 'straight-neck-serifless'           # 2
four = '$four'                            # 4
five = 'oblique-arched-serifless'         # 5
six = '$six'                              # 6
eight = 'two-circles'                     # 8
brace = 'straight'                        # {}
ampersand = '$ampersand'                  # &
asterisk = '$asterisk'                    # *
at = '$at'                                # @
cyrl-ef = 'serifless'                     # ф
cyrl-capital-ka = '$cyrl_ka'              # К
cyrl-ka = '$cyrl_ka'                      # к
cyrl-capital-zhe = 'straight'             # Ж
cyrl-zhe = 'straight'                     # ж
cyrl-yeri = 'round'                       # ь
cyrl-yery = 'round'                       # Ы
dollar = '$dollar'                        # $
eszet = 'sulzbacher-serifless'            # ß
long-s = 'bent-hook-serifless'            # ſ
lower-iota = 'flat-tailed'                # ι
# lower-lambda = 'straight-turn'          # λ
lower-mu = 'toothless-rounded-serifless'  # µ
lower-xi = 'rounded'                      # ξ
number-sign = '$number_sign'              # #
pilcrow = 'low'                           # ¶
paren = '$paren'                          # ()
percent = '$percent'                      # %
question = '$question'                    # ?
"

# based on sample.toml (with quote and backtick conversion to single quotes)
echo "
### See https://github.com/be5invis/Iosevka/blob/master/doc/custom-build.md for comprehensive
### documentation of the options in this file

[buildPlans.$family]        # <iosevka-custom> is your plan name
family = '$family'          # Font menu family name
spacing = '$spacing'        # Optional; Values: 'normal', 'term', 'fontconfig-mono', or 'fixed'
serifs = 'sans'             # Optional; Values: 'sans' or 'slab'
export-glyph-names = false  # Set this to true for ligature support in Kitty (increased file size)

noCvSs = true
no-litigation = $no_litigation
webfont-formats = 'ttf'

###################################################################################################
# Configure variants

# Optional; Whether to inherit a 'ss##' variant
[buildPlans.$family.variants]
# inherits = 'ss01'                   # use defaults instead (of inheriting)

# Optional; Configure single character's variant
[buildPlans.$family.variants.design]
$variants

# Optional; Configure single character's variant for Upright and Oblique; Overrides [design]
[buildPlans.$family.variants.upright]
$variants

# Optional; Configure single character's variant for Italic only; Overrides [design]
[buildPlans.$family.variants.italic]
$variants

# End variant section
###################################################################################################

###################################################################################################
# Configure ligations

[buildPlans.$family.ligations]
$inherits      # Optional; inherits an existing ligation set
disables = []  # Optional; disable specific ligation groups, overrides inherited ligation set
enables  = []  # Optional; enable specific ligation groups, overrides inherited ligation set

# End ligation section
###################################################################################################


###################################################################################################
# Override default building weights
# When buildPlans.<plan name>.weights is absent, all weights would built and mapped to
# default values.
# IMPORTANT : Currently 'menu' and 'css' property only support numbers between 0 and 1000.
#             and 'shape' properly only supports number between 100 and 900 (inclusive).
#             If you decide to use custom weights you have to define all the weights you
#             plan to use otherwise they will not be built.
[buildPlans.$family.weights.regular]
shape = 400  # Weight for glyph shapes.
menu  = 400  # Weight for the font's names.
css   = 400  # Weight for webfont CSS.

[buildPlans.$family.weights.book]
shape = 450
menu  = 450  # Use 450 here to name the font's weight 'Book'
css   = 450

[buildPlans.$family.weights.bold]
shape = 700
menu  = 700
css   = 700

$weight

# End weight section
###################################################################################################

###################################################################################################
# Override default building slope sets
# When this section is absent, all slopes would be built.

[buildPlans.$family.slopes.upright]
angle = 0             # Angle in degrees. Valid range [0, 15]
shape = 'upright'     # Slope grade used for shape selection.  'upright' | 'oblique' | 'italic'
menu  = 'upright'     # Slope grade used for naming.           'upright' | 'oblique' | 'italic'
css   = 'normal'      # Slope grade used for webfont CSS.      'normal'  | 'oblique' | 'italic'

# [buildPlans.$family.slopes.oblique]
# angle = 9.4
# shape = 'oblique'
# menu  = 'oblique'
# css   = 'oblique'

[buildPlans.$family.slopes.italic]
angle = 9.4
shape = 'italic'
menu  = 'italic'
css   = 'italic'
# End slope section
###################################################################################################

###################################################################################################
# Override default building widths
# When buildPlans.<plan name>.widths is absent, all widths would built and mapped to
# default values.
# IMPORTANT : Currently 'shape' property only supports numbers between 434 and 664 (inclusive),
#             while 'menu' only supports integers between 1 and 9 (inclusive).
#             The 'shape' parameter specifies the unit width, measured in 1/1000 em. The glyphs'
#             width are equal to, or a simple multiple of the unit width.
#             If you decide to use custom widths you have to define all the widths you plan to use,
#             otherwise they will not be built.

[buildPlans.$family.widths.normal]
$shape            # Unit Width, measured in 1/1000 em.
menu  = 5         # Width grade for the font's names.
css   = 'normal'  # 'font-stretch' property of webfont CSS.

# [buildPlans.$family.widths.extended]
# shape = 600
# menu  = 7
# css   = 'expanded'

# End width section
###################################################################################################

###################################################################################################
# Character Exclusion
# Specify character ranges in the section below to exclude certain characters from the font being
# built. Remove this section when this feature is not needed.

[buildPlans.$family.excludeChars]
$exclude_chars

# End character exclusion
###################################################################################################

###################################################################################################
# Compatibility Ligatures
# Certain applications like Emacs does not support proper programming liagtures provided by
# OpenType, but can support ligatures provided by PUA codepoints. Therefore you can edit the
# following section to build PUA characters that are generated from the OpenType ligatures.
# Remove this section when compatibility ligatures are not needed.

# [[buildPlans.$family.compatibility-ligatures]]
# unicode = 57600 # 0xE100
# featureTag = 'calt'
# sequence = '<*>'

# End compatibility ligatures section
###################################################################################################

###################################################################################################
# Metric overrides
# Certain metrics like line height (leading) could be overridden in your build plan file.
# Edit the values to change the metrics. Remove this section when overriding is not needed.

[buildPlans.$family.metricOverride]
# leading = 1250
winMetricAscenderPad = 0
winMetricDescenderPad = 0
powerlineScaleY = 1
powerlineScaleX = 1
powerlineShiftY = 0
powerlineShiftX = 0

# metric-override adjustments
$leading
$sb
$cap
$xheight
$ascender

# End metric override section
###################################################################################################
" >$REPO/private-build-plans.toml

# ensure node.js is uptodate
npm install  # ignore npm funding and audit messages
# npm update

npm run build -- ttf::$family  # post Verda commits

if [ -z "$ebook" ] || [ $nerdfont ] ;then
	ditto mono $mono
	nerdfont $mono $family                      # insert glyphs
	unset serifless                             # monospace charset
fi

mkdir -p $HOME/.fonts/$family
cp -v dist/$family/TTF/* $HOME/.fonts/$family  # v30 directory name change
export ANGLE=-11                               # sight adjusted italics angle

# remove old v27 Iosevka font files
for i in $HOME/.fonts/$family/*ttf ;do
	echo $i | grep -q 'normal' || rm $i
done

# suppress spurious fontforge errors/warnings

unset adjust baseline capadjust  # no longer applying for koreader and version 3x

[ $q_hook        ] && fforge q_hook                          $family 2>/dev/null
[ $q_hook_       ] && fforge q_hook_            ${shape##* } $family 2>/dev/null  # hyperlegible font mod for better q
[ $Q_hook        ] && fforge Q_hook                          $family  # hooked capital Q
[ $Q_horizontal  ] && fforge Q_horizontal       ${shape##* } $family  # open horizontal capital Q
[ $Q_custom      ] && fforge Q_custom           ${shape##* } $family  # custom capital Q

[ $f_asymmetric  ] && fforge f_asymmetric       ${shape##* } $family  # font mod for asymmetric f
[ $f_ascending   ] && fforge f_ascending        ${shape##* } $family  # font mod for ascending serifless f
[ $f_descending  ] && fforge f_descending       ${shape##* } $family  # font mod for descending serifless f
[ $I_descending  ] && fforge I_descending       ${shape##* } $family  # font mod for descending serifless capital I
[ $i_flipped     ] && fforge i_flipped          ${shape##* } $family  # font mod for flipped serifed i
[ $l_ascending   ] && fforge l_ascending        ${shape##* } $family  # font mod for ascending serifless l
[ $T_descending  ] && fforge T_descending       ${shape##* } $family  # font mod for descending capital T
[ $t_descending  ] && fforge t_descending       ${shape##* } $family  # font mod for descending t
[ $t_flipped     ] && fforge t_flipped          ${shape##* } $family  # font mod for flipped asymmetric t
[ $Y_descending  ] && fforge Y_descending       ${shape##* } $family  # font mod for descending capital Y
[ $FP_descending ] && fforge FP_descending      ${shape##* } $family  # decending caps (experimental)
[ $capadjust     ] && fforge capadjust          "CGOQSU"     $family  # shift up bottom of glyphs to x base

if [ $ebook ] ;then
	(( $(echo "$space >= 1.0" | bc -l) )) && fforge punctuation ${emdash:-2} ${shape##* } $family 2>/dev/null; unset width
	if [ $spacing != 'quasi-proportional' ] ;then
		fforge ligature $width                                  ${shape##* } $family  # ae width character adjustment
		[ "$s_I$s_i$s_j$s_l" ] && fforge serifless "$s_I$s_i$s_j$s_l"   ${shape##* } $family  # adjust serifless "I i j l" cell width
		[ "$S_i$S_J$S_j$S_l" ] && fforge serifed "$S_i$S_J$S_j$S_l"     ${shape##* } $family  # adjust serifed "i J j l" cell width
		[ "$T_l"             ] && fforge l_tailed "$T_l"                ${shape##* } $family  # adjust tailed "l" cell width
		[ $serifless         ] || [ $serifed ] && fforge quote "‘’‛"    ${shape##* } $family  # adjust quote (left,right,reversed) cell width
		[ $serifless         ] || [ $serifed ] && fforge serifless  "'" ${shape##* } $family  # adjust single quote cell width
		[ "$T_a$T_d"         ] && fforge tailed "$T_a$T_d"              ${shape##* } $family  # adjust tailed "a d" cell width
	fi
	[ $adjust ] && fforge ${regular}weight $adjust $family  # rename weight for e-reader (as regular)
	[ $space  ] && fforge space $space             $family  # lengthen space character cell width
fi

[ $baseline ] && fforge baseline ${shape##* } $family 2>/dev/null  # force baseline adjustment for descending caps and q-hook

# udev  # reinitialize udev for attached ereaders

# kak: filetype=sh
