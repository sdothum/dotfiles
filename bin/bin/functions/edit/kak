#!/usr/bin/dash
# sdothum - 2016 (c) wtfpl

# Edit
# ══════════════════════════════════════════════════════════════════════════════

# ....................................................................... Editor

usage() { echo "[kmd=<command>] $(basename $0) [-l'ist | -k'ill [<id>] | -d'ebug [<debug>] | -v'ersion | -h'elp]
> [-BENCHMARK | -LEXICON | -PROOF | -TRACE | -UNPLUG | -CONSOLE | RULER=<char>]
> [-- | ID=<id>] [WAIT] [<row>x<col>]
> <file>*
> where, <debug> is [hooks|shell|profile|keys|commands]" | usage:
	exit 1
}

# NOTE: $kmd is passed passively to (env) term for subsequent "xdotool type"

headless=${headless:-false}
echo $1 | grep -q '.*/yazi-.*/bulk-.*' && yazi=true  # FOR: attached yazi bulk renames
# share all instances (clients) with a single kak server session
ID=${ID:-$USER}  # default session id

[ -e $SESSION/kak:ruler ] && export RULER=$(cat $SESSION/kak:ruler)
[ "$BG" ] || { [ -e $SESSION/kak:bg ] && export BG=$(cat $SESSION/kak:bg); }
export TABSTOP=3      # default for (pipe), SEE: align

[ -e /usr/local/bin/kak ] && KAK=/usr/local/bin/kak || KAK=/usr/bin/kak
$KAK -l | grep -q dead | $KAK -clear  # dead sessions

debug() { echo "$1" | grep -qE 'hooks|shell|profile|keys|commands' && debug="-debug $1" || debug="-debug commands"; }

while : ;do
	case $1 in
		-l            ) $KAK -l; exit ;;
		-k            ) [ $2 ] && $KAK -p $2 || { for i in $($KAK -l); do ditto kak "$i ${RED}❌"; echo kill | $KAK -p $i ;done }; exit ;;
		-d            ) export TRACE=/tmp/kak:trace; debug $2 && shift ;;  # debug trace
		-v*           ) $KAK -version; exit ;;
		-h* | help    ) $KAK -help; usage ;;
		-B*           ) hyperfine -warmup 10 "$KAK -ui dummy -e quit"; exit ;;
		-LEXICON      ) DICTIONARY=$HOME/.config/kak-lsp/kak-lsp:dictionary; reverse=-r ;;  # push .config dictionary to end of sort list
		-PROOF        ) export MONOFONT="Iosevka-proof" ;;
		-T*           ) export TRACE=/tmp/kak:trace ;;  # trace messages
		-U*           ) export UNPLUG=true ;;           # kakrc plugins exclusions
		-C*           ) unset DISPLAY; console=true; export COLORSCHEME=${COLORSCHEME:-default} ;;
		RULER=*       ) export RULER="${1#*=}" ;;       # default RULER='│'
		--            ) ID=$(rand)    ;;                # force new instance
		id=*          ) ID="${1#*=}"  ;;
		ID=*          ) ID="${1#*=}"  ;;
		WAIT          ) WAIT=$1 ;;
		*[0-9]x[0-9]* ) XY=$1   ;;
		*             ) break   ;;
	esac
	shift
done

# inject spelling dictionary manually into ltex configuration in lieu of unavailable ltex-ls dictionary update
if [ "$DICTIONARY" ] ;then
	TOML=$HOME/.config/kak-lsp/kak-lsp.toml  # FOR: kak-lsp v17.2.1
	cat $TOML:zk $TOML:add >$TOML:template
	if [ -e $DICTIONARY ] ;then
		spelling="$(sort -df $DICTIONARY | sed -r '/^ *$/d; s/^ *(.*) *$/\\"\1\\":/' | tr '\n' ':')"  # comma's cause unterminated address regex error
		sed "/^dictionary/a${spelling%::}" $TOML:template | sed "/^dictionary/{n;s/::/,\n/g}" >$TOML
	fi
fi

# escape filenames containing spaces
count=0
IFS=$(echo)  # to handle space filename parsing
for i in $@ ;do
	grep -q '^#.*filetype=sh' "$i"         && ID=script
	echo "$i" | grep -Eq '(^kakrc|\.kak)$' && ID=kakoune
	files=$(printf "%s\n%s" "$i" "$files")
	count=$(( count + 1 ))
done

[ $count -gt 1 ] && notify low 'Kakoune' "$count files to edit"
# snapshot sources (in lieu of persistent undo avalability)
console || (printf "$files" | xargs -r -d'\n' hgadd) &

# client/server
if $headless ;then
	$KAK -l | grep -q $ID || setsid $KAK -d -s $ID &
else
	$KAK -l | grep -q $ID || session='-s'
fi

[ $yazi ] && exec $KAK $files  # NOTE: attached yazi session only issues 1 file (??) spawning via xargs causes desktop windowing issues
console || [ $console ] && { printf "$files" | sort $reverse | xargs -d'\n' $KAK; exit; }  # NOTE: "exec .. | .." (pipe) will not redirect shell, hence, "exit"

title=$(echo "$1" | sed 's|\.\/||g; s| [^ ]*/||; s/ .*/.../g')
[ $count -gt 1 ] && title="$title($count)"
XARGS=/tmp/kak:xargs

# NOTE: ".. | xargs kak" will additionally open a *stdin* scratch buffer

echo "#!/bin/dash
printf \"$files\" | sort $reverse | xargs -d'\\\n' $KAK $debug ${session:--c} $ID
" >$XARGS
chmod 755 $XARGS

exec term "title=kak:$title" class=${class:-kak} PAPER ${XY:-132x52} $WAIT $XARGS  # NOTE: exec for pwait pattern match

# kak: filetype=sh
