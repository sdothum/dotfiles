#!/usr/bin/bash
# sdothum - 2016 (c) wtfpl

# Edit
# ══════════════════════════════════════════════════════════════════════════════

# ........................................................... modal pipe actions

usage() { echo "<selection> | $(basename $0) [<nth>] [')' | '{' | '|' | '&' | '=' | '#' | '\' | ';\' | '//' | '--' | '||' | '&&' | ';;' | <string>]
>   where, 'pattern' -> ' pattern '
>          '#'       -> '  # ' (appended comment)
>          ''        -> ' '    (nth <space>* column)
>          <string>  -> ' <string>'
>          tabstop   -> ${TABSTOP:-3}" | usage:pipe
	exit 1
}

LINES=/tmp/align:stdin
tabstop=${TABSTOP:-3}

delim='⁋'         # split char
dollar='¢'        # hard char to avoid "echo" loss
space='•'         # hard char
tab=$(for i in $(seq $tabstop) ;do echo -n "‣" ;done )  # hard char to avoid "echo" loss
nth=1             # pattern position
gutter=' '        # pattern gutter prefix
ignore='❌'       # nth space column split case avoidance (SEE: below)
backslash='◌'     # preserve backslash
continuation='➥'  # special ;\ pair

case "$1" in
	')'   ) match=$1; ignore="()" ;;  # align case pattern ')'
	'{'   ) match=$1; ignore="{}" ;;       # align single line f() '{'
	'||'  ) match=$1 ;;
	'&&'  ) match=$1 ;;
	'|'   ) match=$1 ;;
	'&'   ) match=$1 ;;
	'='   ) match=$1 ;;
	'\'   ) match='\\' ;;
	'#'   ) match=$1; gutter='  ' ;;
	'//'  ) match=$1; gutter='  ' ;;
	'--'  ) match=$1; gutter='  ' ;;
	[1-9] ) nth=$1; match=''; shift ;;     # align by spaces
	help  ) usage ;;
	*     ) match=" " ;;                   # force drop through (below)
esac
[ "$1" = ';;' ] && match=semicolons       # case cannot match on statement terminator
[ "$1" = ';\' ] && match=semibslash       # case cannot match on statement terminator

# insert split char and mark special chars
case "$match" in
	[\)\{]     ) sed "/^[^${ignore}]*)/s/ *$match */$delim$gutter$match /" ;;
	'#'        ) sed -r "s/^( *$match*.*[^ ]) *$match */\1$delim$gutter$match /$nth" ;;    # ignore leading #  comment
	'\\'       ) sed -r "s/^(.*[^ ]) *$match */\1$delim$gutter$match /$nth" ;;             # ignore any preceding backslashes
	'//'       ) sed -r "s|^( *($match)*.*[^ ]) *$match *|\1$delim$gutter$match |$nth" ;;  # ignore leading // c
	'--'       ) sed -r "s/^( *($match)*.*[^ ]) *$match */\1$delim$gutter$match /$nth" ;;  # ignore leading -- lua
	semicolons ) sed "s/ *;; */$delim$gutter;; /$nth" ;;
	semibslash ) sed "s/ *;\\ */$delim$gutter;$continuation /$nth" ;;  # backslash continuation variant
	''         ) sed "s/  */$delim /$nth" ;;    # align by spaces
	"$match"   ) sed "s/ *$match */$delim$gutter$match /$nth" ;;
	*          ) sed "s/$1/$delim $1/$nth" ;;   # align by string
esac | sed -r ":a; s/^( *) /\1$space/; ta; s/\t/$tab/g; s/[$]/$dollar/g; s/\\\/$backslash/g" >$LINES         # leading hard char

# max left part width
max=0
while read line <&3 ;do
	if echo "$line" | grep -q "$delim" ;then
		len=$(echo "$line" | sed "s/${delim}.*//" | wc -m)  # wc by chars NOT bytes
		[ $len -gt $max ] && max=$len
	fi
done 3< $LINES

# pad align left/right parts and restore special chars
while read line <&3 ;do
	if echo "$line" | grep -q "$delim" ;then
		left=$(echo "$line" | sed "s/${delim}.*//")
		pad=$(( $max - $(echo "$left" | wc -m) ))
		pad=$(for i in $(seq $pad) ;do echo -n " " ;done )
		right=$(echo "$line" | sed "s/.*$delim//")
		echo "$left$pad$right"
	else
		echo "$line"
	fi
done 3< $LINES | sed -r ":a; s/^(${space}*)$space/\1 /; ta; s/$tab/\t/g; s/$dollar/$/g; s/$backslash/\\\/g; s/$continuation //"  # leading :space:

# kak: filetype=sh
